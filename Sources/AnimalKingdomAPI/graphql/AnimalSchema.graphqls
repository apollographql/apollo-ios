type Query {
  allAnimals: [Animal!]!
  allPets: [Pet!]!
  classroomPets: [ClassroomPet!]!
}

interface Animal {
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
}

interface Pet {
  humanName: String
  favoriteToy: String!
  owner: Human
}

interface HousePet implements Animal & Pet {
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
  humanName: String
  favoriteToy: String!
  owner: Human
  bestFriend: Pet
  rival: Pet
  livesWith: ClassroomPet
}

interface WarmBlooded implements Animal {
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
  bodyTemperature: Int!
  laysEggs: Boolean!
}

type Height {
  relativeSize: RelativeSize!
  centimeters: Int!
  meters: Int!
  feet: Int!
  inches: Int!
  yards: Int!
}

type Human implements Animal & WarmBlooded {
  firstName: String!
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
  bodyTemperature: Int!
  laysEggs: Boolean!
}

type Cat implements Animal & Pet & WarmBlooded {
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
  humanName: String
  favoriteToy: String!
  owner: Human
  bodyTemperature: Int!
  laysEggs: Boolean!
  isJellicle: Boolean!
}

type Dog implements Animal & Pet & HousePet & WarmBlooded {
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
  humanName: String
  favoriteToy: String!
  owner: Human
  bodyTemperature: Int!
  laysEggs: Boolean!
  bestFriend: HousePet
  rival: Cat
  livesWith: Bird
}

type Bird implements Animal & Pet & WarmBlooded {
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
  humanName: String
  favoriteToy: String!
  owner: Human
  bodyTemperature: Int!
  laysEggs: Boolean!
  wingspan: Int!
}

type Fish implements Animal & Pet {
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
  humanName: String
  favoriteToy: String!
  owner: Human
}

type Rat implements Animal & Pet {
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
  humanName: String
  favoriteToy: String!
  owner: Human
}

type Crocodile implements Animal {
  species: String!
  height: Height!
  predators: [Animal!]!
  skinCovering: SkinCovering
  age: Int!
}

type PetRock implements Pet {
  humanName: String
  favoriteToy: String!
  owner: Human
}

union ClassroomPet = Cat | Bird | Rat | PetRock

enum RelativeSize {
  LARGE
  AVERAGE
  SMALL
}

enum SkinCovering {
  FUR
  HAIR
  FEATHERS
  SCALES  
}
