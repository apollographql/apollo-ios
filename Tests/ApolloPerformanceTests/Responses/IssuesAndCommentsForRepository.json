{"data":{"repository":{"__typename":"Repository","name":"apollo-ios","issues":{"__typename":"IssueConnection","nodes":[{"__typename":"Issue","title":"Xcode 12 Beta Archive issue ","author":{"__typename":"User","login":"nkmrh","id":"MDQ6VXNlcjU2NDQ0MjA=","name":"Hajime Nakamura"},"body":"I failed to archive app with 12.0 beta 2 and I found that other libraries have similar issues.\r\n\r\n- https://github.com/airbnb/lottie-ios/issues/1214\r\n- https://github.com/Alamofire/Alamofire/issues/3240\r\n\r\n# Error message\r\n\r\n```\r\nUndefined symbols for architecture armv7:\r\n  \"type metadata for Swift._StringObject.Variant\", referenced from:\r\n      outlined init with take of Swift._StringObject.Variant in ApolloStore.o\r\nld: symbol(s) not found for architecture armv7\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\n# Environment\r\nApollo version: 0.28.0\r\nXcode version: 12.0 beta 2 (12A6163b)\r\nSwift version: 5.3 (swiftlang-1200.0.16.13 clang-1200.0.22.25)\r\nPlatform(s) running Apollo: iOS\r\nmacOS version running Xcode: 10.15.5","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Weird! I'm literally testing the new beta right now, and I was just able to build and test `0.29.1` with Xcode 12 b2 without any problem. Have you cleaned your build folder and/or done the [derived data dance](http://derivedata.dance) recently? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":">Have you cleaned your build folder and/or done the derived data dance recently?\r\n\r\nI've tried it but it hasn't helped...\r\n\r\nCould you try setting the build configuration to release? ~~It seems that the optimization level is related.~~ Or try archive.","author":{"__typename":"User","login":"nkmrh","id":"MDQ6VXNlcjU2NDQ0MjA=","name":"Hajime Nakamura"}},{"__typename":"IssueComment","body":"Can't really do archive on a framework, but can confirm this is showing up if I switch the Run action to build for release. \r\n\r\nIt looks like the issue is [some kind of bug with substrings in the beta](https://developer.apple.com/forums/thread/649918?answerId=614735022#614735022). Unfortunately because we support older versions of iOS, disabling armv7 support in the library isn't really a good option for us. \r\n\r\nIt also looks like the workaround for our library isn't as simple as [Lottie's](https://github.com/airbnb/lottie-ios/pull/1215) - we're not using `prefix` and `suffix` methods on `String` anywhere in the main `Apollo` lib, and I'm getting an error on compilation in release mode with a totally different file than you are (`GraphQLResultNormalizer.o`) that's not doing any super-obvious string manipulation. \r\n\r\nIf you have some time to dig around, I'd encourage you to. At this point I've got enough on my plate that something clearly acknowledged by Apple as a bug and which only affects release builds on a beta Xcode is not going to be something I prioritize digging into on my own. Will definitely check back in on this with subsequent beta releases though. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"https://github.com/zhangao0086/DKImagePickerController/issues/669","author":{"__typename":"User","login":"OmarJalil","id":"MDQ6VXNlcjI1NTIwMDE1","name":"Jalil"}},{"__typename":"IssueComment","body":"@designatednerd Thank you for your research. I want to wait for this bug to be fixed in a future Xcode version.","author":{"__typename":"User","login":"nkmrh","id":"MDQ6VXNlcjU2NDQ0MjA=","name":"Hajime Nakamura"}},{"__typename":"IssueComment","body":"I am experiencing this issue as well, which prevented Carthage from building Apollo. I mentioned the issue in the Xcode 12 thread: https://github.com/apollographql/apollo-ios/pull/1280\r\n\r\nI fixed the issue here: https://github.com/danl3v/apollo-ios/tree/0.29.1-xcode12 and it works fine. Feel free to cherry-pick the latest commit to another version of apollo as required. Hopefully Apple will fix its substring issue","author":{"__typename":"User","login":"danl3v","id":"MDQ6VXNlcjg4MzE4OA==","name":"Daniel Levy"}},{"__typename":"IssueComment","body":"Xcode 12 beta 3 just came out, and I am now no longer able to reproduce this by switching the run action to build for release. \r\n\r\n@danl3v @nkmrh Can you please confirm that this is no longer an issue on the `betas/xcode-12` branch for you? Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Will do early next week","author":{"__typename":"User","login":"danl3v","id":"MDQ6VXNlcjg4MzE4OA==","name":"Daniel Levy"}},{"__typename":"IssueComment","body":"@designatednerd @danl3v I confirmed the issue on the `betas/xcode-12 ` branch with Xcode 12.0 beta 3. Unfortunately the one reproduced :(","author":{"__typename":"User","login":"nkmrh","id":"MDQ6VXNlcjU2NDQ0MjA=","name":"Hajime Nakamura"}},{"__typename":"IssueComment","body":"@nkmrh Weird! Did you do `Clean Build Folder` before trying to archive? I double-checked that I'd done that before trying to do the run action as build for release and it still worked. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd I checked the betas/xcode-12 branch again and the build was successful but when I add it to a simple project with cocoapods, it still fails to build... (archive is still failing)","author":{"__typename":"User","login":"nkmrh","id":"MDQ6VXNlcjU2NDQ0MjA=","name":"Hajime Nakamura"}},{"__typename":"IssueComment","body":"Interesting....I'll poke at that today. Thanks!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd I tried it with Xcode 12 beta 4, it solved!","author":{"__typename":"User","login":"nkmrh","id":"MDQ6VXNlcjU2NDQ0MjA=","name":"Hajime Nakamura"}},{"__typename":"IssueComment","body":"Excellent! I'm going to close this issue out then - if anyone has issues archiving on Beta 4 or after, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Beta 4 works for us!","author":{"__typename":"User","login":"danl3v","id":"MDQ6VXNlcjg4MzE4OA==","name":"Daniel Levy"}}]}},{"__typename":"Issue","title":"[Web] - Installation panel doesn't expand content","author":{"__typename":"User","login":"wongzigii","id":"MDQ6VXNlcjczODQyODg=","name":"Zigii Wong"},"body":"![image](https://user-images.githubusercontent.com/7384288/86875928-2ad0f500-c116-11ea-8d1f-804f25c74d0f.png)\r\n\r\nClicking the Installation panel doesn't show the content.\r\n\r\nChrome 83.0.4103.116 64-bit","comments":{"__typename":"IssueCommentConnection","nodes":[]}},{"__typename":"Issue","title":"[Web] - Installation panel doesn't expand content","author":{"__typename":"User","login":"wongzigii","id":"MDQ6VXNlcjczODQyODg=","name":"Zigii Wong"},"body":"![image](https://user-images.githubusercontent.com/7384288/86875928-2ad0f500-c116-11ea-8d1f-804f25c74d0f.png)\r\n\r\nClicking the Installation panel doesn't show the content.\r\n\r\nChrome 83.0.4103.116 64-bit","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Oops! I'll let our docs team know, thank you for the heads up!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Fixed by https://github.com/apollographql/apollo-ios/pull/1306\r\n\r\nCheck it out here: https://www.apollographql.com/docs/ios/installation/","author":{"__typename":"User","login":"trevorblades","id":"MDQ6VXNlcjEyMTY5MTc=","name":"Trevor Blades"}},{"__typename":"IssueComment","body":"Thanks @trevorblades, you rock!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"通过 CocoaPods 导入 Apollo 丢失 WebSocket","author":{"__typename":"User","login":"tanchendong1992","id":"MDQ6VXNlcjEwNTU4Mzcy","name":null},"body":"通过 CocoaPods 导入 Apollo 丢失 WebSocket\r\nPodfile 文件中添加 pod 'Apollo', '~> 0.29.0'  执行pod install  完成后 在工程 Pods 中 只有 Apollo/Core 文件 无法找到 Apollo/WebSocket \r\n引用 import ApolloWebSocket 报错 \" No such module 'ApolloWebSocket' \"\r\n\r\n如下图:\r\nPodfile文件:\r\n<img width=\"697\" alt=\"WeChatf75880a9f15d2f78d3d97ec0cd4bc4d9\" src=\"https://user-images.githubusercontent.com/10558372/86881431-eac33f80-c120-11ea-936d-3523e8861d25.png\">\r\n\r\npod search Apollo\r\n<img width=\"573\" alt=\"pod_search_apollo\" src=\"https://user-images.githubusercontent.com/10558372/86881554-2a8a2700-c121-11ea-9aeb-2b823275b8e5.png\">\r\n\r\npod install 完成后\r\n<img width=\"554\" alt=\"pod_install\" src=\"https://user-images.githubusercontent.com/10558372/86881586-3a097000-c121-11ea-810b-fb6c3d255f32.png\">\r\n\r\n使用代码\r\n<img width=\"951\" alt=\"code\" src=\"https://user-images.githubusercontent.com/10558372/86881602-455c9b80-c121-11ea-8d9a-214c3480803e.png\">\r\n\r\n\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Google translated:\r\n\r\n> Importing Apollo via CocoaPods loses WebSocket\r\n> Add pod'Apollo' in the Podfile file,'~> 0.29.0' After executing pod install, only Apollo/Core files cannot be found in the project Pods.\r\n> Quoting import ApolloWebSocket reports error \"No such module'ApolloWebSocket'\"\r\n>\r\n> As shown below:\r\n> Podfile\r\n\r\nYou need to add the `Apollo/WebSocket` subspec in order to access the WebSocket library - it is not included by default, only the core libraries are included by default. So your podfile should look like this if you want to use the web socket library: \r\n\r\n```\r\npod 'Apollo', '~>0.29.0'\r\npod 'Apollo/WebSocket', '~>0.29.0'\r\n```","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"ok","author":{"__typename":"User","login":"tanchendong1992","id":"MDQ6VXNlcjEwNTU4Mzcy","name":null}}]}},{"__typename":"Issue","title":"Figure out how to test cache key generation with JSON objects","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"},"body":"#1281 addresses an issue where cache keys were being unstably generated when one of the items was a JSON array. I haven't been able to find an API that takes JSON arrays, so we need to find an alternate method of testing key generation for this. Don't want to hold up an actual fix for the issue until I  can figure this out, so making this issue to come back to it.","comments":{"__typename":"IssueCommentConnection","nodes":[]}},{"__typename":"Issue","title":"Fatal error (\"Optional is only JSONEncodable if Wrapped is\") when trying to update SqlNormalizedCache manually after a successful mutation operation","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"},"body":"While using Apollo iOS 0.29.1, I appear to be running into an issue similar to the one reported [here](https://github.com/apollographql/apollo-ios/issues/1271). I asked for help with this issue in [Spectrum](https://spectrum.chat/apollo/apollo-ios/updating-cache-after-insert-mutation~71008cf0-6ccf-4474-95bb-ac22c83e9616), and @designatednerd asked me to create a new issue.\r\n\r\nI'm trying to update the SqlNormalizedCache (which is setup and working properly) using the result of a successful mutation operation:\r\n\r\n```\r\napollo.perform(mutation: InsertTaskResponseMutation(taskId: 1, response: \"\")) { result in\r\n    guard\r\n        let resultData = try? result.get().data,\r\n        let taskResponseDetails = resultData.insertTaskResponses?.returning.first?.fragments.taskResponseDetails\r\n    else {\r\n        return\r\n    }\r\n\r\n    apollo.store.withinReadWriteTransaction({ transaction in\r\n        try! transaction.write(object: taskResponseDetails, withKey: \"task_responses-\\(taskResponseDetails.id)\")\r\n    })\r\n}\r\n```\r\n\r\nThis is throwing a fatal error in \"JSONStandardTypeConversions.swift\" at line 109:\r\n\r\n<img width=\"502\" alt=\"Screen Shot 2020-07-08 at 12 01 31 PM\" src=\"https://user-images.githubusercontent.com/10443/86954195-c95b5700-c112-11ea-9ea0-7a32a9b95a7a.png\">\r\n\r\nPrinting the description of `self`:\r\n\r\n```\r\nPrinting description of self:\r\n▿ Optional<Any>\r\n  - some : 07/08/2020\r\n```\r\n\r\nIn this case, `self` is a property on the `response` property, which is a custom `jsonb` type. Here's the type alias:\r\n\r\n```\r\npublic typealias jsonb = [String : Any?]\r\n\r\nextension Dictionary: JSONDecodable {\r\n    public init(jsonValue value: JSONValue) throws {\r\n        guard let dictionary = value as? Dictionary else {\r\n            throw JSONDecodingError.couldNotConvert(value: value, to: Dictionary.self)\r\n        }\r\n        \r\n        self = dictionary\r\n    }\r\n}\r\n```\r\n\r\nAnd here's the query:\r\n\r\n```\r\nquery ChallengeTaskResponse($taskResponseId: Int) {\r\n    challenge_responses(where: {id: {_eq: $taskResponseId}}) {\r\n        ...ChallengeTaskResponseDetails\r\n    }\r\n}\r\n```\r\n\r\nThe mutation:\r\n\r\n```\r\nmutation InsertTaskResponse($response: jsonb) {\r\n    insert_task_responses(objects: {response: $response}) {\r\n        returning {\r\n            ...TaskResponseDetails\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd, finally, the fragment that's used by both the query and the mutation:\r\n\r\n```\r\nfragment TaskResponseDetails on task_responses {\r\n    id\r\n    response // The 'jsonb' custom data type\r\n}\r\n```","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"The problem definitely seems to be in the fact that the value type in the dictionary is `Optional<Any>`, and that's what it's trying to use to create a key. \r\n\r\nDoes it work to typealias it to `[String: JSONDecodable?]` instead?","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'll test that here shortly and report back.","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}},{"__typename":"IssueComment","body":"@nateirwin Were you ever able to get this tested out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd: I started to dive into this, ran into a minor issue (that's project-specific and I just need to push through), then got pulled into another issue altogether. This is still critical for our project and it's next on my list, so I'll get to it soon.\r\n\r\nI'm happy to close this and re-open when I've had the chance to test, if that's helpful.","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}},{"__typename":"IssueComment","body":"Nah, leave it open for now, I'll keep annoying you about it from time to time 😇","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Ok, reporting back :-)\r\n\r\nSwitching the typealias to `public typealias jsonb = [String : JSONDecodable?]` throws an error when loading a query that has a `jsonb` property on it:\r\n\r\n```\r\nPrinting description of error:\r\n▿ GraphQLResultError\r\n  ▿ path : communities.0.organization_community_memberships.1.organization.paper_maps.0.paper_map.status\r\n    ▿ head : Optional<Node>\r\n      ▿ some : <Node: 0x11098f010>\r\n  ▿ underlying : JSONDecodingError\r\n    ▿ couldNotConvert : 2 elements\r\n      ▿ value : 24 elements\r\n        ▿ 0 : 2 elements\r\n          - key : status\r\n          - value : Uploading tiles complete\r\n        ▿ 1 : 2 elements\r\n          - key : min_zoom\r\n          - value : 9\r\n        ▿ 2 : 2 elements\r\n          - key : extent_max_lon\r\n          - value : -100.1\r\n        ▿ 3 : 2 elements\r\n          - key : extent_min_lat\r\n          - value : 37.1\r\n        ▿ 4 : 2 elements\r\n          - key : tileset\r\n          - value : tileset_548\r\n        ▿ 5 : 2 elements\r\n          - key : pdfPath\r\n          - value : https://test.xyz/test.pdf\r\n        ▿ 6 : 2 elements\r\n          - key : updated_at\r\n          - value : 2019-07-29T15:04:09.623Z\r\n        ▿ 7 : 2 elements\r\n          - key : extent_max_lat\r\n          - value : 34.1\r\n        ▿ 8 : 2 elements\r\n          - key : localTilesPath\r\n          - value : https://test.xyz/tiles/\r\n        ▿ 9 : 2 elements\r\n          - key : geotiff_path\r\n          - value : /image_georef.tif\r\n        ▿ 10 : 2 elements\r\n          - key : geotiff_3857_path\r\n          - value : /image_georef_3857.tif\r\n        ▿ 11 : 2 elements\r\n          - key : name\r\n          - value : Name Here\r\n        ▿ 12 : 2 elements\r\n          - key : max_zoom\r\n          - value : 15\r\n        ▿ 13 : 2 elements\r\n          - key : id\r\n          - value : 548\r\n        ▿ 14 : 2 elements\r\n          - key : temp_georefTilesPath\r\n          - value : <null>\r\n            - super : NSObject\r\n        ▿ 15 : 2 elements\r\n          - key : ground_control_points\r\n          - value : [[1071.640625,2925.1640625,-122.104733996093,37.714753539402],[1355.44921875,2053.29296875,-122.09752430208,37.7391649876836],[1192.0390625,1299.8125,-122.105021746829,37.7592430319794],[669.765625,594.1796875,-122.124813348055,37.7770496273366]]\r\n        ▿ 16 : 2 elements\r\n          - key : png_path\r\n          - value : /final.png\r\n        ▿ 17 : 2 elements\r\n          - key : page_number\r\n          - value : <null> { ... }\r\n        ▿ 18 : 2 elements\r\n          - key : image_width\r\n          - value : 2550\r\n        ▿ 19 : 2 elements\r\n          - key : created_at\r\n          - value : 2019-07-29T14:57:07.796Z\r\n        ▿ 20 : 2 elements\r\n          - key : georefTilesPath\r\n          - value : https://test.xyz/tiles_georef\r\n        ▿ 21 : 2 elements\r\n          - key : image_height\r\n          - value : 3300\r\n        ▿ 22 : 2 elements\r\n          - key : extent_min_lon\r\n          - value : -115.1\r\n        ▿ 23 : 2 elements\r\n          - key : file_type\r\n          - value : pdf\r\n      - to : Swift.Dictionary<Swift.String, Swift.Optional<Apollo.JSONDecodable>>\r\n```\r\n\r\nI'm guessing maybe it's bonking on the `null` values? Honestly, we've run into so many issues with this custom `jsonb` scalar type that I'm considering trying to back out of using it altogether.","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}},{"__typename":"IssueComment","body":"Hm, shouldn't be bonking on nulls, we've got something that [theoretically should be handling that](https://github.com/apollographql/apollo-ios/blob/main/Sources/Apollo/JSONStandardTypeConversions.swift#L89). From the underlying error it looks like it's freaking out about the `status` key which is just a String. \r\n\r\nI think a bigger question this brings up is why this data needs to be returned as an arbitrary JSON blob in the first place - why isn't this data returned as something typed? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Well, `status` is the name of the `jsonb` property, which (I think) should be of type `[String: JSONDecodable?]` because of the type alias:\r\n\r\n```\r\npublic typealias jsonb = [String : JSONDecodable?]\r\n\r\nextension Dictionary: JSONDecodable {\r\n    public init(jsonValue value: JSONValue) throws {\r\n        guard let dictionary = value as? Dictionary else {\r\n            throw JSONDecodingError.couldNotConvert(value: value, to: Dictionary.self)\r\n        }\r\n        \r\n        self = dictionary\r\n    }\r\n}\r\n```\r\n\r\nThat's why I'm scratching my head about this. Maybe my next step is setting some more breakpoints in JSONStandardTypeConversions.swift?","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}},{"__typename":"IssueComment","body":"Looking at the JSON, `status` seems to be a key and value of the dictionary which isn't getting deserialized - can you throw in a breakpoint and print out the raw JSON string (or use a proxying tool to see it) that's coming through? That might help.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Sure, here you go (sorry about the delay):\r\n\r\n```\r\n{\r\n  \"data\": {\r\n    \"communities\": [\r\n      {\r\n        \"organization_community_memberships\": [\r\n          {\r\n            \"id\": 467,\r\n            \"organization\": {\r\n              \"paper_maps\": [\r\n                {\r\n                  \"id\": 557,\r\n                  \"paper_map\": {\r\n                    \"description\": \"null\",\r\n                    \"id\": 322,\r\n                    \"name\": \"Name Here\",\r\n                    \"status\": {\r\n                      \"id\": 548,\r\n                      \"name\": \"Name Here\",\r\n                      \"status\": \"Uploading tiles complete\",\r\n                      \"pdfPath\": \"https://test.xyz/test.pdf\",\r\n                      \"max_zoom\": 15,\r\n                      \"min_zoom\": 9,\r\n                      \"png_path\": \"/final.png\",\r\n                      \"file_type\": \"pdf\",\r\n                      \"created_at\": \"2019-07-29T14:57:07.796Z\",\r\n                      \"updated_at\": \"2019-07-29T15:04:09.623Z\",\r\n                      \"image_width\": 2550,\r\n                      \"page_number\": null,\r\n                      \"geotiff_path\": \"/image_georef.tif\",\r\n                      \"image_height\": 3300,\r\n                      \"extent_max_lat\": \"34.1\",\r\n                      \"extent_max_lon\": \"-100.1\",\r\n                      \"extent_min_lat\": \"37.1\",\r\n                      \"extent_min_lon\": \"-115.1\",\r\n                      \"localTilesPath\": \"https://test.xyz/tiles/\",\r\n                      \"mapbox_tileset\": \"trailheadlabs.paper_map_548\",\r\n                      \"georefTilesPath\": \"https://test.xyz/tiles_georef\",\r\n                      \"geotiff_3857_path\": \"/image_georef_3857.tif\",\r\n                      \"temp_georefTilesPath\": null,\r\n                      \"ground_control_points\": \"[[1071.640625,2925.1640625,-122.104733996093,37.714753539402],[1355.44921875,2053.29296875,-122.09752430208,37.7391649876836],[1192.0390625,1299.8125,-122.105021746829,37.7592430319794],[669.765625,594.1796875,-122.124813348055,37.7770496273366]]\"\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n```","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}},{"__typename":"IssueComment","body":"Ah, ok, `status` is _also_ the name of the property of the dictionary, not just one of the things in the dictionary. \r\n\r\nOne thing it didn't occur to me to ask: Is your `Dictionary` initializer getting hit at all? I wonder if it may need to be constrained to the key and value types you're using","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"It is getting hit, and it's throwing when that same `status` property that holds the dictionary.","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}},{"__typename":"IssueComment","body":"Here's a thought - have you got an extension that implements `JSONEncodable`? It looks like you're only implementing `JSONDecodable` above","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hmm, this is what I get when I start to implement `JSONEncodable`:\r\n\r\n<img width=\"1038\" alt=\"Screen Shot 2020-07-16 at 8 35 13 PM\" src=\"https://user-images.githubusercontent.com/10443/87742531-2e165180-c7a4-11ea-9241-a915ebd1413b.png\">","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}},{"__typename":"IssueComment","body":"Aha, [that is indeed implemented in the library](https://github.com/apollographql/apollo-ios/blob/main/Sources/Apollo/JSONStandardTypeConversions.swift#L114). \r\n\r\nOK, I'll mess around with this some to try and figure out what's going on here. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks for your help!","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}},{"__typename":"IssueComment","body":"@nateirwin please try pulling the branch #1317 is opened from and seeing if that fixes your issue. You can put the `typealias` back to `[String: Any?]`. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Yep, that fixes the issue!!!","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}},{"__typename":"IssueComment","body":"This has shipped with `0.30.0` - ready to go for SPM and Carthage, in the process of pushing to trunk on Cocoapods. 🎉","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"More generalized types","author":{"__typename":"User","login":"TimBroddin","id":"MDQ6VXNlcjUyODI4Nw==","name":"Tim Broddin"},"body":"Hi,\r\n\r\nI'm kinda new to Apollo iOS, so sorry if my question is kinda stupid. I'm passing a lot of data around in my (SwiftUI) app and the typing kinda drives me crazy. Right now I'm accepting arguments with types like `LetterPartsQuery.Data.ArtistsSplittedInLetterPart.Artist` & `HomePageQuery.Data.Post.Artist` and it's becoming harder and harder to manage this. \r\n\r\nWhat's the quickest way to having easier types to juggle arround (like just `Artist` in my example above).\r\n\r\nThanks a lot!","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I'm a firm believer in \"There's no such thing as a stupid question, only an asshole answer.\" 😇 That said, this is definitely NOT a stupid question. \r\n\r\nOne thing that helps explain the way we generate this code is that for each operation, we only want to make available those properties and types that you've actually requested, rather than all possible properties and types. This means we have some fairly nested structures like the ones you're seeing. \r\n\r\nOne work around for this is to use [GraphQL fragments](https://graphql.org/learn/queries/#fragments). Our codegen will take anyplace that uses a fragment and generate a fragment type that can be reused across multiple operations. \r\n\r\nThey're still more annoying to use than I'd like (this is something I'm working on in Swift Codegen, but that's slightly blocked at the moment), but they are at least the same reusable type. \r\n\r\nDoes that help? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks a lot! This will make my code readable again 😄 ","author":{"__typename":"User","login":"TimBroddin","id":"MDQ6VXNlcjUyODI4Nw==","name":"Tim Broddin"}}]}},{"__typename":"Issue","title":"Serialize or recreate mutation","author":{"__typename":"User","login":"pggawlowski","id":"MDQ6VXNlcjY0OTY2OTU2","name":null},"body":"What I am trying to achieve is mutation archivization. \r\nMy first try was NSKeyedArchiver.archivedData, however currently it is impossible. \r\nSo I decided to try to serialize and store jsonObject and/or variables and later, when back online, recreate mutation query.\r\n\r\n```\r\nlet object = mutation.variables?.jsonObject ?? [:]\r\ndo {\r\n     let recreatedMutation = try TestMutation.Data(jsonObject: object, variables: nil)\r\n} catch {\r\n    print(error)\r\n}\r\n```\r\n\r\nHowever it results in `Apollo.JSONDecodingError.missingValue`\r\n\r\nAny suggestions how to serialize and store mutations/queries or recreate them from stored data.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"It'd probably help for me to understand the use case - why do you need to persist the mutation itself?","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"We have to deal with cache sync. So one concept is to introduce some kind of mutations persistency. Currently we are successfully mutating cache but we also have to push it away when connection is restored.","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}},{"__typename":"IssueComment","body":"I think I'm a bit confused - are you talking about persisting the **result** of a mutation, or the mutation itself? \r\n\r\nWhat I think is happening is that you're trying to persist the mutation itself so you can push changes you've made locally up to a server. Is that correct? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Exactly! :) ","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}},{"__typename":"IssueComment","body":"So part of the problem is that you're trying to use the nested `TestMutation.Data` type - that type is used for recreating the **result** of the mutation, not the mutation itself. \r\n\r\nYou basically have to create the mutation the same way you would have if you weren't making it locally. So if your generated initializer is `TestMutation(parameter: String)`, then you want to persist the value of `parameter` and then send that mutation again. \r\n\r\nWhat you're trying to do is persist the variables JSON object, but there isn't an initializer for queries that takes that JSON object that you can pass what you're saving directly to. You could probably make a throwing initializer (in another file so it doesn't get overwritten by codegen) for the mutation that pulls that JSON back out, then tries to make the appropriate query from the JSON. \r\n\r\nYou'd have to have some notion of what query the JSON was for, though - it might be better to have some custom `Codable` types that can persist information about both the query type and the parameter values you need to persist. \r\n\r\nThere is definitely not a built-in way to do this, though. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@pgawlowski Anything else I can help with here? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"It's fine. Thank you very much! ","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}},{"__typename":"IssueComment","body":"Cool - I'm going to close this issue out then. Thanks!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"How Can I set authorisation header for Apollo Client?","author":{"__typename":"User","login":"Prathap-iOS","id":"MDQ6VXNlcjU4Mzk2NTI2","name":"Prathap Reddy"},"body":"I am using Apollo Client. I got the access token after login. I have set the access token as authorisation header like this.\r\n\r\nfunc setApolloClient(accessToken: String) {\r\n        self.apolloClient = {\r\n            let authPayloads = [\"Authorization\": \"Bearer \\(accessToken)\"]\r\n            let configuration = URLSessionConfiguration.default\r\n            configuration.httpAdditionalHeaders = authPayloads\r\n            configuration.requestCachePolicy = .reloadIgnoringLocalCacheData\r\n            let endpointURL = URL(string: graphEndpoint)!\r\n            return ApolloClient(networkTransport: HTTPNetworkTransport(url: endpointURL))\r\n            }()\r\n    }\r\n\r\nI am sending this authorisation header to a query to get the user details. It return success. But, I have no idea where it went wrong. I am not getting user details. I am getting Try again later. @designatednerd  Is there any other way to set authorisation header?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I suspect \r\n\r\n```swift\r\nlet authPayloads = [\"Authorization\": \"Bearer (accessToken)\"]\r\n``` \r\n\r\nshould be \r\n\r\n```swift\r\nlet authPayloads = [\"Authorization\": \"Bearer \\(accessToken)\"]`\r\n```\r\n\r\nOtherwise you're sending the literal string `(accessToken)` as your access token rather than using string interpolation, which looks like what you want to do. \r\n\r\nIf that's not the issue, let me know and I can dig deeper - other than that your setup seems pretty straightforward. \r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd I used let authPayloads = [\"Authorization\": \"Bearer \\ (accessToken)\"]. But this one also not working.","author":{"__typename":"User","login":"Prathap-iOS","id":"MDQ6VXNlcjU4Mzk2NTI2","name":"Prathap Reddy"}},{"__typename":"IssueComment","body":"You still need the `\\` before the first paren in `(accessToken)`, otherwise it'll be sent as a string literal. \r\n\r\nAre you able to use a proxy tool like [Charles](https://www.charlesproxy.com/) or [MiTM Proxy](https://mitmproxy.org/) to see what the final headers going out over the network are? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Yeah I used \\ before (accessToken). But There is no proper result. I am not using any proxies.","author":{"__typename":"User","login":"Prathap-iOS","id":"MDQ6VXNlcjU4Mzk2NTI2","name":"Prathap Reddy"}},{"__typename":"IssueComment","body":"I was asking if you could try using a proxy to see if you can see what the final headers are - that way you can see exactly what's going over the network. \r\n\r\nI would also double check with your backend that they take the token as a `Bearer` token - that's standard practice, but I've definitely seen a lot of backends that don't adhere to that.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd my backend team is following the same standard. They taken token as **Bearer** token.","author":{"__typename":"User","login":"Prathap-iOS","id":"MDQ6VXNlcjU4Mzk2NTI2","name":"Prathap Reddy"}},{"__typename":"IssueComment","body":"OK I was double checking what you're doing, and I missed the most obvious thing: The `URLSessionConfiguration` is not being passed into anything, so the configuration you're correctly setting up is not being given to anything to be used. Instead of this at the very end: \r\n\r\n```swift\r\nreturn ApolloClient(networkTransport: HTTPNetworkTransport(url: endpointURL))\r\n```\r\n\r\ntry this: \r\n\r\n```swift\r\nlet client = URLSessionClient(sessionConfiguration: configuration)\r\nreturn ApolloClient(networkTransport: HTTPNetworkTransport(url: endpointURL), client: client)\r\n```","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd Thanks. It's working fine. \r\n\r\nHere is my working code for setting up authorization header.\r\n\r\n`func getApolloClient(headerRequired:Bool = true) -> ApolloClient {\r\n             let tokenValue = SessionManager.shared.getToken().TokenValue\r\n             let authPayloads = [\"Authorization\": \"Bearer \\(tokenValue)\"]\r\n             let configuration = URLSessionConfiguration.default\r\n             configuration.httpAdditionalHeaders = authPayloads\r\n             configuration.requestCachePolicy = .reloadIgnoringLocalCacheData\r\n             let client = URLSessionClient(sessionConfiguration: configuration)\r\n             let endpointURL = URL(string: graphEndpoint)!\r\n             return ApolloClient(networkTransport: HTTPNetworkTransport(url: endpointURL, client: client))\r\n     }`","author":{"__typename":"User","login":"Prathap-iOS","id":"MDQ6VXNlcjU4Mzk2NTI2","name":"Prathap Reddy"}},{"__typename":"IssueComment","body":"@Prathap-iOS great! Mind if we close this out?","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Since @Prathap-iOS has noted that solution works, I'm going to go ahead and close this out. If you're having a similar problem, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"How to use the --passthrough-custom-scalar flag","author":{"__typename":"User","login":"ijl0322","id":"MDQ6VXNlcjE1OTAxNTMx","name":"Isabel Lee"},"body":"Hi, \r\n\r\nI'm trying to use the --passthrough-custom-scalar flag:\r\n\r\n`\"${SCRIPT_PATH}\"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./**/*.graphql --passthrough-custom-scalar --localSchemaFile=\"schema.json\" API.swift`\r\n\r\nAnd getting this error `Error: Unexpected argument: API.swift`\r\n\r\nI'm using Apollo 0.29.1 and Xcode 11.5. Any help would be appreciated, Thanks!\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"It's `--passthroughCustomScalars`, Pascal case instead of kebab case and plural instead of singular. I think that may be causing the parsing to fail.\r\n\r\nIf fixing that doesn't fix it, I'd switch it to after `--localSchemaFile` - that might be looking for multiple arguments but I can't remember off the top of my head. \r\n\r\nLet me know which one (or both) works!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"The Pascal case works !! Thank you so much for your help! ","author":{"__typename":"User","login":"ijl0322","id":"MDQ6VXNlcjE1OTAxNTMx","name":"Isabel Lee"}}]}},{"__typename":"Issue","title":" Getting 'No operations found to generate` error when trying to use `ID` in query","author":{"__typename":"User","login":"dpatel-git","id":"MDQ6VXNlcjY4NDM2NTk1","name":null},"body":"I am working on an iOS application to communicate with our GraphQL backend using Apollo's GraphQL library. With the query below, I am able to generate Swift code that I can use to query backend.\r\n\r\n`query mobileApp {\r\n      app(id: \"content/mobileApp\") {\r\n        title\r\n     } \r\n}`\r\n\r\nI am using the following commands to generate Swift code\r\n\r\n`../../Pods/Apollo/scripts/apollo/bin/run client:codegen --target=swift --includes ../app.graphql --localSchemaFile=./downloaded_schema.json API.swift`\r\n\r\nHowever, if I replace the string literal passed into the app(...) with ID like this\r\n\r\n`query mobileApp {\r\n  app(id: ID!) {\r\n    title\r\n  } \r\n}`\r\n\r\nrunning the same codegen command fails with the following error.\r\n\r\n`Generating query files with 'swift' target\r\n    → No operations or fragments found to generate code for.\r\nError: No operations or fragments found to generate code for.\r\n    at write (~/Downloads/ios-app/Pods/Apollo/scripts/apollo/lib/commands/client/codegen.js:65:39)\r\n    at Task.task (~/Downloads/ios-app/Pods/Apollo/scripts/apollo/lib/commands/client/codegen.js:90:46)`\r\n\r\nIt seems that the script is not able to find a declaration of ID.  Hoping that someone can point me in the right direction, thanks","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I'm not sure why it's saying there are no operations rather than there's an error in your declaration, but there's an error in your declaration. \r\n\r\nTo pass in a parameter, you need to declare that parameter in the query's declaration, then pass it into the query itself: \r\n\r\n```graphql\r\nquery mobileApp($id: ID!) { \r\n  app(id: $id) {\r\n    title\r\n  }\r\n}\r\n```\r\n\r\nHope that gets you going!\r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I think codegen script could be defaulting to `No Operations ...` error if it's able to come to a conclusion. \r\n\r\nAnyways, making the changes you suggested fixed the error.\r\n\r\nSuper thanks.","author":{"__typename":"User","login":"dpatel-git","id":"MDQ6VXNlcjY4NDM2NTk1","name":null}}]}},{"__typename":"Issue","title":"Fragments imported into multiple graphql queries","author":{"__typename":"User","login":"piv199","id":"MDQ6VXNlcjgyOTMxOTE=","name":"Olexii Pyvovarov"},"body":"Hi, quite new to graphql and trying to establish best practices in the project.\r\n\r\nHave found an article about fragments: https://www.apollographql.com/docs/ios/fragments/\r\n\r\nI wonder whether there is an ability to import Fragment.graphql (which defines fragment only) into another graphql file with query that uses that fragment?\r\n\r\n```\r\nFragment.graphql\r\nfragment A { }\r\n```\r\n\r\n```\r\nQuery.grapqhl\r\nquery {\r\n   property {\r\n       ...A\r\n   }\r\n}\r\n```","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Yep, as long as they're in the same module you should be able to do that!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"(you won't need to import fragment.graphql, the codegen should be able to see all fragments defined in the module)","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd Thanks! Sorry for opening the issue... I did all right but the problem was in fragment naming - it was the same as model entity thus I had segmentation fault and not found errors... Thanks for help!\r\n","author":{"__typename":"User","login":"piv199","id":"MDQ6VXNlcjgyOTMxOTE=","name":"Olexii Pyvovarov"}}]}},{"__typename":"Issue","title":"Keys with nil values are removed","author":{"__typename":"User","login":"docallag","id":"MDQ6VXNlcjM1MzIzMQ==","name":"David O'Callaghan"},"body":"Hi,\r\nI'm just wondering why keys with nil values are removed on queries/mutations? \r\n\r\nSpecifically the **withNilValuesRemoved** extension method in **GraphQLInputValue.swift**\r\n\r\nThanks,\r\nDave","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Good question! So you can see a little bit of why in [this test](https://github.com/apollographql/apollo-ios/blob/main/Tests/ApolloTests/InputValueEncodingTests.swift#L74) and [this test](https://github.com/apollographql/apollo-ios/blob/main/Tests/ApolloTests/InputValueEncodingTests.swift#L80). \r\n\r\nFor input values, passing `nil` and passing `.some(nil)` have different meanings. Passing `nil` means \"I am not providing a value here.\" Passing `.some(nil)` means \"I am providing a value, and it is explicitly nil.\" The `nil`s are filtered out, the `.some(nil)`s are not.\r\n\r\nThis has effects on the server side: If you send `null` to the server, it will overwrite whatever was already in your server-side database with `null`. If you don't send anything to the server, anything which was already there and isn't explicitly being changed will remain untouched. \r\n\r\nIn the swift Codegen stuff I'm working on there's going to be a [`GraphQLOptional`](https://github.com/apollographql/apollo-ios/blob/main/Sources/ApolloCore/GraphQLOptional.swift#L3) type that should capture this a bit more clearly than the current codegen, but unfortunately that's still a ways out (😭). \r\n\r\nDoes that make more sense? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Oh that's perfect! I can use `.some(nil)` to stop it being filtered out.\r\n\r\nThanks so much for the quick reply 🤩","author":{"__typename":"User","login":"docallag","id":"MDQ6VXNlcjM1MzIzMQ==","name":"David O'Callaghan"}}]}},{"__typename":"Issue","title":"Does every table need an \"id\" or \"","author":{"__typename":"User","login":"joshuarobs","id":"MDQ6VXNlcjUyOTQ2ODgx","name":null},"body":"","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"(closing this in favor of #1326)","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Does every table need an \"id\" or \"_id\" field for its data to be cached properly?","author":{"__typename":"User","login":"joshuarobs","id":"MDQ6VXNlcjUyOTQ2ODgx","name":null},"body":"According to Apollo Client React here: https://www.apollographql.com/docs/react/caching/cache-configuration/#generating-unique-identifiers the way data is identified and if any changes have been made is as described:\r\n\r\n````\r\nTo do so, it combines the object's __typename with its id or _id field (whichever is defined).\r\nThese two values are separated by a colon (:).\r\n````\r\n\r\nThere seems to be an option for React where a different field other than `id` can be used, especially if there is another field set as the primary key on the db.\r\n\r\nIs there a way to do this for Apollo iOS? If not, does that mean we have to make all tables in our database have some sort of `id` or `_id` field?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! This is handled rather differently on iOS at the moment. Here's [a detailed doc about our caching on iOS](https://www.apollographql.com/docs/ios/caching/). \r\n\r\nThe short answer of how to set a custom key is to take a look at the [Controlling Normalization section](https://www.apollographql.com/docs/ios/caching/#controlling-normalization), where you can find information about the `cacheKeyForObject` function you can use to set custom cache keys on iOS. \r\n\r\nDoes that answer your question? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Yes it does, thanks!","author":{"__typename":"User","login":"joshuarobs","id":"MDQ6VXNlcjUyOTQ2ODgx","name":null}},{"__typename":"IssueComment","body":"@designatednerd Also, forgot to ask one more quick question: is `cacheKeyForObject` set only once throughout the whole Apollo object? That is, if we set it to `id`, does that mean every table that ever gets queried needs to have an `id` field? What about if we have most tables with a unique `id` but some tables don't have it and use other primary keys?","author":{"__typename":"User","login":"joshuarobs","id":"MDQ6VXNlcjUyOTQ2ODgx","name":null}},{"__typename":"IssueComment","body":"There is only one closure per store (set through the client), but you can do some stuff by extracting the value of `__typename` from the JSON you get in order to have it work differently for different things. \r\n\r\nYou also can just return `nil` if `id` is nil, and a default cache key based on the path of the request will be generated. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Inline GQL","author":{"__typename":"User","login":"ericlewis","id":"MDQ6VXNlcjY3NDUwMw==","name":"Eric Lewis"},"body":"This might be old hat and I know it’s not a great issue but need to write down somewhere:\r\n\r\nYou should be able to describe fragments or query’s with inline strings as opposed to colocating with graphql files. \r\n\r\nIt probs seems minor but from a DX perspective the whole co-locating things a big deal. \r\n\r\nCreating more folder structure to organize is less good than just having the query in a used component. This is probably more true of SwiftUI than anything, and I have some SwiftUI stuff to contribute if folks want it. ","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! There's definitely some significant obstacles to this at the moment, particularly around how things are ingested for code generation. Right now, we only ingest from `.graphql` files rather than from any arbitrary file, and without having to worry about what is a Swift `String` that contains a GraphQL query or anything like that. \r\n\r\nThis is definitely an enhancement to consider for the long term, but I'll be honest, we've got way bigger problems to solve first. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"don't see this happening to be fair, more likely would be some kind of DSL","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"Thats' an interesting idea - I think the main issues I see with it are a) How would we ensure that queries are valid? and b) How would we generate the classes necessary for parsing the result? \r\n\r\nDefinitely going to think on that when I get back to this issue though. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Swift scripting codegen error: \"Error: Cannot find module './errors/pretty-print'\"","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"},"body":"macOS 10.15.6\r\nXcode 11.6\r\n\r\nWe're using Swift scripting for Codegen in our project. It was working fine until recently. The only change that occurred (that I can think of) is macOS and Xcode updated. I'm getting the following error:\r\n\r\n```\r\n[DEBUG - ApolloCodegenLib:CLIDownloader.swift:43] - Zip file with the CLI is already downloaded!\r\nSHASUM of downloaded file: c2b1215eb8e82ec9d777f4b1590ed0f60960a23badadd889e4d129eb08866f14\r\n[DEBUG - ApolloCodegenLib:CLIExtractor.swift:57] - Binary already extracted!\r\n[ERROR - ApolloCodegenLib:Basher.swift:62] - internal/modules/cjs/loader.js:638\r\n    throw err;\r\n    ^\r\n\r\nError: Cannot find module './errors/pretty-print'\r\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:562:25)\r\n    at Module.require (internal/modules/cjs/loader.js:692:17)\r\n    at require (internal/modules/cjs/helpers.js:25:18)\r\n    at Object.<anonymous> (/Users/nateirwin/Development/trailheadlabs/outerspatial-ios/Codegen/ApolloCLI/apollo/node_modules/@oclif/errors/lib/handle.js:6:24)\r\n    at Module._compile (internal/modules/cjs/loader.js:778:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\r\n    at Module.load (internal/modules/cjs/loader.js:653:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\r\n\r\nProgram ended with exit code: 1\r\n```","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"That's very odd, that shouldn't have changed anything in the path - I did not have any migration issues when I migrated my machine to those versions. \r\n\r\nWhat I'd suggest is deleting the extracted files from the `tar.gz` file and letting it re-extract. I have no idea what could have changed in there, but re-extracting from the zip file is a good way to make sure you've got everything. Let me know if this works.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"That worked, thanks!","author":{"__typename":"User","login":"nateirwin","id":"MDQ6VXNlcjEwNDQz","name":"Nate Irwin"}}]}},{"__typename":"Issue","title":"Apollo 0.29.0 - 0.30.0 failed to build in Travis","author":{"__typename":"User","login":"hendyevan","id":"MDQ6VXNlcjk4Mjk3Mg==","name":"Hendy Evan"},"body":"Hi, i have an issue in Travis when build my apps using apollo.\r\n<img width=\"944\" alt=\"Screen Shot 2020-07-28 at 13 45 24\" src=\"https://user-images.githubusercontent.com/982972/88628946-d5ff1980-d0d8-11ea-86ee-e801849a0bee.png\">\r\nIt's said there is no module `ApolloCore`, but when i run in xcode and archive it using xcode, it went well. No issue arises when using Xcode.\r\n\r\nI tried to downgrade to version `0.28.0` and it works well in Travis. No error occured.\r\nIs there any configuration for Travis to build `Apollo` pod?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! I'm not sure what your build looks like in Travis, but the issue is around a macro that's used by CocoaPods. CocoaPods pulls every sub-spec into a single big library, so we had to add [this macro](https://github.com/apollographql/apollo-ios/blob/main/Sources/Apollo/Bundle%2BHelpers.swift#L2) to tell the compiler not to try to import the `ApolloCore` module when using CocoaPods. It sounds like that macro is getting properly populated when you build/archive locally. \r\n\r\nWhat's the command you're using to build on Travis? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"This is command from my Travis :\r\n\r\n```\r\nlanguage: swift\r\nosx_image: xcode11.5\r\nxcode_project: Project.xcworkspace\r\n\r\ncache:\r\n  - bundler\r\n  - cocoapods\r\n\r\nbefore_install:\r\n  - gem install bundler\r\n  - bundle install\r\n  - pod install\r\n\r\njobs:\r\n  allow_failures:\r\n    - env: code-coverage\r\n  include:\r\n    - stage: deploy\r\n      before_script: curl -sL firebase.tools | upgrade=true bash\r\n      script: bundle exec fastlane deploy\r\n      after_success: bundle exec fastlane archive\r\n```\r\n\r\nAnd for my fastlane I'm using `Gym` :\r\n```\r\nprivate_lane :ios_build do |options|\r\n    scheme = options[:scheme]\r\n    export_method = options[:export_method]\r\n    output_name = options[:output_name]\r\n    key_name = options[:development]\r\n\r\n    gym(\r\n      workspace: \"Project.xcworkspace\",\r\n      scheme: scheme,\r\n      configuration: scheme,\r\n      silent: true,\r\n      clean: true,\r\n      suppress_xcode_output: false,\r\n      export_method: export_method,\r\n      output_name: output_name,\r\n      xcargs: \"ARCHIVE=YES\",\r\n      skip_profile_detection: true,\r\n      codesigning_identity: key_name,\r\n      analyze_build_time: true\r\n    )\r\n  end\r\n```","author":{"__typename":"User","login":"hendyevan","id":"MDQ6VXNlcjk4Mjk3Mg==","name":"Hendy Evan"}},{"__typename":"IssueComment","body":"I would maybe look at adding `COCOAPODS=YES` to your `xcargs` via `gym` if nothing else works - i would also check that the configuration that you're passing in to `gym` has that variable set. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I've add `COCOAPOD=YES` to `gym` and it's still fail to build in Travis.\r\n```\r\ngym(\r\n      workspace: \"Project.xcworkspace\",\r\n      scheme: scheme,\r\n      configuration: scheme,\r\n      silent: true,\r\n      clean: true,\r\n      suppress_xcode_output: false,\r\n      export_method: export_method,\r\n      output_name: output_name,\r\n      xcargs: \"ARCHIVE=YES COCOAPODS=YES\",\r\n      skip_profile_detection: true,\r\n      codesigning_identity: key_name,\r\n      analyze_build_time: true\r\n    )\r\n```\r\n\r\n","author":{"__typename":"User","login":"hendyevan","id":"MDQ6VXNlcjk4Mjk3Mg==","name":"Hendy Evan"}},{"__typename":"IssueComment","body":"IIRC it needs a comma and not a space - what about looking at the configuration you're using - does that have `COCOAPODS=YES` (or 1) set up? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Already add comma in gym `xcargs: \"ARCHIVE=YES, COCOAPODS=YES\"` and in my configuration there is already an argument `COCOAPODS=1`. But it's still give me the same error in travis.\r\n<img width=\"519\" alt=\"Screen Shot 2020-07-31 at 20 38 51\" src=\"https://user-images.githubusercontent.com/982972/89042713-930ba300-d371-11ea-89ee-84d25c1175ac.png\">\r\n","author":{"__typename":"User","login":"hendyevan","id":"MDQ6VXNlcjk4Mjk3Mg==","name":"Hendy Evan"}},{"__typename":"IssueComment","body":"It looks like in the Release scheme there's a space before `COCOAPODS=1` - what happens if you delete that space?","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hi, we already add several condition in `xcargs` regarding this issue using `COCOAPODS=0`, `COCOAPODS=1` and `COCOAPODS=YES`. but still no luck. any clue @designatednerd ?","author":{"__typename":"User","login":"budioktaviyan","id":"MDQ6VXNlcjIwMzE0OTM=","name":"Budi Oktaviyan"}},{"__typename":"IssueComment","body":"> It looks like in the Release scheme there's a space before `COCOAPODS=1` - what happens if you delete that space?\r\n\r\nThat's not a space, maybe because it's have another config in first line so it's appear like a space.\r\n<img width=\"236\" alt=\"Screen Shot 2020-08-02 at 15 00 27\" src=\"https://user-images.githubusercontent.com/982972/89157996-a6985300-d597-11ea-9638-304d99c70c01.png\">\r\nAnyway for travis build, we use schema `alpha & beta`. And still no luck ","author":{"__typename":"User","login":"hendyevan","id":"MDQ6VXNlcjk4Mjk3Mg==","name":"Hendy Evan"}},{"__typename":"IssueComment","body":"Hmmm...I wonder if there's an issue because `$(inherited)` is in there twice. \r\n\r\nHonestly, I'm not sure what to tell you - it's clear that the `#if !COCOAPODS` compile gate isn't working on Travis, but I'm really not sure why. \r\n\r\nIf you run the fastlane script locally, do you see the same errors? That could start to point you in the right direction. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@budioktaviyan @hendyevan Were y'all ever able to figure out what was going on here, or at least get the fastlane script to run locally? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hi @designatednerd , I ever run it locally using `fastlane` and got same issue. So basically, we use `gym` action on fastlane to bundle our app. Apart from that, we also trying to build + archive using xcode, and it works!\r\n\r\nIDK why, is it a `fastlane` problem or something else ?","author":{"__typename":"User","login":"budioktaviyan","id":"MDQ6VXNlcjIwMzE0OTM=","name":"Budi Oktaviyan"}},{"__typename":"IssueComment","body":"That indicates there's likely some kind of configuration issue that's being hit by fastlane - the good news is it's a lot easier to debug that when it can be reproduced locally. I would try using some of the tips from [Fastlane's troubleshooting guide](https://docs.fastlane.tools/codesigning/troubleshooting/), particularly the use of the `--verbose` flag that might give you a better indicator of what's going wrong. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@hendyevan Were you able to get the verbose output and see what might be happening? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hi @designatednerd, so the issue actually come from fastlane ? What did you expect from `verbose` build ? did you have any clue ?","author":{"__typename":"User","login":"budioktaviyan","id":"MDQ6VXNlcjIwMzE0OTM=","name":"Budi Oktaviyan"}},{"__typename":"IssueComment","body":"Hi, sorry, I was on vacation last week!\r\n\r\nIt seems like Fastlane is using a build configuration that isn't picking up the `COCOAPODS` setting, I was hoping that the `verbose` build would give you more information about what configuration you're using and what settings are set in that configuration. That might help you figure out more info about what you need to pass into Fastlane to get it to use a build configuration that _does_ use the `COCOAPODS` setting. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Were you ever able to figure out what was happening? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hi @designatednerd , sorry for slow response. We are still in the middle of project and the deadline is very tight. We will inform you later as soon as possible after we try it in local and using `verbose` as you suggest.","author":{"__typename":"User","login":"hendyevan","id":"MDQ6VXNlcjk4Mjk3Mg==","name":"Hendy Evan"}},{"__typename":"IssueComment","body":"Hi @designatednerd,\r\n\r\nSorry for late response. So, we're just running like this ?\r\n```bundle exec fastlane lane --verbose```\r\n\r\nisn't it ?","author":{"__typename":"User","login":"budioktaviyan","id":"MDQ6VXNlcjIwMzE0OTM=","name":"Budi Oktaviyan"}},{"__typename":"IssueComment","body":"I believe so - there's instructions in the troubleshooting guide I linked earlier that are going to be more accurate than anything I can give you. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hey all - I'm going to close this out since I haven't heard back in a few weeks. My best recommendation would be to get things building locally with Fastlane since you can get feedback much more easily than you can from Travis itself. I've generally found in the past that once something is building locally with Fastlane, it's much more likely to succeed on any CI platform if you're building using fastlane on that platform. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Adjusting the reconnection behaviour of `WebSocketTransport`","author":{"__typename":"User","login":"ketenshi","id":"MDQ6VXNlcjY4MDY2OTc=","name":"Eugene Kwong"},"body":"Hello!\r\n\r\nI have a similar setup to https://github.com/apollographql/apollo-ios/pull/1224 but with the caveat of requiring the user to login again in some cases. With an invalid `connectingPayload` the server closes the connection immediately, and `WebSocketTransport` will keep retrying. The `connectingPayload` can be updated with the new authentication token after the user logs in again.\r\n\r\nI would like to add in the ability to either prevent `WebSocketTransport` from reconnecting or be able to pause the websocket. \r\n\r\nIf we go the route of adjusting the reconnection behaviour I was thinking of adding something similar to `HTTPNetworkTransportRetryDelegate` but that kind of goes against the idea of passing `reconnect` as part of the initialization. So maybe having a getter/setter might be best.\r\n\r\nHope that I can get some guidance/feedback on this. Thanks!","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Does `closeConnection` on `WebSocketTransport` do what you need it to? That explicitly sets `reconnect.value` to false. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'd like to keep existing `subscriptions` so unfortunately  `closeConnection` isn't viable.","author":{"__typename":"User","login":"ketenshi","id":"MDQ6VXNlcjY4MDY2OTc=","name":"Eugene Kwong"}},{"__typename":"IssueComment","body":"So you're thinking more like this: \r\n\r\n```swift\r\n  public func pauseWebSocketConnection() {\r\n    self.reconnect.value = false\r\n    self.websocket.disconnect()\r\n  }\r\n  \r\n  public func resumeWebSocketConnection(autoReconnect: Bool = true) {\r\n    self.reconnect.value = autoReconnect\r\n    self.websocket.connect()\r\n  }\r\n```\r\n\r\nI think that could work with a sufficient documentation warning that if you call `pause` you have to manually call `resume`. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Yes that's essentially what I want. Thanks for the suggestion, I'll have something in the next few days.","author":{"__typename":"User","login":"ketenshi","id":"MDQ6VXNlcjY4MDY2OTc=","name":"Eugene Kwong"}},{"__typename":"IssueComment","body":"Eh, if that's all you need i'll just do it and throw in a test 😇","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Ok, thank you so much!","author":{"__typename":"User","login":"ketenshi","id":"MDQ6VXNlcjY4MDY2OTc=","name":"Eugene Kwong"}},{"__typename":"IssueComment","body":"> 好的，非常感谢你！\r\n\r\n你好 我想问下 如果 在 APP 进入后台时,手动断开长连接. APP 重新唤起时连接长连接呢","author":{"__typename":"User","login":"tanchendong1992","id":"MDQ6VXNlcjEwNTU4Mzcy","name":null}},{"__typename":"IssueComment","body":"This has shipped with `0.31.0`. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Apollo Codegen generates different Operation IDs than Apollo Server","author":{"__typename":"User","login":"Nickersoft","id":"MDQ6VXNlcjIxMDQxMjk=","name":"Tyler Nickerson"},"body":"Hey all,\r\n\r\nTonight I noticed that the operation ID Apollo Codegen creates when generating Swift code for your schema is slightly different than what the Apollo Server expects, causing APQs to fail and throw a `provided sha does not match query` error. \r\n\r\nBasically the SHA that Apollo Codegen creates adds line breaks between each GraphQL operation before it calculates the SHA of the string (seen [here](https://github.com/apollographql/apollo-tooling/blob/8e78c50a21c17a071f7b6890de446b4582e8d04a/packages/apollo-codegen-core/src/compiler/visitors/generateOperationId.ts#L26)). However, when Apollo iOS sends queries to the server, it does so without any line breaks using Swift's `.appending()` method. Then when the server calculates the SHA, due to the lack of line breaks, the operation ID is different and the error is thrown. Strangely enough, however, I noticed the StarWars API actually [manually adds line breaks](https://github.com/apollographql/apollo-ios/blob/06c357b7e98fb7abcddc02ca8aeb96cc8475d263/Sources/StarWarsAPI/API.swift#L1051) in its generated code, which mine doesn't. \r\n\r\nI believe I'm using the latest version of Apollo Codegen and Apollo iOS. I'm happy to patch a fix – it's just a matter of what needs to be changed. I'm afraid touching `apollo-tooling` would affect more repos that might depend on it, so I thought it'd be safer to open an issue here and propose adding the line breaks to the generated Swift.\r\n\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Closing, as it looks like the `apollo-tooling` upstream does add a line break during Swift Codegen, but the CLI on my system may be out of date. Will reopen if cannot find a resolution.","author":{"__typename":"User","login":"Nickersoft","id":"MDQ6VXNlcjIxMDQxMjk=","name":"Tyler Nickerson"}},{"__typename":"IssueComment","body":"@Nickersoft I would strongly recommend using the version the SDK downloads - it's set up to make sure you don't have to fight with node and mess with \"which version of the CLI works with which version of the SDK?\". You can check out the most recent version of our [installation docs](https://www.apollographql.com/docs/ios/installation/) or our new [Swift scripting docs](https://www.apollographql.com/docs/ios/swift-scripting/) to see how to set this up. \r\n\r\nI'd also recommend using version `0.29.x` of the iOS SDK - this includes some fixes that ensure the hash that you get from your iOS operation matches what's generated by the CLI, even with Fragments.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd Hey, thanks for the comment despite me opening an issue a little prematurely haha – I didn't realize the Apollo version set in the Codegen `Package.swift` affects the version of the CLI it downloads, and sure enough, I was on 0.28.x when the newline fix was pushed on 0.30.x. Updating it to download the new CLI fixed the problem :) ","author":{"__typename":"User","login":"Nickersoft","id":"MDQ6VXNlcjIxMDQxMjk=","name":"Tyler Nickerson"}},{"__typename":"IssueComment","body":"Yeah you bet - thought it would be helpful for anyone who stumbles across this via google :P","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Cache: Transaction write object results in no change.","author":{"__typename":"User","login":"pggawlowski","id":"MDQ6VXNlcjY0OTY2OTU2","name":null},"body":"```\r\n                do {\r\n                    var response = try transaction.readObject(ofType: Package.self, withKey: packageId)\r\n                    response.status = entry.status\r\n                    \r\n                    try transaction.write(object: response, withKey: packageId)                    \r\n                    let confirmChange = try transaction.readObject(ofType: Package.self, withKey: packageId)\r\n                    print(confirmChange)\r\n                } catch {\r\n                    print(error)\r\n                }\r\n\r\n```\r\n\r\nI digged down until ApolloStore -> `func mergePromise(records: RecordSet)`.\r\nResult is giving me succes `fulfill(cacheKey)` with cacheKey \"123.status\" which is correct packageId and correct field I was trying to manipulate. \r\n\r\nHowever confirmChange object has unchanged status. My `cacheKeyForObject` for both store and client are set. \r\nIs it sth I am doing wrong or writeObject is not working the way I think?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"The issue is that the transactions aren't guaranteed to be synchronous, so `transaction.write` may not have finished before `transaction.read` is called. \r\n\r\nYou'd need to use [`withinWriteTransaction`](https://github.com/apollographql/apollo-ios/blob/main/Sources/Apollo/ApolloStore.swift#L149) in order to validate the change. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Actual problem was: invalid cacheKeys. Sorry for wasting Tour time.","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}},{"__typename":"IssueComment","body":"No worries - thanks for following up with what actually happened! I'm gonna go ahead and close this issue out. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"长连接手动断开和重连","author":{"__typename":"User","login":"tanchendong1992","id":"MDQ6VXNlcjEwNTU4Mzcy","name":null},"body":"你好\r\n如何在 APP 进入后台时,手动断开长连接,从新打卡 APP 时再重新连接长连接?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Via Google Translate since I don't speak Chinese: \r\n\r\n> Hello there\r\n> How to manually disconnect the long connection when the APP enters the background, and then reconnect the long connection when the APP is newly clocked in?\r\n\r\nAre you asking about subscriptions or some other kind of long connection? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"你好.订阅消息. WebSocketTransport\r\n<img width=\"1369\" alt=\"WeChat67a3558698ad0ab1125ec3110a335a58\" src=\"https://user-images.githubusercontent.com/10558372/88997935-7a749c00-d323-11ea-83d6-68476be784db.png\">\r\n如果使用方法.我想在 APP 进入后台时,断开.在 APP重新打开的时候重新连接?\r\n初学者请多见谅!\r\n","author":{"__typename":"User","login":"tanchendong1992","id":"MDQ6VXNlcjEwNTU4Mzcy","name":null}},{"__typename":"IssueComment","body":"> Hello. Subscribe to news. WebSocketTransport\r\n\r\n[Here's Apple's documentation on handling lifecycle changes](https://developer.apple.com/documentation/uikit/app_and_environment/managing_your_app_s_life_cycle) - The short answer is that you will probably want to call `closeConnection` on  the `webSocketTransport` in your App Delegate's `applicationWillResignActive` method and restart the susbcription in `applicationDidBecomeActive`. \r\n\r\nNote that names are different in the Scene delegate if you're using that, but I don't think you are since you're using a singleton rather than per-scene instances of `Network`. \r\n\r\nLet me know if that helps!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"是的,这个地方使用的是单例.多个订阅消息在这里接受,然后进行分发处理.\r\n需要在 UIApplicationWillResignActiveNotification 时,断开订阅连接\r\n UIApplicationDidBecomeActiveNotification 重新连接订阅\r\n\r\n是通过 self.webSocketTransport.closeConnection() 断开订阅么","author":{"__typename":"User","login":"tanchendong1992","id":"MDQ6VXNlcjEwNTU4Mzcy","name":null}},{"__typename":"IssueComment","body":"你好.我通过 调用 self.webSocketTransport.closeConnection() ,已经可以断开连接了. 在 UIApplicationDidBecomeActiveNotification 的时候怎么重新建立连接呢?\r\n![image](https://user-images.githubusercontent.com/10558372/89000672-86b02780-d32a-11ea-8df8-59fee24addf6.png)\r\n","author":{"__typename":"User","login":"tanchendong1992","id":"MDQ6VXNlcjEwNTU4Mzcy","name":null}},{"__typename":"IssueComment","body":"Google translated: \r\n\r\n> Hello. I can disconnect by calling self.webSocketTransport.closeConnection(). How to re-establish the connection when UIApplicationDidBecomeActiveNotification?\r\n\r\nAh, because `addSubscribe` won't work if the web socket isn't connected, and right now there's not a way to tell the websocket to reconnect non-automatically. \r\n\r\nThe good news is #1335 will add the ability to reconnect more easily. Until then you'll probably need to hack it by using either `updateHeaderValues` or `updateConnectingPayload` to force a reconnection. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"#1335 is merged to `main` if you want to use it immediately, it'll come out probably sometime later this week in an official release. I'm going to close this out. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"RFC: Networking Updates","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"},"body":"This is the technical outline of a proposal to make major changes to our primary networking interface from the current `HTTPNetworkTransport` to a `RequestChainNetworkTransport` which uses a chain of interceptor objects to set up and process the results of network requests.\r\n\r\nNote that this is going to be a **🎉 Spectacularly 🎉** breaking change - while very surface level APIs will remain basically the same, if you're doing anything remotely advanced, this will necessitate some changes, but the idea is to break it now so we don't have to break it way worse later.\r\n\r\nI would **REALLY** love feedback on this before I start working towards making this the default option. You can see the code changes in-place in [this PR](https://github.com/apollographql/apollo-ios/pull/1341). I will be updating this RFC with feedback as it is received. \r\n\r\n## Why The Change?\r\n\r\n`HTTPNetworkTransport` allows you to hook into various delegates to accomplish various things. There are several limitations to this approach: \r\n\r\n- Users can only do things that are specifically supported by delegates.\r\n- Asynchronous use of delegates without callbacks is basically impossible.\r\n- Any time we want to add a new feature, we need to add a new delegate method and handle it, creating additional complexity.\r\n- There is no flexibility in terms of order of operations, particularly around whether data should be returned to the UI before being written to the cache.\r\n\r\nThe other major issue driving this update is that the current networking stack is *deeply* tied to the current cache architecture. This isn't ideal for many reasons, the biggest of which is that the cache likely to change in relation to the [Swift Codegen Rewrite](https://github.com/apollographql/apollo-ios/issues/939). \r\n\r\n## What is proposed? \r\n\r\nThe proposed new architecture uses the Interceptor pattern to create a customizable request chain. This means users can hook into the system at any point during the request creation or data processing process. \r\n\r\nThis also means that the pieces which will need to be swapped out for the Swift Codegen Rewrite are more clearly defined, and less tied to the actual parsing operation. \r\n\r\nFinally, this also opens the opportunity for different patterns than we already support, such as writing to the cache *after* returning data to the UI instead of before, or creating an array of interceptors which hit the network first, then hit the cache if nothing was returned. \r\n\r\n### New Protocols\r\n\r\n- **`FlexibleDecoder`**: This is mostly going to be helpful for the `Codable` implementation down the line, but this will allow anything conforming to `Decoder` to be used to decode data.\r\n- **`Parseable`**: This is a wrapper that allows us to continue to support non-`Codable` parsing alongside `Codable` parsing, while keeping us able to constrain and construct things generically. A default implementation for `Codable` will be provided.\r\n- **`ApolloInterceptor`**: This is an interface which allows you to add an asynchronous handler to perform any necessary work, such as fetching credentials and reading or writing from the cache, asynchronously. \r\n    \r\n    ```swift\r\n    public protocol ApolloInterceptor: class {\r\n  \r\n      /// Called when this interceptor should do its work.\r\n      ///\r\n      /// - Parameters:\r\n      ///   - chain: The chain the interceptor is a part of.\r\n      ///   - request: The request, as far as it has been constructed\r\n      ///   - response: [optional] The response, if received\r\n      ///   - completion: The completion block to fire when data needs to be returned to the UI.\r\n      func interceptAsync<Operation: GraphQLOperation>(\r\n        chain: RequestChain,\r\n        request: HTTPRequest<Operation>,\r\n        response: HTTPResponse<Operation>?,\r\n        completion: @escaping (Result<GraphQLResult<Operation.Data>, Error>) -> Void)\r\n    }\r\n    ```\r\n    \r\n    Default implementations of `ApolloInterceptor` for both Legacy (ie, non Swift Codegen) networking and Swift Codegen networking will be provided.\r\n- **`InterceptorProvider`** This protocol will be used to quickly create a new array of interceptors for a given request:\r\n\r\n    ```swift\r\n    public protocol InterceptorProvider {\r\n  \r\n      /// Creates a new array of interceptors when called\r\n      ///\r\n      /// - Parameter operation: The operation to provide interceptors for\r\n      func interceptors<Operation: GraphQLOperation>(for operation: Operation) -> [ApolloInterceptor]\r\n    }\r\n    ```\r\n    This design allows for both flexibility (you can return different interceptors for different types of requests, for instance) and isolation (each request will have its own unique set of interceptors, reducing the possibility of different requests stomping on each other). \r\n    \r\n    Two default interceptor providers are set up: \r\n    - **`LegacyInterceptorProvider`** will provide interceptors mimicking the current stack \r\n    - **`CodableInterceptorProvider`** will provide interceptors for the forthcoming Swift Codegen Rewrite's network stack.  \r\n- **`ApolloErrorInterceptor`** will allow you to have additional checks whenever an error is about to be returned. This will be optional to implement, and no default implementation is provided.\r\n\r\n    ```swift\r\n    /// Asynchronously handles the receipt of an error at any point in the chain.\r\n    ///\r\n    /// - Parameters:\r\n    ///   - error: The received error\r\n    ///   - chain: The chain the error was received on\r\n    ///   - request: The request, as far as it was constructed\r\n    ///   - response: [optional] The response, if received\r\n    ///   - completion: The completion closure to fire when the operation has completed. Note that if you call `retry` on the chain, you will not want to call the completion block in this method.\r\n    func handleErrorAsync<Operation: GraphQLOperation>(\r\n        error: Error,\r\n        chain: RequestChain,\r\n        request: HTTPRequest<Operation>,\r\n        response: HTTPResponse<Operation>?,\r\n        completion: @escaping (Result<GraphQLResult<Operation.Data>, Error>) -> Void)\r\n    ```\r\n    \r\n### New Classes\r\n\r\n- **`HTTPRequest`** This object will hold all the information related to a request before it hits the network, with the `toURLRequest()` method creating an actual `URLRequest` based on all the information in the request. This is subclass-able (and will mostly be using subclasses). \r\n\r\n    ```swift\r\n    open class HTTPRequest<Operation: GraphQLOperation> {\r\n\r\n      open var graphQLEndpoint: URL\r\n      open var operation: Operation\r\n      open var contentType: String\r\n      open var additionalHeaders: [String: String]\r\n      open var clientName: String? = nil\r\n      open var clientVersion: String? = nil\r\n      open var retryCount: Int = 0\r\n      public let cachePolicy: CachePolicy\r\n\r\n      public init(graphQLEndpoint: URL,\r\n                  operation: Operation,\r\n                  contentType: String,\r\n                  additionalHeaders: [String: String],\r\n                  cachePolicy: CachePolicy = .default)\r\n                  \r\n      open func toURLRequest() throws -> URLRequest\r\n\r\n      open func addHeader(name: String, value: String)\r\n    }\r\n    ```\r\n    \r\n    - **`JSONRequest`** subclass of `HTTPRequest` will handle creating requests with JSON, which will be the vast majority of requests with operations. This is where handling of auto-persisted queries is also layered in: \r\n\r\n    ```swift\r\n    public class JSONRequest<Operation: GraphQLOperation>: HTTPRequest<Operation> {\r\n  \r\n      public let requestCreator: RequestCreator\r\n  \r\n      public let autoPersistQueries: Bool\r\n      public let useGETForQueries: Bool\r\n      public let useGETForPersistedQueryRetry: Bool\r\n      public var isPersistedQueryRetry = false\r\n  \r\n      public let serializationFormat = JSONSerializationFormat.self\r\n\r\n      public init(operation: Operation,\r\n                  graphQLEndpoint: URL,\r\n                  additionalHeaders: [String: String] = [:],\r\n                  cachePolicy: CachePolicy = .default,\r\n                  autoPersistQueries: Bool = false,\r\n                  useGETForQueries: Bool = false,\r\n                  useGETForPersistedQueryRetry: Bool = false,\r\n                  requestCreator: RequestCreator = ApolloRequestCreator())\r\n    }\r\n    ```\r\n    \r\n    - **`UploadRequest`** subclass of `HTTPRequest` will handle multipart file uploads:\r\n\r\n    ```swift\r\n    public class UploadRequest<Operation: GraphQLOperation>: HTTPRequest<Operation> {\r\n  \r\n      public let requestCreator: RequestCreator\r\n      public let files: [GraphQLFile]\r\n      public let manualBoundary: String?  \r\n      public let serializationFormat = JSONSerializationFormat.self\r\n  \r\n      public init(graphQLEndpoint: URL,\r\n              operation: Operation,\r\n              additionalHeaders: [String: String] = [:],\r\n              files: [GraphQLFile],\r\n              manualBoundary: String? = nil,\r\n              requestCreator: RequestCreator = ApolloRequestCreator()) \r\n    }\r\n    ```\r\n\r\n- **`HTTPResponse`** will represent the objects returned and/or parsed from the server:\r\n\r\n    ```swift\r\n    /// Designated initializer\r\n    ///\r\n    /// - Parameters:\r\n    ///   - response: The `HTTPURLResponse` received from the server.\r\n    ///   - rawData: The raw, unparsed data received from the server.\r\n    ///   - parsedResponse: [optional] The response parsed into the `ParsedValue` type. Will be nil if not yet parsed, or if parsing failed.\r\n    public class HTTPResponse<Operation: GraphQLOperation> {\r\n      public var httpResponse: HTTPURLResponse\r\n      public var rawData: Data\r\n      public var parsedResponse: GraphQLResult<Operation.Data>?\r\n    }\r\n    ```\r\n\r\n- **‌`RequestChain`** will handle the interaction with the network for a single operation. \r\n\r\n    ```swift\r\n    public class RequestChain: Cancellable {\r\n\r\n    /// Creates a chain with the given interceptor array\r\n    public init(interceptors: [ApolloInterceptor])\r\n  \r\n    /// Kicks off the request from the beginning of the interceptor array.\r\n    ///\r\n    /// - Parameters:\r\n    ///   - request: The request to send.\r\n    ///   - completion: The completion closure to call when the request has completed.\r\n    public func kickoff<ParsedValue: Parseable, Operation: GraphQLOperation>(\r\n        request: HTTPRequest<Operation>, \r\n        completion: @escaping (Result<ParsedValue, Error>) -> Void)\r\n  \r\n    /// Proceeds to the next interceptor in the array.\r\n    /// \r\n    /// - Parameters:\r\n    ///   - request: The in-progress request object\r\n    ///   - response: [optional] The in-progress response object, if received yet\r\n    ///   - completion: The completion closure to call when data has been processed and should be returned to the UI.\r\n    public func proceedAsync<ParsedValue: Parseable, Operation: GraphQLOperation>(\r\n        request: HTTPRequest<Operation>,               \r\n        response: HTTPResponse<ParsedValue>?,\r\n        completion: @escaping (Result<ParsedValue, Error>) -> Void)\r\n  \r\n    /// Cancels the entire chain of interceptors.\r\n    public func cancel()\r\n  \r\n    /// Restarts the request starting from the first inteceptor.\r\n    ///\r\n    /// - Parameters:\r\n    ///   - request: The request to retry\r\n    ///   - completion: The completion closure to call when the request has completed.\r\n    public func retry<ParsedValue: Parseable, Operation: GraphQLOperation>(\r\n        request: HTTPRequest<Operation>,\r\n        completion: @escaping (Result<ParsedValue, Error>) -> Void)\r\n    }\r\n    ```\r\n- **`RequestChainNetworkTransport`** provides an implementation of `NetworkTransport` which uses an `InterceptorProvider` to create a request chain for each request. \r\n  ```swift\r\n  public class RequestChainNetworkTransport: NetworkTransport {\r\n  \r\n  public init(interceptorProvider: InterceptorProvider,\r\n    endpointURL: URL,\r\n    additionalHeaders: [String: String] = [:],\r\n    autoPersistQueries: Bool = false,\r\n    cachePolicy: CachePolicy = .default,\r\n    requestCreator: RequestCreator = ApolloRequestCreator(),\r\n    useGETForQueries: Bool = false,\r\n    useGETForPersistedQueryRetry: Bool = false)\r\n  }\r\n  ```\r\n\r\n### Changes to existing Protocols and Classes\r\n\r\n- **`ApolloStore`** will no longer require a `GraphQLQuery` explicitly for fetching data from the store. It will instead return an error if the `GraphQLOperationType` is not `.query`. This change is necessary to avoid going down an enormous rabbit hole with generics since `GraphQLOperation` has an associated type. \r\n- The **`NetworkTransport`** protocol will get a new method to be implemented: \r\n\r\n    ```swift\r\n      func sendForResult<Operation: GraphQLOperation>(operation: Operation,\r\n                                                      completionHandler: @escaping (Result<GraphQLResult<Operation.Data>, Error>) -> Void) -> Cancellable\r\n    ```\r\n    \r\n    This will avoid the double-wrapping of `GraphQLResponse` around the `GraphQLResult` so that only the `GraphQLResult` is actually returned. The `send` method will eventually be deprecated and removed. \r\n- **`ApolloClient`** will get a new `sendForResult` method which calls into the `sendForResult` method added to `NetworkTransport`.\r\n\r\n## How will this work in practice?  \r\n\r\nInstantiating a new legacy client manually will look like this: \r\n\r\n```swift\r\nlazy var legacyClient: ApolloClient = {\r\n    let url = URL(string: \"http://localhost:8080/graphql\")!\r\n    \r\n    let store = ApolloStore(cache: InMemoryNormalizedCache())\r\n    let provider = LegacyInterceptorProvider(store: store)\r\n    let transport = RequestChainNetworkTransport(interceptorProvider: provider, endpointURL: url)\r\n    \r\n    return ApolloClient(networkTransport: transport)\r\n}()\r\n```\r\n\r\nIdeally I'll be able to transparently swap out the existing `HTTPNetworkTransport` for this so that this would be the under-the-hood setup on `ApolloClient`, but this may involve a transition period. \r\n\r\nCalls to the client will look like this: \r\n\r\n```swift\r\nlegacyClient.fetchForResult(query: HeroNameQuery()) { result in\r\n    switch result {\r\n    case .success(let graphQLResult):\r\n        print(graphQLResult.data?.hero?.name ?? \"Name not found\")\r\n    case .failure(let error):\r\n        print(\"Unexpected error: \\(error)\")\r\n    }\r\n}\r\n```\r\n\r\nNote that this is VERY similar to how they look on the surface at the moment, which is intentional. \r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Overall this looks great. I only have 2 small questions: \r\n- Do you think it is possible to add an `ErrorType: Error` generic type to the signature of `handleErrorAsync` in the `ApolloErrorInterceptor`? I would love to be able to return typed errors, and this generic parameter could simply default to `Error` itself if not specified.\r\n- Do you have any plan to add an official `ApolloCombine` module?","author":{"__typename":"User","login":"TizianoCoroneo","id":"MDQ6VXNlcjE1MzQwMzgy","name":"TizianoCoroneo"}},{"__typename":"IssueComment","body":"1. I'll have to mess around with this and see how it works - my recollection is that it would cause much more complex typing issues, but I'll see what we can do. \r\n2. Eventually, but it's going to be after all the codegen rewrites. There is a [community Combine package](https://github.com/joel-perry/ApolloCombine) if you're looking for something immediately","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> Instantiating a **new legacy** client\r\n\r\nHeh, this was kinda funny to me.\r\n\r\n---\r\n\r\n> `public let requestCreator: RequestCreator`\r\n\r\nShould the request creator live on _all_ requests? Said another way, what's the rationale behind only allowing `JSONRequests` to have this property?\r\n\r\n> Do you think it is possible to add an `ErrorType: Error` generic type to the signature of` handleErrorAsync`\r\n\r\n+1 to this, but definitely not critical for the context of this RFC. I feel like typed errors could be it's own whole RFC/PR too!\r\n\r\n\r\n> **ApolloStore will no longer require a GraphQLQuery explicitly for fetching data from the store**. It will instead return an error if the GraphQLOperationType is not .query. This change is necessary to avoid going down an enormous rabbit hole with generics since GraphQLOperation has an associated type.\r\n\r\nI'm a little bit fuzzy on what this change is. If not a `GraphQLQuery`, what will the input for data fetching from the store be? Can you clarify for me?\r\n\r\n---\r\n\r\nAll told, this seems solid! One of our big use cases in the GitHub app for the current delegate implementation of this is to logout on HTTP 401 status codes, so it seems like that should make this a little simpler (just need an interceptor to throw an error when those responses come back).\r\n\r\nHoller if you want some feedback directly on https://github.com/apollographql/apollo-ios/pull/1341 as well!","author":{"__typename":"User","login":"eliperkins","id":"MDQ6VXNlcjEwNTE0NTM=","name":"Eli Perkins"}},{"__typename":"IssueComment","body":">> Instantiating a new legacy client\r\n\r\n> Heh, this was kinda funny to me.\r\n\r\nHa, that's what I get for working on this doc for so long, I completely glossed that over 🙃\r\n\r\n>> public let requestCreator: RequestCreator\r\n\r\n> Should the request creator live on all requests? Said another way, what's the rationale behind only allowing JSONRequests to have this property?\r\n\r\nMy thought that was only `HTTPRequest` subclasses that actually need to use it should have access to it - `JSONRequest` and a forthcoming `UploadRequest` would be the places I'm thinking. At this point both of those subclasses would need it, but I don't know that it makes sense to tie that to the base class at this time. Would be interesting to hear your thoughts on that.\r\n\r\n>> ApolloStore will no longer require a GraphQLQuery explicitly for fetching data from the store. It will instead return an error if the GraphQLOperationType is not .query. This change is necessary to avoid going down an enormous rabbit hole with generics since GraphQLOperation has an associated type.\r\n\r\n> I'm a little bit fuzzy on what this change is. If not a GraphQLQuery, what will the input for data fetching from the store be? Can you clarify for me?\r\n\r\nBasically, we have the `GraphQLOperation` protocol, with an associated type of `Data`, and its three sub-protocols, `GraphQLQuery`, `GraphQLMutation`, and `GraphQLSubscription`. Previously, we were limiting what operations could read from the cache to `GraphQLQuery`, since in theory that's the only place getting something from the cache would matter. \r\n\r\n`HTTPRequest` only requires a specification of `GraphQLOperation`, but when making a call into the cache, we can't use the `Blah is GraphQLQuery` method of figuring out whether a `GraphQLOperation` is a query because of the `associatedType` on `GraphQLOperation`. \r\n\r\nI tried about 15 different workarounds for this and this is the only one that wasn't monstrously over-complicated - everything else involved some mild-to-completely bizarre type erasure strategies. I'm not totally against those, but I think in this case the benefits of going that way were vastly outweighed just changing the gating of this a bit.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"and if you have specific feedback on #1341 I'd love to hear it - just be aware that there's definitely a lot that's WIP (thus the TODOs)","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"OK, I've done some poking around on the request for a typed error parameter, and I don't think it's going to be doable at the interceptor level.\r\n\r\nWhen I tried to add this in, any existing `Error` I tried to return would cause a \"Cannot convert value\" build failure: \r\n<img width=\"766\" alt=\"Screen Shot 2020-08-05 at 1 44 07 PM\" src=\"https://user-images.githubusercontent.com/1976498/89451746-4b469c00-d722-11ea-8a29-3c94a16b0060.png\">\r\n<img width=\"754\" alt=\"Screen Shot 2020-08-05 at 1 46 15 PM\" src=\"https://user-images.githubusercontent.com/1976498/89451757-4f72b980-d722-11ea-8c14-fdad865110d1.png\">\r\n\r\nIt'd make the interceptors a lot harder to keep independent if they all had to have exactly the same type of error. It also wouldn't be possible for me to have default implementations return errors without having `TypedError` conform to some other protocol that allows me to return an underlying arbitrary error. Ultimately, I think that adds too much complexity for general use cases.\r\n\r\nI think if you want to write your own typed wrapper that takes whatever's returned and feeds it into something with an `underlying` error that's easier to switch on, that could work. But I think requiring everything have to be the same type at a protocol level is going to lead to a hell of a lot more confusion than it solves. \r\n\r\nWould love to hear feedback on this finding.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"One of the things that's nice about the `ApolloLink` abstraction used for the web version of Apollo Client is that the link chain is more like a linked list, rather than an array, with each link deciding how to forward the request on to the rest of the chain (and how to process the response), without needing an overarching `RequestChain` to manage the list of links.\r\n\r\nConcretely, this kind of approach would probably mean the `InterceptorProvider` would return a single `ApolloInterceptor` (analogous to `ApolloLink`), representing the head of the linked list, rather than a `[ApolloInterceptor]` array. The last interceptor in the chain (the tail of the list) would be responsible for performing the actual HTTP request, in most cases—but not always!\r\n\r\nSometimes you want to terminate the chain with something that makes an HTTP request, but other times the terminal link might provide its own data (for example, mock data during tests). Sometimes you might want to split a request between multiple downstream links, or choose among several servers that can handle different kinds of requests (or load-balance the same type of request between multiple servers, entirely on the client). It's hard to represent branching structures like that as an array, because it's no longer really a list, but a dynamic tree. But if each interceptor gets to make its own decisions about how it passes requests to the rest of the chain (and how it handles the responses), the branching can be hidden as an implementation detail, with each interceptor abstracting over everything downstream from it.\r\n\r\nI don't know enough Swift to anticipate specific ways in which this approach might be tricky, but it seems like it should be possible to give the interceptor chain more of a recursive, potentially tree-like structure. That's worked pretty well on the web, in the sense that I haven't had to worry very much about the `ApolloLink` system, even as I've changed large portions of the rest of the library.\r\n\r\nFor reference, here's an overview of `ApolloLink` concepts that I've found useful in the past: https://www.apollographql.com/docs/link/overview/","author":{"__typename":"User","login":"benjamn","id":"MDQ6VXNlcjU3NTA=","name":"Ben Newman"}},{"__typename":"IssueComment","body":"I think one huge, huge difference is that things like cancellation, retry, and thread management can be handled through javascript's `Observable` reactive system. \r\n\r\nThat just isn't doable without either using Combine (which would require dropping everything below iOS 12, and is unfortunately a non-starter with a number of our larger users) or adding some kind of Reactive library as a dependency (which I am loathe to do because of the *massive* number of dependency conflicts it could introduce). \r\n\r\nHowever, I think you're right that splitting out methods for request setup vs response handling is a good idea - this could at least help reduce the number of things that need to be optional on `HTTPResponse`. \r\n\r\nWill futz with this tomorrow. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd I'm glad you brought that up!\r\n\r\nWhile I agree that `Observable`s are an easier pill to swallow in JavaScript, and they do figure prominently in the `ApolloLink` API, I specifically do not think it's necessary to replicate their behavior here.\r\n\r\nI should also mention that `Observable` is not implemented natively in JS, so you still need some sort of library, and (if I'm being honest) the API doesn't fully deliver on any of those benefits you mentioned, so I think it's fair to say the acceptance of `Observable` in JS (compared to the resistance to Combine in iOS) is a matter of culture/taste/evangelism.\r\n\r\nOn the topic of cancellation, one approach that does work is to pass some sort of context object explicitly down through the chain (and back up), so that each link/interceptor can check whether the request has been cancelled at points where aborting would be safe. `Observable`s don't provide any useful notion of context, even if you wanted it, but you can design a pipeline/interceptor/chain system like this to provide a strongly typed context object everywhere it's needed, I believe.\r\n\r\nOn the topic of retrying, the [`RetryLink`](https://github.com/apollographql/apollo-client/blob/master/src/link/retry/retryLink.ts) subclass of `ApolloLink` has been successful in part because the retry logic can be hidden behind the same abstraction that any other `ApolloLink` provides. From the perspective of links earlier in the chain, a request that succeeded after several retries looks exactly like one that succeeded on the first try, except that it might have taken a bit longer. If retrying was something you could implement in a perfectly generic way for all interceptors, it might make sense to hoist it to a higher layer of the system (maybe into `RequestChain`), but in practice retrying tends to be sensitive to application concerns (different logic for different queries, even), so I think it makes sense to push it down into a part of the system that can be customized by application developers.\r\n\r\nI think we can agree it's important for interceptors to be able to perform any kind of async work as an implementation detail, which requires a uniformly asynchronous API. Both `Observable` and Combine provide that kind of API, but they are both probably overkill, or at the very least they would need to earn their way into a system like this. I believe you that Combine is not worth it for iOS, but then again I'm not sure `Observable` is totally defensible for JS applications, either.","author":{"__typename":"User","login":"benjamn","id":"MDQ6VXNlcjU3NTA=","name":"Ben Newman"}},{"__typename":"IssueComment","body":"> When I tried to add this in, any existing `Error` I tried to return would cause a \"Cannot convert value\" build failure:\r\n\r\nfrom this error it looks like you changed the signature of `handleErrorAsync` to:\r\n```swift\r\nfunc handleErrorAsync<ParsedValue: Parseable, Operation: GraphQLOperation, TypedError: Error>(\r\n    error: TypedError,\r\n    chain: RequestChain,\r\n    request: HTTPRequest<Operation>,\r\n    response: HTTPResponse<ParsedValue>,\r\n    completion: @escaping (Result<ParsedValue, TypedError>) -> Void)\r\n```\r\n\r\nwhile I was thinking something like: \r\n```swift\r\nfunc handleErrorAsync<ParsedValue: Parseable, Operation: GraphQLOperation, TypedError: Error>(\r\n    error: Error, // keep this one untyped so that you can pass anything you need\r\n    chain: RequestChain,\r\n    request: HTTPRequest<Operation>,\r\n    response: HTTPResponse<ParsedValue>,\r\n    completion: @escaping (Result<ParsedValue, TypedError>) -> Void) // but allow users to wrap the internal errors in their own custom types\r\n```\r\nso that you can give a default implementation that does not wrap the error type: \r\n```swift \r\nextension ApolloErrorInterceptor where TypedError == Error {\r\n// default interceptor with a untyped completionHandler\r\n```\r\n\r\nsorry I wasn't clear with the previous message. Thank you for fiddling with this!\r\n\r\n> +1 to this, but definitely not critical for the context of this RFC. I feel like typed errors could be it's own whole RFC/PR too!\r\n\r\n@designatednerd would you prefer to move this conversation in a separate issue?","author":{"__typename":"User","login":"TizianoCoroneo","id":"MDQ6VXNlcjE1MzQwMzgy","name":"TizianoCoroneo"}},{"__typename":"IssueComment","body":"@TizianoCoroneo Yeah if I left it with `Error` as the incoming error, I got that same `Cannot convert value` problem in the method in question - I'll take a look at your suggestion later today though","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@benjamn I think one thing that's helpful context to understand is that the basis for this architecture is the [`ApolloInterceptor` type in Android](https://github.com/apollographql/apollo-android/tree/master/apollo-runtime/src/main/java/com/apollographql/apollo/interceptor). This itself is based on [`OkHttp` library's `Interceptor` type](https://square.github.io/okhttp/interceptors/) that's used very widely throughout the Android ecosystem for networking.\r\n\r\nIn `OkHttp`, there's a chain that takes an array of interceptors. Each interceptor in the array needs to call `proceed` before it can keep going, and then each one calls `intercept` to handle the result. There's a few issues with that architecture as-is (mostly around things being implicitly asynchronous instead of explicitly asynchronous), which are generally dealt with by `ApolloInterceptor`'s changes to the architecture.\r\n\r\nStill futzing around, but I thought that'd be useful context.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@TizianoCoroneo I've pushed some stuff to a branch ominously named `nope/typed-errors` if you want to take a look - basically, what you're looking for is not possible without associated types which sends this wholllllllllle mess down a huge rabbit hole. This is a huge piece of why the generic constraint is on the function rather than set up as an `associatedType` in the first place. If you see a better way please definitely feel free to open a PR to that branch!\r\n\r\nAll: I did make some improvements that make it easier to reason about what data's coming back through (basically: Got rid of the need for `Parseable` and moved to `GraphQLResult<Operation.Data>` as the type being returned in the completion closure), I'll update the RFC tomorrow or Monday to match the updated implementation details. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I tried to play around with it, and I confirm that the ominous name of the branch is accurate. I found no way to avoid having the `TypedError` bubble up to the `RequestChain`, and from there going everywhere else.\r\nThanks for trying this anyway 😄 ","author":{"__typename":"User","login":"TizianoCoroneo","id":"MDQ6VXNlcjE1MzQwMzgy","name":"TizianoCoroneo"}},{"__typename":"IssueComment","body":"Still looking at some of the stuff @benjamn and I were talking about, but I've updated the issue to match what's in the code at the moment.\r\n\r\nTL;DR - I was able to simplify by constraining to `Operation.Data` on `GraphQLOperation` instead of to the more generic `Parseable`. In the end, the result of a GraphQL operation is actually what we handle, so making it even more generic didn't really anything (and in fact made it harder to real with errors that are within `GraphQLResult`, which is part of what a lot of folks want to be able to do. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"More updates:\r\n- Moved `HTTPResponse` to being optional on the interceptor and related methods rather than having its properties be optional. This makes it way clearer whether a response has been received from the network or not. \r\n- Moved error declaration within each individual interceptor for clarity\r\n\r\n@benjamn: While I think the linked-list idea is more flexible, I don't know the additional flexibility it provides gets you much more than what we have in \"This interceptor can be async and take as long as it pleases to do stuff, so you can fire off a bunch of additional network requests and wait for them to call `proceed` if you feel like it.\" \r\n\r\nI think the overwhelming majority of interceptors are not going to do that, and I think the simplicity, especially from a retry standpoint, of \"Here's a list of interceptors in the order they should be executed, GO!\" is a lot better fit for the way this is used on iOS than a linked list would be. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"More updates are up - I don't think any fundamentally change anything already in here, but I do have a couple questions: \r\n\r\n1. Is there anyone using the `context: UnsafeMutableRawPointer?` on the various send/fetch methods for `ApolloClient` _in a way that could not be replaced by this change_? I took it out for now but I figured It's worth asking.\r\n2. I'm extremely tempted to rip out the current `HTTPNetworkTransport` that `RequestChainNetworkTransport` is replacing altogether, largely because I would need to keep a whole bunch of knotted code in `ApolloClient` around that facilitates caching longer than I'd like to. However, I'd like to hear y'all's thoughts about ripping the band-aid in a single release (with a migration guide) vs. doing a bridge release that still has `HTTPNetworkTransport` and its associated ick with a bunch of deprecation warnings. \r\n\r\n    For what it's worth I've updated all the tests that aren't specifically _for_ the `HTTPNetworkTransport` to use either a `RequestChainNetworkTransport`, or a `MockNetworkTransport` which inherits from it, and everything is back to passing. I don't think that fully captures the extent to which this would create work for developers using the more advanced delegate features, but I do think for people using less advanced features it shows that everything *should* work the same. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> 1. Is there anyone using the `context: UnsafeMutableRawPointer?` on the various send/fetch methods for ApolloClient in a way that could not be replaced by this change? I took it out for now but I figured It's worth asking.\r\n\r\nNot using it here 🤷‍♂️  feels like a pretty cumbersome API to use effectively right now, so removing it seems alright, as long as we don't think others are using it.\r\n\r\n> I'm extremely tempted to rip out the current ` that RequestChainNetworkTransport is replacing altogether, largely because I would need to keep a whole bunch of knotted code in ApolloClient around that facilitates caching longer than I'd like to. However, I'd like to hear y'all's thoughts about ripping the band-aid in a single release (with a migration guide) vs. doing a bridge release that still has HTTPNetworkTransport and its associated ick with a bunch of deprecation warnings.\r\n\r\nI think it's alright to remove this in favor of `RequestChainNetworkTransport`. Is there a way to deprecate it, and replace it's impl with `RequestChainNetworkTransport`? If it feels like more overhead to maintain, API-wise, I think it's fine to force consumers over to use `RequestChainNetworkTransport` instead, since it solves the same problems that supplying a custom `HTTPNetworkTransport` was doing.","author":{"__typename":"User","login":"eliperkins","id":"MDQ6VXNlcjEwNTE0NTM=","name":"Eli Perkins"}},{"__typename":"IssueComment","body":"> feels like a pretty cumbersome API to use effectively right now,\r\n\r\nWholeheartedly agreed, I want to come up with something way better (and that does not involve the word `Unsafe`)\r\n\r\n> replace it's impl with`RequestChainNetworkTransport`\r\n\r\nI don't think it's a great idea because there's a bunch of stuff with delegates that would be a bit of a hot mess to handle. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'm going to close out this RFC as I'm getting ready to beta off of #1341 - I just updated the [client initialization documentation](https://deploy-preview-1341--apollo-ios-docs.netlify.app/docs/ios/initialization/), which hopefully will give a good idea of how this should all be working.\r\n\r\nIn terms of differences from what's outlined in the RFC, at this time the main difference is that I moved retry counting off the `HTTPRequest` itself and onto the `MaxRetryInterceptor`.  \r\n\r\nFurther comments should be left on #1341 - thank you all for the feedback!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"getting  \"The network connection was lost\" sometimes, while Calling API's","author":{"__typename":"User","login":"guru-mtech","id":"MDQ6VXNlcjY0NjU4ODQw","name":null},"body":"I cannot get the grapgql responces sometimes and getting following messages in console. Though My Internet connection completely normal and and speed is about 10MBps, I am getting follwing error sometimes!!\r\n\r\n\r\n2020-08-02 01:07:00.435742+0530 Dwell[16526:884485] Task <080DA3DA-F4E7-4F5C-9DE3-D2B77A55F81B>.<8> HTTP load failed, 159275/0 bytes (error code: -1005 [4:-4])\r\n2020-08-02 01:07:00.461811+0530 Dwell[16526:884303] Task <080DA3DA-F4E7-4F5C-9DE3-D2B77A55F81B>.<8> finished with error [-1005] Error Domain=NSURLErrorDomain Code=-1005 \"The network connection was lost.\" UserInfo={_kCFStreamErrorCodeKey=-4, NSUnderlyingError=0x6000014c4300 {Error Domain=kCFErrorDomainCFNetwork Code=-1005 \"(null)\" UserInfo={NSErrorPeerAddressKey=<CFData 0x600003902ee0 [0x7fff80615350]>{length = 16, capacity = 16, bytes = 0x10021f9b12da60e20000000000000000}, _kCFStreamErrorCodeKey=-4, _kCFStreamErrorDomainKey=4}}, _NSURLErrorFailingURLSessionTaskErrorKey=LocalDataTask <080DA3DA-F4E7-4F5C-9DE3-D2B77A55F81B>.<8>, _NSURLErrorRelatedURLSessionTaskErrorKey=(\r\n    \"LocalDataTask <080DA3DA-F4E7-4F5C-9DE3-D2B77A55F81B>.<8>\"\r\n), NSLocalizedDescription=The network connection was lost., NSErrorFailingURLStringKey=https://localhost:8091/graphql, NSErrorFailingURLKey=https://localhost:8091/graphql, _kCFStreamErrorDomainKey=4}\r\nThe operation couldn’t be completed. (Apollo.URLSessionClient.URLSessionClientError error 2.)\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! That error is coming from Apple's URL loading system, not from Apollo. I've got no idea why that would be happening with `localhost` - that shouldn't even be going out of your local network. \r\n\r\nI don't _think_ it's `http` vs `https` since that would theoretically be a different error, but it might be worth giving it a shot since most of the time `localhost` doesn't have SSL set up. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Since I haven't heard anything back here in a couple weeks, I'm going to close this issue out. @guru-mtech if you're still having problems, feel free to reopen. Anyone else having similar problems, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Error \"Variable \"$id\" is never used\" not fail build process","author":{"__typename":"User","login":"Mangese","id":"MDQ6VXNlcjIxNTEyNTI4","name":"Mangese"},"body":"when generate API.swift with graphql file that has unuse variables.\r\nan error `Variable \"xxx\" is never used in operation \"xxx\"` is log but build process is success and run an app normally\r\n```\r\nquery Repo($id: ID!) {\r\n    currentuser {\r\n        id\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\nbut on other error, the build process will fail \r\n\r\nEx. generate API.swift with below graphql result an error \r\n\r\n`error: Cannot query field \"something\" on type \"Query\". Did you mean \"setting\"?` \r\n\r\nand build process is fail\r\n```\r\nquery Repo {\r\n    currentuser {\r\n        id\r\n    }\r\n    something\r\n}\r\n```\r\n\r\nPS: Apollo version 0.27.1","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I would first recommend updating to a more recent version of the SDK - IIRC this was a bug in the underlying CLI that has since been addressed. If that doesn't help, let me know. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"update to Apollo 0.30.0 doesn't help. ","author":{"__typename":"User","login":"Mangese","id":"MDQ6VXNlcjIxNTEyNTI4","name":"Mangese"}},{"__typename":"IssueComment","body":"```\r\nVariable \"$id\" is never used in operation \"Repo\".\r\n\r\nCommand PhaseScriptExecution emitted errors but did not return a nonzero exit code to indicate failure\r\n```\r\n\r\n\r\nError from log when build with\r\n\r\n```\r\nquery Repo($id: ID!) {\r\n    currentuser {\r\n        id\r\n    }\r\n}\r\n```","author":{"__typename":"User","login":"Mangese","id":"MDQ6VXNlcjIxNTEyNTI4","name":"Mangese"}},{"__typename":"IssueComment","body":"OK - are you using the shell script or the Swift Scripting method to run your codegen? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'm not sure about that.\r\n\r\nI add a run script phase on Build Phase that has script below with shell = sh \r\n```\r\nPATH=$PATH:/usr/local/opt/node@8/bin\r\nSCRIPT_PATH=\"${PODS_ROOT}/Apollo/scripts\"\r\n\r\nif [ -z \"${XCS_BOT_NAME}\" ]; then\r\n\r\ncd \"${SRCROOT}/${TARGET_NAME}\"\r\n\"${SCRIPT_PATH}\"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./GraphQL/**/*.graphql --localSchemaFile=\"GraphQL/Generated/schema.json\" GraphQL/Generated/API.swift --customScalarsPrefix=GraphQL\r\nfi\r\n\r\n```","author":{"__typename":"User","login":"Mangese","id":"MDQ6VXNlcjIxNTEyNTI4","name":"Mangese"}},{"__typename":"IssueComment","body":"Yep that's the shell script method. Can you confirm that in your schema `currentuser` requires a non-optional `id`, meaning an `ID!`? If it only requires an `ID` (without the exclamation point) then that might be the source of the issue. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"`currentuser ` does not require any variables.`$id: ID!` is just unuse variable that i forgot to remove. it can change to any variable Ex. `Repo($abcd: String!)` or ` Repo($test: Int!)`\r\n\r\nif RepoQuery never called or called with given variable Ex. `RepoQuery(abcd: \"a\")` it'll build success with error that mention before but will throw an  `Variable $abcd is never used in operation \"Repo\"` from the server","author":{"__typename":"User","login":"Mangese","id":"MDQ6VXNlcjIxNTEyNTI4","name":"Mangese"}},{"__typename":"IssueComment","body":"> `currentuser` does not require any variable\r\n\r\nI'm almost positive this is why it's not exiting, then. When the error is more of a \"Hey, you forgot to remove this, but there are no real consequences to not using this\" rather than a \"Nope, this is not a valid query\", we don't want to fail the entire build. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I understand that it's not a fatal error for an entire app. but if the query is sent to graphql server it'll always fail due to graphql default validation rule(if I understand it correctly). \r\nSo, I think it's not different from invalid query because the query always fails if sends to server","author":{"__typename":"User","login":"Mangese","id":"MDQ6VXNlcjIxNTEyNTI4","name":"Mangese"}},{"__typename":"IssueComment","body":"Hm...what server are you using? I think that might be a server implementation detail, but I could be wrong. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"`apollo-server-express` from https://github.com/apollographql/apollo-server/tree/main/packages/apollo-server-express\r\n","author":{"__typename":"User","login":"Mangese","id":"MDQ6VXNlcjIxNTEyNTI4","name":"Mangese"}},{"__typename":"IssueComment","body":"`GraphQL operation is only valid if all variables defined by an operation are used `\r\nfrom graphql-js [line](https://github.com/graphql/graphql-js/blob/80471134f1152c69da2cc27518a127991cc801b9/src/validation/rules/NoUnusedVariablesRule.d.ts#L7\r\n)\r\n\r\nI'm not sure that the server can choose to enable/disable this rule but I think it enable by default.","author":{"__typename":"User","login":"Mangese","id":"MDQ6VXNlcjIxNTEyNTI4","name":"Mangese"}},{"__typename":"IssueComment","body":"Ahhh got it. OK, will talk to some tooling folks on this.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"(FYI that team is super backed up, so it may take some time)","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"So our tooling folks are working on a new Rust-based parsing and validation of schema + queries, it will have to land with that. \r\n\r\nI believe the reason it's not in there right now is because it would cause errors when people were using it in watch mode (mostly useful for JS) and it got disabled for that. However, I'm going to be working to make sure there's at least a mode that can be selected in new Rust stuff to bomb out on errors like this. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Crashlytics reported: \"Crashed: com.apollographql.DataLoader\"","author":{"__typename":"User","login":"Kharauzov","id":"MDQ6VXNlcjE4MjQzNTI1","name":"Serhii Kharauzov"},"body":"Hi 👋, We have a version of iOS Apollo SDK: 0.27.0\r\n\r\nWe've got many crashes:\r\n\r\nURLSessionClient.swift line 85\r\nURLSessionClient.sendRequest(_:rawTaskCompletionHandler:completion:)\r\n\r\nCrashed: com.apollographql.DataLoader\r\nEXC_BAD_ACCESS KERN_INVALID_ADDRESS 0x0000000000000000\r\n\r\nWill be thankful for any suggestion or help 🙏🏼\r\n\r\nIt happened for different iOS versions and different devices.\r\nHere is a stack trace:\r\n```\r\nApollo\r\nURLSessionClient.swift - Line 85\r\nURLSessionClient.sendRequest(_:rawTaskCompletionHandler:completion:) + 85\r\n2\r\nApollo\r\nHTTPNetworkTransport.swift - Line 159\r\nHTTPNetworkTransport.send<A>(operation:isPersistedQueryRetry:files:completionHandler:) + 159\r\n3\r\nApollo\r\nApolloClient.swift - Line 70\r\nApolloClient.send<A>(operation:shouldPublishResultToStore:context:resultHandler:) + 70\r\n4\r\nApollo\r\nApolloClient.swift - Line 287\r\nFetchQueryOperation.fetchFromNetwork() + 287\r\n5\r\nApollo\r\nApolloClient.swift - Line 282\r\nclosure #1 in FetchQueryOperation.start() + 282\r\n6\r\nApollo\r\nApolloStore.swift - Line 193\r\nclosure #2 in ApolloStore.load<A>(query:resultHandler:) + 193\r\n7\r\nApollo\r\nPromise.swift - Line 142\r\nclosure #1 in closure #1 in Promise.catch(_:) + 142\r\n8\r\nApollo\r\n<compiler-generated> - Line 4351240464\r\npartial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<A, Error>) -> () + 4351240464\r\n9\r\nApollo\r\n<compiler-generated> - Line 4351234200\r\nclosure #1 in Promise.resolve(_:) + 4351234200\r\n10\r\nApollo\r\n<compiler-generated> - Line 4351232104\r\nPromise.resolve(_:) + 4351232104\r\n11\r\nApollo\r\nPromise.swift - Line 213\r\nPromise.reject(_:) + 213\r\n12\r\nApollo\r\nPromise.swift - Line 122\r\nclosure #1 in closure #1 in Promise.andThen(_:) + 122\r\n13\r\nApollo\r\n<compiler-generated> - Line 4351240464\r\npartial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<A, Error>) -> () + 4351240464\r\n14\r\nApollo\r\n<compiler-generated> - Line 4351234200\r\nclosure #1 in Promise.resolve(_:) + 4351234200\r\n15\r\nApollo\r\n<compiler-generated> - Line 4351232104\r\nPromise.resolve(_:) + 4351232104\r\n16\r\nApollo\r\nPromise.swift - Line 213\r\nPromise.reject(_:) + 213\r\n17\r\nApollo\r\nPromise.swift - Line 165\r\nclosure #1 in closure #1 in Promise.map<A>(_:) + 165\r\n18\r\nApollo\r\npartial apply for closure #1 in closure #1 in Promise.map<A>(_:) + 4351241932\r\n19\r\nApollo\r\n<compiler-generated> - Line 4351240464\r\npartial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<A, Error>) -> () + 4351240464\r\n20\r\nApollo\r\n<compiler-generated> - Line 4351234200\r\nclosure #1 in Promise.resolve(_:) + 4351234200\r\n21\r\nApollo\r\n<compiler-generated> - Line 4351232104\r\nPromise.resolve(_:) + 4351232104\r\n22\r\nApollo\r\nPromise.swift - Line 213\r\nPromise.reject(_:) + 213\r\n23\r\nApollo\r\nPromise.swift - Line 142\r\nclosure #1 in closure #1 in Promise.catch(_:) + 142\r\n24\r\nApollo\r\n<compiler-generated> - Line 4351240464\r\npartial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<A, Error>) -> () + 4351240464\r\n25\r\nApollo\r\n<compiler-generated> - Line 4351234200\r\nclosure #1 in Promise.resolve(_:) + 4351234200\r\n26\r\nApollo\r\n<compiler-generated> - Line 4351232104\r\nPromise.resolve(_:) + 4351232104\r\n27\r\nApollo\r\nPromise.swift - Line 213\r\nPromise.reject(_:) + 213\r\n28\r\nApollo\r\nPromise.swift - Line 122\r\nclosure #1 in closure #1 in Promise.andThen(_:) + 122\r\n29\r\nApollo\r\n<compiler-generated> - Line 4351240464\r\npartial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<A, Error>) -> () + 4351240464\r\n30\r\nApollo\r\n<compiler-generated> - Line 4351234200\r\nclosure #1 in Promise.resolve(_:) + 4351234200\r\n31\r\nApollo\r\n<compiler-generated> - Line 4351232104\r\nPromise.resolve(_:) + 4351232104\r\n32\r\nApollo\r\nPromise.swift - Line 213\r\nPromise.reject(_:) + 213\r\n33\r\nApollo\r\nPromise.swift - Line 142\r\nclosure #1 in closure #1 in Promise.catch(_:) + 142\r\n34\r\nApollo\r\nPromise.swift - Line 238\r\nclosure #1 in Promise.whenResolved(_:) + 238\r\n35\r\nApollo\r\nPromise.swift - Line 4351205536\r\nPromise.whenResolved(_:) + 4351205536\r\n36\r\nApollo\r\nPromise.swift - Line 136\r\npartial apply for closure #1 in Promise.catch(_:) + 136\r\n37\r\nApollo\r\nPromise.swift - Line 68\r\nPromise.init(_:) + 68\r\n38\r\nApollo\r\nPromise.swift - Line 135\r\nclosure #1 in closure #1 in Promise.flatMap<A>(_:) + 135\r\n39\r\nApollo\r\npartial apply for closure #1 in closure #1 in Promise.map<A>(_:) + 4351241932\r\n40\r\nApollo\r\n<compiler-generated> - Line 4351240464\r\npartial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<A, Error>) -> () + 4351240464\r\n41\r\nApollo\r\nspecialized closure #1 in Promise.resolve(_:) + 4351233008\r\n42\r\nApollo\r\nspecialized Promise.fulfill(_:) + 4350994784\r\n43\r\nApollo\r\n<compiler-generated> - Line 4350998216\r\npartial apply for specialized Promise.fulfill(_:) + 4350998216\r\n44\r\nApollo\r\nPromise.swift - Line 163\r\nspecialized closure #1 in closure #1 in Promise.map<A>(_:) + 163\r\n45\r\nApollo\r\npartial apply for specialized closure #1 in closure #1 in Promise.map<A>(_:) + 4351244372\r\n46\r\nApollo\r\n<compiler-generated> - Line 4351244132\r\npartial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed Result<A, Error>) -> () + 4351244132\r\n47\r\nApollo\r\n<compiler-generated> - Line 4351232400\r\nspecialized closure #1 in Promise.resolve(_:) + 4351232400\r\n48\r\nApollo\r\nPromise.swift - Line 4350994980\r\nspecialized Promise.fulfill(_:) + 4350994980\r\n49\r\nApollo\r\n<compiler-generated> - Line 4351012708\r\npartial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed B) -> () + 4351012708\r\n50\r\nApollo\r\nDataLoader.swift - Line 53\r\nspecialized closure #3 in closure #1 in DataLoader.dispatch() + 53\r\n51\r\nApollo\r\n<compiler-generated> - Line 4351012380\r\npartial apply for specialized thunk for @escaping @callee_guaranteed (@guaranteed [B]) -> (@error @owned Error) + 4351012380\r\n52\r\nApollo\r\nPromise.swift - Line 122\r\nspecialized closure #1 in Promise.andThen(_:) + 122\r\n53\r\nApollo\r\nDataLoader.swift - Line 4351009748\r\nspecialized closure #1 in DataLoader.dispatch() + 4351009748\r\n54\r\nApollo\r\n<compiler-generated> - Line 4350967396\r\nthunk for @escaping @callee_guaranteed () -> () + 4350967396\r\n```\r\n\r\n\r\n\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hello, this was addressed in [0.27.1](https://github.com/apollographql/apollo-ios/blob/main/CHANGELOG.md#v0271), I recommend updating your client. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd , hello👋  Roger that. We've already updated to the latest version 0.30.0. \r\nWe'll see soon if it solves the issue.\r\nThanks.","author":{"__typename":"User","login":"Kharauzov","id":"MDQ6VXNlcjE4MjQzNTI1","name":"Serhii Kharauzov"}},{"__typename":"IssueComment","body":"OK great - I'm going to close this since it was a known issue with 0.27.0. If you're still seeing problems with this on 0.30.0, please open a new issue and we'll figure it out. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Getting \"The request timed out.\" sometimes while calling query and mutation.","author":{"__typename":"User","login":"DiwakarThapa","id":"MDQ6VXNlcjI5OTE3Nzk5","name":"diwakar thapa"},"body":"Hello!!! \r\nSometimes when I open the app I cannot get the **response of the first query** it requests rather I get the following **timeout error message** on Xcode debug console. I tried every possible solution found on StackOverflow but could find any effective solution and also could not figure out why **\"The request timed out.\"** has occurred in the first place. Our Android team is also experiencing similar issues. On the **server-side**, the timeout interval is **65 seconds**. so, I set request timeout interval **65 seconds** but it didn't work. \r\n\r\n**Console Error**\r\n```\r\nError Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={_kCFStreamErrorCodeKey=-2103, NSURLErrorFailingURLSessionTaskErrorKey=LocalDataTask <1874F8BE-FA0F-45E1-8A51-96F290D85883>.<2>, NSURLErrorRelatedURLSessionTaskErrorKey=(\r\n    \"LocalDataTask <1874F8BE-FA0F-45E1-8A51-96F290D85883>.<2>\"\r\n), NSLocalizedDescription=The request timed out., NSErrorFailingURLStringKey=https://example.graphql, NSErrorFailingURLKey=https://example.graphql, _kCFStreamErrorDomainKey=4}\r\n```\r\n**Is this apollo-ios terminating the request itself or server-side error?** ","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"This is an error from Apple's URL loading system, the timeout is happening there. Are you saying that the timeout is happening before the 65 seconds that you set it to? Or just that it's still happening? The fact that your Android app is also having a similar problem points pretty squarely at your server.\r\n\r\nAlso am I correct in assuming that the url string here `https://example.graphql` is a placeholder for your real URL? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd  `https://example.graphql` is a placeholder for our real URL?  timeout is happening at 65 seconds.","author":{"__typename":"User","login":"DiwakarThapa","id":"MDQ6VXNlcjI5OTE3Nzk5","name":"diwakar thapa"}},{"__typename":"IssueComment","body":"Yeah that sounds like the request timeout is working as expected and the issue is that the request is, in fact, timing out, and that the issue is most likely going to be on your server side. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"thank you @designatednerd ","author":{"__typename":"User","login":"DiwakarThapa","id":"MDQ6VXNlcjI5OTE3Nzk5","name":"diwakar thapa"}},{"__typename":"IssueComment","body":"@designatednerd I forget to mention one thing, on **graphql playground** if we request the same query or mutation multiple times the response arrives without \"The request timed out. \" error but on the app side sometimes \"The request timed out. \" error appears. why is that?","author":{"__typename":"User","login":"DiwakarThapa","id":"MDQ6VXNlcjI5OTE3Nzk5","name":"diwakar thapa"}},{"__typename":"IssueComment","body":"GraphQL playground generally runs on your the same server as your endpoint, so in theory it's just making local calls. It's also possible that there's some kind of credential that is available through the web that's not going through to mobile. I wish I could narrow it down for you but unfortunately there are about a zillion things that could go wrong here. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@DiwakarThapa did you find a solution for your Problem? In our application, we have the same behaviour. Sometimes we run into a timeout, but the GraphQL Playground is always working.","author":{"__typename":"User","login":"DaTebe","id":"MDQ6VXNlcjEyOTY3MzA1","name":"DaTebe"}}]}},{"__typename":"Issue","title":"extensions property on GraphQLResult","author":{"__typename":"User","login":"paulkite","id":"MDQ6VXNlcjQwOTMwMDc=","name":"Paul Kite"},"body":"Hello! Curious if there are any plans to implement the `extensions` hash map support on `GraphQLResult`. I see the Android implementation has this and would love to be able to have the same ability to use this as well.\r\n\r\nThanks!","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"This [is implemented on `GraphQLError`](https://github.com/apollographql/apollo-ios/blob/main/Sources/Apollo/GraphQLError.swift#L33) on our end. Are you using it in a non-error capacity? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Yes. Our team sends non-error information through `extensions`.","author":{"__typename":"User","login":"paulkite","id":"MDQ6VXNlcjQwOTMwMDc=","name":"Paul Kite"}},{"__typename":"IssueComment","body":"OK - looking at [the spec](https://spec.graphql.org/June2018/#sec-Response-Format) it does appear `extensions` is allowed at the root of the response. \r\n\r\nI'm somewhat swamped at the moment - if you want to make a PR you're more than welcome to (just make sure to add tests!) but I'll try to get to it as I can if not. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thank you so much for the response!","author":{"__typename":"User","login":"paulkite","id":"MDQ6VXNlcjQwOTMwMDc=","name":"Paul Kite"}},{"__typename":"IssueComment","body":"@designatednerd Just curious, what's the usual turnaround on PRs from the community to getting into a release?","author":{"__typename":"User","login":"paulkite","id":"MDQ6VXNlcjQwOTMwMDc=","name":"Paul Kite"}},{"__typename":"IssueComment","body":"Usually fairly quick if they're small. It'd almost certainly be faster than waiting for me to have bandwidth 😛 ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"This shipped as part of 0.32.0!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"GraphQLQueryWatcher - fetch and watch flow.","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null},"body":"Let's discuss watchers, cache and their flow.\r\n\r\nCold start of application - no cache at all. \r\n**Here are my debug logs:**\r\n```\r\nisReachable true                         //Reachability change\r\nUser: nil                                      //No user logged in        \r\napollo.watch(query: SyncManagerQuery(), cachePolicy:  .returnCacheDataDontFetch)     \r\nWatch SyncManagerQuery       // We are interested ONLY in cached data.\r\nWatch SyncManagerQuery error   //Error cache is empty. It's ok\r\nMissing value                                 //Error description - missing value. Because cache is empty. \r\n\r\n```\r\n\r\nHere everything seems to be fine. We are starting application for the first time. Cache is empty. Query watcher is being triggered and is returning error because of lack of data in cache.\r\n\r\nNow let's move forward and log in.\r\n\r\n```\r\nOptional(<FIRUser: 0x6000031c6000>)          //Now we've got user\r\nfetch. apollo.fetch(query: SyncManagerQuery(), cachePolicy: .fetchIgnoringCacheData)  \r\nFetch Sync FETCH                                             //Ignoring cache data is still creating cache am I right?\r\nSync Fetch success                                          //Fetch is successful \r\nBUT NOTHING IS HAPPENING :(\r\n```\r\n\r\n**Question 1:** Why watcher is not reacting? It is being stored in a parent object. \r\n`private var syncWatcher: GraphQLQueryWatcher<SyncManagerQuery>?`\r\nand is initialized before fetch trigger.\r\n\r\nOk let's start over again. Close the application and start again with already existing cache. \r\n\r\n```\r\nisReachable true                                           //We've got internet\r\nOptional(<FIRUser: 0x600003eba480>)    //We've got user\r\nFetch Sync FETCH                                       //Above conditions are triggering FETCH\r\nWatch SyncManagerQuery                          //Hmm watch is also starting? Not that scary ok, it is just executing for the first time?\r\nWatch SyncManagerQuery success          //Success - because we already have cache so it's ok\r\nSync Fetch success                                   //In the meantime FETCH just finished\r\nWatch SyncManagerQuery                       // **1***  So it is triggering watch. Not sure why.\r\nWatch SyncManagerQuery error            //Error :(The operation couldn’t be completed. (Apollo.URLSessionClient.URLSessionClientError error 2.)  **2**\r\nWatch SyncManagerQuery                      // But hey it is trying once again \r\nWatch SyncManagerQuery success       // And this time we've got a success.\r\n```\r\n\r\n**Question 2:** - Fetch result had no changes at all. It was exactly the same. Is watcher reacting to just cache update or is it verifying actual changes?\r\n**Question 3:** - Why it fails? And the retry is normal behavior after failure or is it a side effect of sth else?\r\n\r\n\r\nOk let's start over again. Exactly same conditions. We already have cache.\r\n```\r\n\r\nisReachable true                                             //We've got internet\r\nOptional(<FIRUser: 0x6000008ce080>)      //We've got user\r\nFetch Sync FETCH                                         //Starting fetch\r\nWatch SyncManagerQuery                            \r\nWatch SyncManagerQuery success             //Watching cache successful\r\nSync Fetch success                                      //Fetching data successful, cache is being refreshed\r\nWatch SyncManagerQuery                           //And this is probably triggering watch \r\nWatch SyncManagerQuery success            //Watch is successful\r\nWatch SyncManagerQuery                          //**1** But what is happening? Why it is triggering once again?\r\nWatch SyncManagerQuery success\r\n\r\n```\r\n**Question 4:** - why my watch query seems to be triggering twice after fetch? ","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! I renumbered your questions so it would be clearer which one i'm responding to once I get more information here. Some things that would be helpful to understand: \r\n\r\n- Are you using the SQLite cache or the in-memory cache? \r\n- In the second code block (just before question 1), you are still running the watcher which was started in the first code block, and that's what you're expecting to get hit when you've added \"But nothing is happening\", correct?\r\n- After Question 1, you say \"close the application and start again\" - do you mean that you just exit the application then go back into it, or that you force-quit the application? \r\n- For the 3rd and 4th sets of logs, are you specifying a cache policy or using the default `.returnCacheDataElseFetch`? \r\n- Where in the application lifecycle are you setting up your watcher? Is it possible that the watcher could be getting set up multiple times? \r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"1. SQLite cache\r\n2. That is the same app session. So yeah watcher is still up and running.\r\n3. Reset the application. New session. SQLite cache already exists. Just wanted to check how watcher is going to act with existing cache and initializing once again.\r\n4. Watch is always using returnCacheDataDontFetch, fetch is alwasy using fetchIgnoringCacheData\r\n5. Not possible in that case. My AppDelegate is starting the whole FlowControlAgent which is Singleton here.\r\n\r\nAll problems seems to be similar to \"cold start\" problem described here \r\nhttps://github.com/apollographql/apollo-ios/issues/99 \r\n","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}},{"__typename":"IssueComment","body":"Yeah, this from @martijnwalraven in #99 definitely seems to explain why your first watcher isn't called:\r\n\r\n>  Because your watch uses `.returnCacheDataDontFetch`, and the cache is initially empty, it will never get a valid response in that case.\r\n\r\nIs there a chance you could send me a small repro project? I should at least be able to try to figure out why the `watch` is getting called twice, but it'd be pretty hard to do without something to debug. You can email it to ellen at apollographql dot com. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'll do my best to prepare some sample however now I'm out of time. Hopefully will send you sth around weekend. \r\nRight now, well, I can live with double watcher :) ","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}},{"__typename":"IssueComment","body":"@pgawlowski Were you ever able to get a sample together? If not, do you mind if we close this issue out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hey @designatednerd \r\n\r\nSorry for not providing my sample code. It's still on my personal ToDo however I am totally sucked into other work. Let's close this issue right now. Hope I will provide some sample that will be helpful to validate this issue in some time - maybe during my vacations :) \r\n\r\nThanks for everything!","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}}]}},{"__typename":"Issue","title":"Cache and queries, unable to fetch record by ID.","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null},"body":"So let's start with sth like this. Fetch and cache using SQLite normalized cache.\r\n```\r\nquery Sync {\r\n\tviewer {\r\n\t\tthings {\r\n\t\t\tnodes {\r\n\t\t\t\tid\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n```\r\nHere is our cacheKeyForObject\r\n\r\n ```\r\n       client.cacheKeyForObject = { (object) in\r\n          if\r\n            let id = object[\"id\"] as? String,\r\n            let type = object[\"__typename\"] as? String {\r\n              return [id, type]\r\n          }\r\n          // No id or typename, don't do caching\r\n          return nil\r\n        }        \r\n\r\n```\r\nI also tried the basic one \r\n`client.cacheKeyForObject = { $0[\"id\"] }`\r\n\r\nWe've got (or at least out backend claims that we've got) unique ID's.\r\nNext I want to perform query with cachePolicy: `.returnCacheDataDontFetch`.\r\n\r\n```\r\nquery ThingActionConnection($thingId: ID!) {\r\n  thing: node(id: $thingId) {\r\n    ...on Thing {\r\n      id\r\n    }\r\n  }\r\n} \r\n```\r\n\r\nResult is `GraphQLResultError(path: thing, underlying: Apollo.JSONDecodingError.missingValue)`\r\nThe more I dig down into apollo and caching the less I know how exactly this supposed to work. \r\n\r\nNetwork call is giving us correct results. What is more I checked local sqliteDB and there is a results with this particular `$thingId`. \r\n\r\nAndroid developer is getting results with ease. On our side, JSONDecodingError. \r\nI am nearly 100% sure that the problem is with cacheKeyForObject or ios apollo is unable to handle nodes here?\r\n\r\n@edit\r\nSame goes for \r\n```\r\n\r\nquery ThingActionTest($thingId: ID!) {\r\n  viewer {\r\n    thing(id: $thingId) {\r\n      id\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n@edit 2:\r\n\r\nInteresting fact is - direct cache access with same id works totally fine.\r\n\r\n```\r\n  apolloClient.store.withinReadTransaction({ transaction in\r\n            do {\r\n                let variables = [\"isReady\": false]\r\n                let data = try transaction.readObject(ofType: ThingAction.self, withKey: actionId, variables: variables)\r\n                print(data)\r\n            } catch {\r\n                print(error.localizedDescription)\r\n            }\r\n        })\r\n```\r\nThis is only giving me more confusion about query execution on cache.\r\n\r\nI also noticed that direct cache access using query is giving me some confusing error.\r\n`Error at path \"thing)\": missingValue`\r\nWhy it is printing ')' character there? \r\n@edit ok it's just a typo in GraphqlExecutor.swift line 36.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"> The more I dig down into apollo and caching the less I know how exactly this supposed to work.\r\n\r\nWelcome to my last year, my friend 🙃. And also to why I'm planning to simplify a bunch of stuff in the Cache as part of phases 2-3 of the swift codegen rewrite if it's at all possible.\r\n\r\nI can tell you for sure that iOS and Android have no cache compatibility guarantees right now, and that I *think* the issue is that you're using a fragment on a node, and that you don't have the `id` on the node itself - that means that the node won't have an ID, and it won't go into the cache. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I finally figured it out. The problem was missing variables. \r\n\r\nHowever what I noticed is that sometimes when I am asking for data one by one I am getting\r\n`GraphQLResultError(path: lock.id, underlying: Apollo.JSONDecodingError.missingValue)` without any particular reason. Because starting exactly the same `withinReadTransaction` few seconds later is giving me correct response.\r\n","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}},{"__typename":"IssueComment","body":"Is it giving you that error maybe because the data has not yet been populated? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Data is populated. \r\nI am executing exactly the same load and it can give a results like:\r\n\"I've got data.\"\r\n\"I've got data.\"\r\n\"I've got data.\"\r\nGraphQLResultError(path: lock.id, underlying: Apollo.JSONDecodingError.missingValue)\r\nGraphQLResultError(path: lock.id, underlying: Apollo.JSONDecodingError.missingValue)\r\n\"I've got data.\"\r\n\r\nNo fetching or repopulating cache in between.\r\nUser is offline and no cache manupulations are happening. I just wondered if there is a chance of some sort data access race here?\r\n\r\nI digged down ino the sql file and found that when I am getting this error the reference ID of one object is missing and right after getting data back there is a new one, different than previous (before missing value) one.","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}},{"__typename":"IssueComment","body":"There is definitely a possibility of a data race, there are some known issues with threading in the cache at the moment.\r\n\r\nI'd really need to see your exact code to figure out what's going on with your references - the reference ID should be stable, but any number of things could be happening here to mess that up. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@pgawlowski Were you ever able to resolve this issue? Anything I can do to help here or do you mind if I close this out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hey @designatednerd \r\nActually yes. The main problem was old cache + messed id's. \r\nThank you for your help.","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null}}]}},{"__typename":"Issue","title":"How to download schema.json with apollo client for an endpoint with url params and multi headers?","author":{"__typename":"User","login":"XiaoxiaYao","id":"MDQ6VXNlcjIyODk5MDk2","name":"MichaelYao"},"body":"Hi,\r\n\r\nI am trying to download a schema.json file from an endpoint. However, I don't know how to config the the url params and multi headers? Please check the pic below:\r\n![image](https://user-images.githubusercontent.com/22899096/89851786-e5de2980-dbbf-11ea-9a36-1c3499af4dc2.png)\r\nI am able to use graphql in graphiql. But don't know how to config in terminal. I tried:\r\n`apollo client:download-schema --endpoint=https://xxxxxxxxxxx/graphql/ --header='xxxxx-API-Key:xxxx;xxxxx-k:xxxxxx' --data='co=US'`\r\nHowever still no luck. Can anyone help me with this? I did not any doc about this ...so I am here. I don't know how to specify co=US and how to separate the headers with ,(comma) or ; (semi comma)     Thank you in advance. Thanks.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! Each header must be passed in separately like so: `--header=\"Header-Key: Header Value\" --header=\"Header-Key-2: Header Value 2\"`\r\n\r\nThere is also a way to set this up using the [Swift Scripting lib](https://www.apollographql.com/docs/ios/swift-scripting) using the [`ApolloSchemaDownloader`](https://www.apollographql.com/docs/ios/swift-scripting/#downloading-a-schema). ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> Hi! Each header must be passed in separately like so: `--header=\"Header-Key: Header Value\" --header=\"Header-Key-2: Header Value 2\"`\r\n> \r\n> There is also a way to set this up using the [Swift Scripting lib](https://www.apollographql.com/docs/ios/swift-scripting) using the [`ApolloSchemaDownloader`](https://www.apollographql.com/docs/ios/swift-scripting/#downloading-a-schema).\r\n\r\nThank you. Sorry, one more thing. Do you know how to deal with url params? co=US? How should I set it?","author":{"__typename":"User","login":"XiaoxiaYao","id":"MDQ6VXNlcjIyODk5MDk2","name":"MichaelYao"}},{"__typename":"IssueComment","body":"URL params should just be the same as a normal URL - `https://example.com?paramName=paramValue&param2name=param2Value`","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Cool. I will have a try. Thank you @designatednerd. Have a nice day!","author":{"__typename":"User","login":"XiaoxiaYao","id":"MDQ6VXNlcjIyODk5MDk2","name":"MichaelYao"}},{"__typename":"IssueComment","body":"@XiaoxiaYao Mind if we close this issue out then? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'm gonna close this out - @XiaoxiaYao  if you have further problems please reopen. Anyone else experiencing similar problems, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Changing converting logic for custom objects","author":{"__typename":"User","login":"Shiaulis","id":"MDQ6VXNlcjEzNjAxNzQ4","name":"Andrius Shiaulis"},"body":"Hey awesome Apollo team. I have a question related to custom scalar objects.\r\nWe are moving towards using GraphQL and I'm trying to adapt it for our requests. The problem occurs whenever I'm trying to convert custom objects from our response.\r\nOur backend is using `JSON` type for legacy information. Codegen is trying to convert it to a string:\r\n![image](https://user-images.githubusercontent.com/13601748/90020057-f8d42500-dcb7-11ea-8132-dc3b28699b36.png)\r\n\r\nIs there any way to specify that we don't want that object to be converted to a string?\r\nFor now I know only one solution: pass `--passthroughCustomScalars` key, but the downside of this approach is that I need to create global typealias or type for with `JSON` name for the whole project. Is there any way to not convert the object at all so it can convert ANY type or some more specific name like `ApolloJSON` so in that case name would be more specific?\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Okay I found codegen Readme file :) At least I can make prefix for custom scalars by passing it with codegen option:\r\n```\r\n--customScalarsPrefix=\"Apollo\"\r\n```","author":{"__typename":"User","login":"Shiaulis","id":"MDQ6VXNlcjEzNjAxNzQ4","name":"Andrius Shiaulis"}},{"__typename":"IssueComment","body":"Yep, there's also a `namespace` option that wraps all your stuff in a big `enum` to namespace it. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"HTTPNetworkTransport's URLSessionClient possible [ lost calls / memory leak ]","author":{"__typename":"User","login":"EggYoke","id":"MDQ6VXNlcjY5NjM3NTc4","name":null},"body":"Hi team!\r\nFirst of all, thanks for an awesome framework that makes the lives of so many of us that much easier 😄\r\n\r\nWe have run into a [lost calls / memory leak] issue.\r\nWe believe it is closely linked to issue https://github.com/apollographql/apollo-ios/issues/1292.\r\n\r\n### SETUP\r\nDependency manager: SPM\r\nApollo-iOS version: 0.30.0\r\nSetup: Instanced (not a Singleton)\r\n\r\nAlso we provide a `URLSessionClient` that runs on a background callbackQueue to the `HTTPNetworkTransport`:\r\n```\r\nURLSessionClient(\r\n    sessionConfiguration: URLSessionConfiguration.background(withIdentifier: \"background\"),\r\n    callbackQueue: .some(operation)\r\n)\r\n```\r\n\r\n### INTENDED OUTCOME\r\nWe expect that the calls of all instanced ApolloClients return successfully.\r\nWe also expect that ApolloClients that are not retained in our code get deallocated from the system memory.\r\n\r\n### ACTUAL OUTCOME\r\nWe first noticed that for some reason, new instances of `ApolloClient` (those created after the first instance is not retained in our code anymore) never return from their calls This has made us notice that the created `URLSessionClient`s, `HTTPNetworkTransport`s and `ApolloClient`s are never deallocated properly causing a memory leak.\r\n\r\n### REPRODUCTION STEPS\r\n1 - Make a call with the setup described above.\r\n2 - Remove the retained instance of the ApolloClient.\r\n3 - Create a new ApolloClient and make a new call.\r\n4 - Call does not come back / memory leak occurs.\r\n5 - Repeat from step 2 to create a new unwanted retained instance of `URLSessionClient`, `HTTPNetworkTransport` and `ApolloClient`.\r\n\r\n### OUR CONCLUSIONS\r\nThis part should be taken with a grain of salt as we are not Apollo experts. That said, it is the only conclusion that survived our tests. Having found this https://stackoverflow.com/questions/62612056/why-dispatchqueue-global-still-alive-after-deinit on StackOverflow, we think that the problem stems from the queue keeping alive the instance of the `URLSession` created in `URLSessionClient` in some fashion.\r\n\r\nThis causes multiple retains climbing up the dependence graph of:\r\n- URLSession\r\n- URLSessionClient\r\n- HTTPNetworkTransport\r\n- ApolloClient\r\n- Objects in our code that calls ApolloClient ...\r\n\r\n### OUR SOLUTION\r\nAdding the following to `HTTPNetworkTransport` fixes both our issues:\r\n```\r\ndeinit {\r\n  self.client.session.invalidateAndCancel()\r\n}\r\n```\r\n\r\nWe understand that this is most probably not the solution you will want to implement but it might help as a starting point to formulate something that will not jeopardize others that use your framework.\r\n\r\n### OUR INVESTIGATION\r\nIt should be said that we took the liberty to try this as there was code in the `URLSessionClient` for `deinit` that clears all tasks. We surmised that clearing the tasks in that situation did not cause a problem for calls in progress, meaning that clients of the framework should not expect the calls to complete if they stop holding their instance of `ApolloClient`.\r\n\r\nBut we noticed that the `deinit` in the `URLSessionClient` was never called even when its parent `HTTPNetworkTransport` `deinit` was called. We then noticed that the `HTTPNetworkTransport` was never deallocated even though its `deinit` was called.\r\n\r\nThat made us realize that something further down the line was probably holding things recursively. Implementing our solution, everything gets deallocated and for some reason, further ApolloClients return their calls successfully.\r\n\r\n### CONCLUSION\r\nAdvice on how to go forward from here would be greatly appreciated.\r\nThanks in advance for your help. We stand ready to answer any of your questions should you have some.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! Thanks for the extremely detailed report. Very, very odd that `deinit` would get called without the `HTTPNetworkTransport` actually being deallocated - usually the telltale sign of a memory leak is that `deinit` never gets called at all. \r\n\r\nIs this only happening with background sessions, or is it also happening with normal sessions? Or are you using a background configuration for all sessions? \r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hi again!\r\n\r\nTo answer your question, we are using a background configuration for all sessions. As for normal sessions, we do see some memory leaks but they do not impede calls. Maybe the following will be useful.\r\n\r\nWe tried many configurations, mainly:\r\n- not using a URLSessionClient\r\n- using a URLSessionClient with a `.background` configuration and a callbackQueue `.main`\r\n- using a URLSessionClient with a `.background` configuration and a callbackQueue `.some`\r\n\r\nOnly the configuration of `.background` with a callbackQueue `.some` is suitable for us. Otherwise, some computations happen on the main thread when Apollo decodes our objects which brings the application to a crawl. (This is probably due to a specific situation in our code).\r\n\r\n### OUR TESTS\r\nHere are our results with those configurations in both instance setup and singleton setup. The main things we got out of it are that with an instance setup:\r\n- Calls do not come back if we provide a URLSessionClient\r\n- We always see URLSessionClients being kept in memory. In instruments, some are identified as leaks, some are not.\r\n\r\nWe hope this is clear and it did not confuse you to what's happening. As always, we are here if you need more info 😃.\r\n\r\nNo URLSessionClient\r\n---\r\n\r\n#### Instance\r\n✅ Calls come back\r\n✅ Does not retain objects holding ApolloClient instance in our code\r\n🛑 Retain orphaned UrlSessionClients and shows a leak in instruments\r\n\r\n#### Singleton\r\n✅ Calls come back\r\n✅ Does not retain objects holding ApolloClient instance in our code\r\n✅ Does not retain orphaned UrlSessionClients\r\n\r\n\r\nURLSessionClient with callback queue .main\r\n---\r\n\r\n#### Instance\r\n🛑 Calls do not come back\r\n🛑 Retains objects holding ApolloClient instance in our code\r\n🛑 Retains orphaned UrlSessionClients but does not show a leak in instruments\r\n\r\n#### Singleton\r\n✅ Calls come back\r\n✅ Does not retain objects holding ApolloClient instance in our code\r\n✅ Does not retain orphaned UrlSessionClients\r\n\r\n\r\nURLSessionClient with callback queue .some\r\n---\r\n\r\n#### Instance\r\n🛑 Calls do not come back\r\n🛑 Retains objects holding ApolloClient instance in our code\r\n🛑 Retains orphaned UrlSessionClients but does not show a leak in instruments\r\n\r\n#### Singleton\r\n✅ Calls come back\r\n✅ Does not retain objects holding ApolloClient instance in our code\r\n✅ Does not retain orphaned UrlSessionClients","author":{"__typename":"User","login":"EggYoke","id":"MDQ6VXNlcjY5NjM3NTc4","name":null}},{"__typename":"IssueComment","body":"I'm going to take a look deeper at this on Monday but one thing to be aware of is that there is no such thing as \"No `URLSessionClient` - a default one will be created for you if you're using `HTTPNetworkTransport`. It uses `.main` as its default queue, so I'm not sure what would be different between that and passing in your own. \r\n\r\nAdditionally: How are you setting up the instances? Is it possible that ARC is clobbering them because they are not properly retained somewhere and one of the assorted `weak self` calls winds up being nil? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks!\r\n\r\nFor the `URLSessionClient`, we figured that one was created on the Apollo framework side if not provided. Seeing the disparity in behaviour, we thought of sending you our observations on that as well. Maybe the difference between providing ours compared to the one by default is that we always put a `URLSessionConfiguration.background` instead of the `.default` one provided by Apollo.\r\n\r\nAs for how we retain instances, if you are talking about the `URLSessionClient`, we create it and give it to the `HTTPNetworkTransport`. It is all done in the same method and we do not retain either the `URLSessionClient` or the `HTTPNetworkTransport`. If you are talking about the `ApolloClient`, we tested swapping the `ApolloClient` for a mock that implements the same methods. We see no retain on our side.","author":{"__typename":"User","login":"EggYoke","id":"MDQ6VXNlcjY5NjM3NTc4","name":null}},{"__typename":"IssueComment","body":"So where do you retain the `ApolloClient` which you've handed the `HTTPNetworkTransport` to? Basically, I have a suspicion that the whole stack is getting hammered by ARC before the call returns if the instance is not being held onto somewhere. That would explain why in the `Instance` case listed above calls don't come back.\r\n\r\nAgain, if you have some sample code to share, that would be most helpful.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"The `ApolloClient` is retained by a **repo** object. When the object is instantiated it is injected with a new `ApolloClient` instance and uses it to make its calls.\r\n\r\nThe first time a user navigates to where a call is needed, we create a repo and start a call, it comes back correctly. The second time a user navigates to where a call is needed, we create a new repo and start a call, it never comes back. We keep those instances alive until they are not needed anymore or the user navigates away. In any case, when we create the second `ApolloClient` instance, nothing returns from the call even if held for over 10 minutes.\r\n\r\nI was able to confirm that calls not coming back happens if we provide a `URLSessionConfiguration` that is `.background`.\r\n\r\nAlso, sorry about the late notice but in debug environment,  if we provide a `URLSessionConfiguration` that is `.background`, we often hit line 225 of the `URLSessionClient`:\r\n`assertionFailure(\"No data found for task \\(dataTask.taskIdentifier), cannot append received data\")`\r\n","author":{"__typename":"User","login":"EggYoke","id":"MDQ6VXNlcjY5NjM3NTc4","name":null}},{"__typename":"IssueComment","body":"I was able to replicate easily with the iOSTutorial project. What is the easiest way to send you that project amended to reproduce?","author":{"__typename":"User","login":"EggYoke","id":"MDQ6VXNlcjY5NjM3NTc4","name":null}},{"__typename":"IssueComment","body":"Email! ellen at apollographql dot com. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@EggYoke The sample you sent was very helpful, thank you. The underlying problem was a retain cycle as outlined in #1366. \r\n\r\nThe secondary problem is that you're attempting to create multiple background sessions with the same identifier at the same time, which the system won't let you do. I found that after the changes in #1366 were applied, I was able to get things to work with a background session by just using `UUID().uuidString` as the identifier, as this prevents any collisions in session name. \r\n\r\nHonestly, I wouldn't really recommend using background sessions for everything as it's kind of overkill, but if you need to for reasons I'm missing, that should at least unblock you.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"This has shipped with `0.31.0` - if you're still having issues with that version, please open a new issue and we'll try to figure it out. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thank you very much for the fast response.\r\nOur calls come back successfully and none of our objects are retained anymore.\r\nThis fixed all our issues, awesome job! 👍 ","author":{"__typename":"User","login":"EggYoke","id":"MDQ6VXNlcjY5NjM3NTc4","name":null}}]}},{"__typename":"Issue","title":"Cannot load underlying module for 'Apollo' for unit test target","author":{"__typename":"User","login":"dpatel-git","id":"MDQ6VXNlcjY4NDM2NTk1","name":null},"body":"Hello folks,\r\n\r\nI have following setup.\r\n\r\nXcode 11.3.1 (also tried on 11.6 without success)\r\nApollo 0.29.1\r\nCocoapods 1.9.2\r\n\r\nI am able to compile and run my application, but get the following error when I try to compile the unit test target\r\n\r\n```<unknown>:0: error: cannot load underlying module for 'Apollo'```\r\n\r\nHere is how I have declared the app and test targets in podfile\r\n\r\n```\r\ntarget 'MyApp' do\r\n    pod 'Apollo', Apollo\r\n    target 'MyAppTests' do\r\n      pod 'OHHTTPStubs', OHHTTPStubs\r\n    end\r\nend\r\n```\r\nI have set `MyApp` as host application for the test target\r\n\r\nAny help is appreciated, thanks\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"It looks like your `MyAppTests` is missing an `inherit! :search_paths`. See the 2nd example [in the Podfile docs](https://guides.cocoapods.org/using/the-podfile.html). ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks, that fixed the issue.","author":{"__typename":"User","login":"dpatel-git","id":"MDQ6VXNlcjY4NDM2NTk1","name":null}}]}},{"__typename":"Issue","title":"GraphQLQueryWatcher doesn't update its dependent keys","author":{"__typename":"User","login":"teodorpenkov","id":"MDQ6VXNlcjU2MjIyODg=","name":"Teodor Penkov"},"body":"With the `0.23.0` release Apollo changed the way it stores keys in the `QueryWatcher` https://github.com/apollographql/apollo-ios/blob/main/Sources/Apollo/GraphQLQueryWatcher.swift#L73-L83\r\n\r\nThe problem with this is that the watcher doesn't update its `dependentKeys` like it should. There is a commit that does that but I couldn't follow why it was changed:\r\nhttps://github.com/apollographql/apollo-ios/commit/2b07e69e71a0621795b7089fda84c0ca744ba202\r\n\r\nThe problem that we are experiencing is that we are updating a query in the store with `ReadWriteTransaction` and in the previous versions the updated query captured the newly dependent keys, therefore when a change occured it was propagated to the result handler and now it's not.\r\n\r\nWhat's the reason behind this change and how can we workaround this? Was there a problem with the previous implementation in 0.22.0 https://github.com/apollographql/apollo-ios/blob/0.22.0/Sources/Apollo/GraphQLQueryWatcher.swift#L66-L68","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi, the commit you referenced was part of #1156 which went out with `0.28.0`, not `0.23.0`. You can see a detailed explanation of the bug in #1155. \r\n\r\nWhat version are you actually on right now? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"hey @designatednerd thanks for reaching out.\r\n\r\nI'm using `0.28.0` but I think the problem that I experience is on every version after `0.23.0`.\r\n\r\nOur use case is pagination using the Apollo cache.\r\nWe are doing one `main` query followed by 0 or more `fetch more` queries (based on page info and scroll events) each `fetch more` query updates the main one with its nodes and page info. We've been using this method for a while and it worked pretty well, the reason for that is that the \"main\" query was updating its dependent keys (the nodes from the fetch more queries) and after the commits I mentioned it stopped working.\r\n\r\nMutation values gets to the store correctly but after `didChangeKeys` gets called this results in a watcher's result handler being called with the old values rather than the updated values from the mutation.\r\n\r\nI will run through the commits and PR's that you mentioned and will try to figure out what the problem with the previous behavior was.","author":{"__typename":"User","login":"teodorpenkov","id":"MDQ6VXNlcjU2MjIyODg=","name":"Teodor Penkov"}},{"__typename":"IssueComment","body":"So I know some stuff changed around `0.22.0` that was the motivation for these changes that went out with `0.28.0`, but otherwise I'm not really seeing anything that changed. If you have any suggestions or a PR, I'm more than happy to try them out!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'd either suggest reverting to `0.22.0`'s implementation https://github.com/apollographql/apollo-ios/blob/0.22.0/Sources/Apollo/GraphQLQueryWatcher.swift#L66-L68\r\n\r\nor adding `self.dependentKeys = graphQLresult.dependentKeys` before this line https://github.com/apollographql/apollo-ios/blob/main/Sources/Apollo/GraphQLQueryWatcher.swift#L79\r\n\r\nIf you don't see problem with that I'm happy to open a PR.","author":{"__typename":"User","login":"teodorpenkov","id":"MDQ6VXNlcjU2MjIyODg=","name":"Teodor Penkov"}},{"__typename":"IssueComment","body":"@designatednerd thanks for the links that you shared.  I've checked them and I found the root cause of the problem.\r\n\r\n<img width=\"917\" alt=\"Screen Shot 2020-08-25 at 17 05 17\" src=\"https://user-images.githubusercontent.com/5622288/91184760-a5b99380-e6f5-11ea-8611-75a66b6313ee.png\">\r\n\r\nI'm pretty sure that if we bring back those lines it wouldn't break anything.","author":{"__typename":"User","login":"teodorpenkov","id":"MDQ6VXNlcjU2MjIyODg=","name":"Teodor Penkov"}},{"__typename":"IssueComment","body":"Hi! Sorry, I was on vacation last week. \r\n\r\nI read [your explanation](https://github.com/apollographql/apollo-ios/pull/1156#discussion_r476476875) here and I think I get it. I'll take a look at this today or tomorrow and see what I can figure out. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Primary Maintainer Out Of Office August 23-30","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"},"body":"I will be taking a break in a place that (not coincidentally) has terrible internet connectivity the week of August 24th. \r\n\r\nKeep opening issues and PRs while I'm out, but please be aware that they will not be addressed until August 31st or thereafter. Thank you for your patience!","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I'm back! ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Ambiguous for type lookup in this context error","author":{"__typename":"User","login":"Shiaulis","id":"MDQ6VXNlcjEzNjAxNzQ4","name":"Andrius Shiaulis"},"body":"Hey hey! Another question from my side :) \r\nIn our backend response contains 2 data fields `userCompanies` and `userCompany` that share type. \r\n![image](https://user-images.githubusercontent.com/13601748/90987179-b81abc80-e591-11ea-9e96-ded615f5630e.png)\r\nThe problem is that code generation creates 2 totally equal structures:\r\n![image](https://user-images.githubusercontent.com/13601748/90987269-573fb400-e592-11ea-8292-1a365a37b737.png)\r\n\r\nIn documentation explorer in GraphiQL I don't see any issues:\r\n![image](https://user-images.githubusercontent.com/13601748/90987304-9837c880-e592-11ea-9f5f-af004aa50ca8.png)\r\n\r\nSo should I still look for a fix on backend side? Is there any way to explain that these data fields share type?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Im getting the exact same problem.\r\n\r\n```swift\r\npublic struct Author: GraphQLSelectionSet {\r\n                public static let possibleTypes: [String] = [\"Staff\", \"Customer\"]\r\npublic struct Author: GraphQLSelectionSet {\r\n                public static let possibleTypes: [String] = [\"ArticleAuthor\"]\r\n```","author":{"__typename":"User","login":"kylebrowning","id":"MDQ6VXNlcjExMzAyMw==","name":"Kyle Browning"}},{"__typename":"IssueComment","body":"Yeah - this is where the depluralization for type names we're using in the typescript codegen kind of falls apart. The workaround is to use field aliases:\r\n\r\n```graphql\r\nquery MyQuery {\r\n   user {\r\n      id\r\n      userCompany: company // <-- alias\r\n      userCompanies\r\n   }\r\n}\r\n```\r\n\r\nThis way what's called `userCompany` on your server will be called `company` locally, making the type for that property `Company` and the type for `userCompanies` will be `UserCompany`. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd, thanks for the clarification 👍 ","author":{"__typename":"User","login":"Shiaulis","id":"MDQ6VXNlcjEzNjAxNzQ4","name":"Andrius Shiaulis"}},{"__typename":"IssueComment","body":"@Shiaulis did that work? If so, can we close this out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Worked for us. ","author":{"__typename":"User","login":"kylebrowning","id":"MDQ6VXNlcjExMzAyMw==","name":"Kyle Browning"}},{"__typename":"IssueComment","body":"Thanks, let's close it","author":{"__typename":"User","login":"Shiaulis","id":"MDQ6VXNlcjEzNjAxNzQ4","name":"Andrius Shiaulis"}}]}},{"__typename":"Issue","title":"Error: Unable to read file  ›    schema.json. ENOENT: no such file or directory, open 'schema.json'","author":{"__typename":"User","login":"fatma95","id":"MDQ6VXNlcjEyMTc1NDE3","name":"Fatma Mohamed"},"body":"I followed all the correct steps in the document, schema.json and graphql files are on the right places however I always get this error and build fails please help.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! So I'll need a bit more information to help diagnose this. Can you answer a few questions: \r\n\r\n- Have you confirmed that `schema.json` is downloaded and exists where you think it is on your filesystem? \r\n- Are you using the Swift Scripting wrapper or the shell script? \r\n- Can you paste a link to the set of instructions you are following? \r\n\r\nThank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hi! I haven't heard back on this issue in over a week so I'm going to close it out - @fatma95 please reopen if you still need help, anyone else with a similar problem, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"No data found for task x, cannot append received data","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"},"body":"One of our tests hitting assert in `URLSessionClient.swift:230` in on CI after updating to latest version (0.31.0).\r\nIt's not networking stack test so don't think we doing anything specific to hit that assert. Looking at code that would indicate some kind race condition...","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Weird! Is it possible it's something leaking over from an older test? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"can't see anything relevant, also it don't happen every run","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"```swift\r\npublic func invalidate() {\r\n    self.clearAllTasks()\r\n    self.session?.invalidateAndCancel()\r\n    self.session = nil\r\n  }\r\n```\r\n\r\nshouldn't `self.session?.invalidateAndCancel()` be before `self.clearAllTasks()`? Will try change and see if our tests passes more reliably ","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"Hi! Yeah flipping the cleanup order likely wouldn't help since some tasks are still in-flight, I suspect I need to actually cancel all the in-flight tasks. Thanks for the heads up on this!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Haha damn it, looks like there's a key piece of info about `invalidateAndCancel` that's only in the docs docs and not in the headerdoc: \r\n\r\n<img width=\"779\" alt=\"Screen Shot 2020-09-08 at 1 58 23 PM\" src=\"https://user-images.githubusercontent.com/1976498/92516873-6e5de300-f1db-11ea-9b93-4437ef49a216.png\">\r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Shipped with version `0.32.1`!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hi @designatednerd,\r\n\r\nI am encountering this issue in `0.33.0`, looking at #1383 I'm not quite certain it addressed the root issue given the shared `URLSession` isn't being used in `URLSessionClient`? I have a fairly reproducible case where this `invalidate` logic is getting hit but I'm still encountering this assertion error afterwards, confirmed with some debugging its definitely the same instance floating around. \r\n\r\nThat all said, it does seem that the issue is resolved by calling `invalidateAndCancel` prior to calling the `clear` block (as is currently done in the else branch). I've tested this quite a bit and have been unable to trigger the assertion failure anymore. I'll go ahead and open a PR for you to take a look, hopefully it helps!","author":{"__typename":"User","login":"philfi","id":"MDQ6VXNlcjM5NTY0NjE1","name":null}},{"__typename":"IssueComment","body":"Can confirm that it's not solved in 0.33.0. Just got assert while running tests on iOS12\r\n\r\n<img width=\"1024\" alt=\"Screenshot 2020-10-14 at 11 44 45\" src=\"https://user-images.githubusercontent.com/1027187/95979215-37e73980-0e13-11eb-9976-22d5d1f32349.png\">\r\n","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"still happening in 0.36.0 (iOS12 simulator)","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}}]}},{"__typename":"Issue","title":"Crash at runtime when upgrading to 0.31.0 on URLSessionClient.swift, line 95","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"},"body":"Hey guys,\r\n\r\nSo I have an app that works perfectly with 0.30.0 but when upgrading to 0.31.0 I get a crash soon after the app launches:\r\n\r\n```\r\nFatal error: Unexpectedly found nil while implicitly unwrapping an Optional value: file /Users/XXX/Library/Developer/Xcode/DerivedData/XXX-bzyicfzsqzelixabxktyzmboxbaj/SourcePackages/checkouts/apollo-ios/Sources/Apollo/URLSessionClient.swift, line 95\r\n```\r\n\r\nThe issue is one this line :\r\n\r\n```\r\nlet task = self.session.dataTask(with: request)\r\n```\r\n\r\nhere `session` is nil.\r\n\r\nLet me know if you need anything else as I can reproduce the crash 100% of the time. Many thanks","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! That's awfully weird, since the session is instantiated in the initializer. Can you share the code you're using to create your client, as well as where in the app lifecycle that's happening? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Something that occurred to me is that in `0.31.0` we added a mechanism to make sure the `URLSession` is properly terminated so as not to create a retain cycle - you can probably throw a breakpoint in [here](https://github.com/apollographql/apollo-ios/blob/d95b4463f78a15fba7e3de2017817a391e9714f0/Sources/Apollo/URLSessionClient.swift#L63) to see if that's getting hit before you get to whatever's creating the data task.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hey @designatednerd !\r\n\r\nFirst, thank you very much for answering so quickly, appreciate it :)\r\n\r\nI think your guess of adding a breakpoint into the `invalidate` method of `URLSessionClient` was a good idea. It turns out that when our app starts, we are initializing an `HTTPNetworkTransport` to use into a `SplitNetworkTransport` without any authentication, and when we authenticate (a few seconds after the app starts) we replace that `HTTPNetworkTransport` with a new one, simply by dereferencing the old one and keeping a pointer on a new `SplitNetworkTransport` that contains this new client.\r\n\r\nI think that what may happen is that the first client may have started some work in background, and when it gets destroyed this work hasn't finished, leading to this crash as the `session` is already nil. Could that be possible? ","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"That's possible - I've added some code in #1383 that should cancel any inflight operations on a `URLSessionClient` when `invalidate()` gets called, but I'm not sure if it'll address this crash since it's happening before the task is even added, which means `invalidate` has probably been called on a different thread.\r\n\r\nDefinitely sounds like a race condition is happening here - out of curiosity why are you fully replacing the client rather than using one of the delegate methods to handle authentication?","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd Just tested, still crashing.\r\n\r\nI'm not 100% sure why we are replacing the client as I'm not the one who wrote that code, but as far as I understand it's because we are using `SplitNetworkTransport` and we are recreating the websocket so we need to also recreate the http client.","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"From here, I see a couple of workaround options: \r\n\r\n- Hanging on to the instance of `HTTPNetworkTransport` and using that when you have to recreate the web socket rather than creating a fully new transport\r\n- Taking a look at recent changes to the web socket transport, particularly around disconnecting and reconnecting, and seeing if any of those will prevent you from having to recreate. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I took the first option which works, so ok for me now but I guess you still have a race condition somewhere. Thank you very much for your help","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"Yeah for sure - I'm going to have to dig deeper into this but a lot of things are changing with the updated networking stack, so I'd like to get that out before digging back into this.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@benoitletondor We've just shipped something that will allow you to delay starting the websocket after initialization, which in theory should allow you to not have to replace the `SplitNetworkClient`. Do you mind pulling `0.36.0` and letting me know if that gets you to where you need to be? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hey @designatednerd ,\r\n\r\nThank you for your help on that. Indeed, it would work for my use case as we can avoid starting the websocket until we have a proper authentication. As I said last time I already followed your advice of keeping the `HTTPNetworkTransport` instance so it's not really needed anymore on my side.\r\n\r\nThanks","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"@benoitletondor Do you mind if I close out this issue then? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Be my guest ;) ","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}}]}},{"__typename":"Issue","title":"ApolloCodegen.run does not throw error when validation of GraphQL query document fails","author":{"__typename":"User","login":"michaelxbarrett","id":"MDQ6VXNlcjMzODIyNjEz","name":null},"body":"From the tutorial:\r\n```\r\ndo {\r\n    // Actually attempt to generate code.\r\n    try ApolloCodegen.run(from: targetRootURL,\r\n                          with: cliFolderURL,\r\n                          options: codegenOptions)\r\n} catch {\r\n    // This makes the error message in Xcode a lot more legible.\r\n    exit(1)\r\n}\r\n```\r\n\r\nWhen there is an error in the query, the message `Validation of GraphQL query document failed` is logged and outputted to the console with a stacktrace, but no error is thrown in this case.\r\n\r\n\r\nStack trace:\r\n```\r\nValidation of GraphQL query document failed\r\n    at Object.validateQueryDocument (Codegen/ApolloCLI/apollo/node_modules/apollo-language-server/lib/errors/validation.js:35:38)\r\n    at Object.generate [as default] (Codegen/ApolloCLI/apollo/lib/generate.js:23:18)\r\n    at write (Codegen/ApolloCLI/apollo/lib/commands/client/codegen.js:84:54)\r\n    at Task.task (Codegen/ApolloCLI/apollo/lib/commands/client/codegen.js:104:46)\r\n```","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"To clarify: Do you mean that the `exit(1)` is not called because no error is thrown from `run` itself, or that `exit(1)` does not constitute throwing an error? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Also, what version of the SDK are you using? I think there was an issue a couple versions back with our JS CLI where it wouldn't throw errors properly on failure, which should be resolved now.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@michaelxbarrett Were you able to address this by updating? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Since I haven't heard back in 3 weeks, I'm going to close this out. @michaelxbarrett Please reopen if you're still experiencing problems. Anyone else with similar problems, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Query watcher not being called when cache is updated on an element of a collection that is added after calling watch","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"},"body":"Hi everyone,\r\n\r\nI've been trying a lot of things on that one and wasn't able to find a way to fix my problem. So in my app I'm having a list of conversations, so I'm creating a `watch` on a query that returns the list of conversations, this is something like that:\r\n\r\n```\r\nuser {\r\n    uuid\r\n    firstName\r\n    lastName\r\n    conversations {\r\n        uuid\r\n        unreadMessagesCount\r\n    }\r\n}\r\n```\r\n\r\n> In the app we use the `uuid` key to handle cache, so we make sure to always pass `uuid` in our queries to automatically handle cache update.\r\n\r\nSo the role of the watcher I'm talking about is both to update existing conversations and also be able to catch when a new conversation is created (it can happen and not be initiated by the user, we then trigger an event from the backend that is listen from a subscription in the app). When this event happens it returns something like that\r\n\r\n```\r\nevent {\r\n     newConversation {\r\n          conversation {\r\n               uuid\r\n               unreadMessagesCount\r\n               // This is the part that adds the new conversation to the existing ones of the users in the cache\r\n               user {\r\n                    uuid\r\n                    conversations {\r\n                          uuid\r\n                          unreadMessagesCount\r\n                    }\r\n               } \r\n          }\r\n     }\r\n}\r\n```\r\n\r\nIt works great, meaning that when this event happens, the watcher is being called with the newly created conversation, but the issue is that any new cache update for that specific conversation doesn't trigger the watcher again.\r\n\r\nAfter investigating a bit, I realised that the cache is being updated because if I'm adding 3 new messages into the new conversation (setting the `unreadMessagesCount` to 3), the watcher doesn't get called but then if I add 1 new message into an old one, the watcher is being called with both the new message on the old conversation and the 3 new on the new one. \r\n\r\nSo it really seems like `watch` is not being called again for changes on an item that wasn't in a collection when the `watch` was initially made. I've also take a look at https://github.com/apollographql/apollo-ios/issues/281 and making a `fetch` on the same query again after the event doesn't fix the issue.\r\n\r\nLet me know if I'm not clear on something as the whole thing is a bit complicated to explain.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! Can you take a look at v0.32.0 - I fixed something in query watchers in terms of updating dependent keys that I *think* should help with this. If it doesn't, let me know. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hey @designatednerd \r\n\r\nSure, if #1377 is resolved too I will be able to test that tomorrow. If that's not the case I guess I won't be able","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"Hey @designatednerd \r\n\r\nI tested and I can confirm 0.32.0 fixes the issue, thank you very much for your help.","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"Reopening this one as the bug seems to be back with 0.34.0 :/ Let me know if you need help on my side","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"@designatednerd I haven't tested 0.33.0 so I'm not sure when the regression happened","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"That's odd, because the test added is passing - I actually spent quite a bit of time making it pass. 🙃 Do you mind opening a new issue with a link to this one since it's in a different version? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Sure","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}}]}},{"__typename":"Issue","title":"Availability of framework with Xcode 12 and iOS version 8","author":{"__typename":"User","login":"novinfard","id":"MDQ6VXNlcjYxMTYwNw==","name":"Soheil Novinfard"},"body":"Is it possible to use the framework with Xcode 12 and iOS version 8? Currently it asks me to upgrade to iOS version 9 with Xcode 12","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"iOS 9 is our minimum supported version regardless of Xcode version. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@novinfard Any further questions or do you mind if I close this issue out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Crash while checking graphQLResult with 0.32 and 0.32.1","author":{"__typename":"User","login":"jsm174","id":"MDQ6VXNlcjExOTcxMzc=","name":"Jason Millard"},"body":"Hello. Yesterday I upgraded to 0.32 and immediately started getting crashes anytime one of our services is checking a `graphQLResult`:\r\n\r\n```\r\ncase let .success(graphQLResult):\r\n```\r\n\r\nI downgraded to 0.31 and it started working again. I saw that 0.32.1 was released and figured I'd give it a try, but I'm seeing the same behavior.\r\n\r\nI know this isn't much to go on, but:\r\n\r\n![Screen Shot 2020-09-11 at 9 36 16 AM](https://user-images.githubusercontent.com/1197137/92932578-14476280-f413-11ea-9b8a-02df220cfcfd.png)\r\n\r\n(FWIW, that first preflight is just refreshing oauth tokens if necessary)\r\n\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"So, I apologize but I think it is working after all. \r\n\r\nI think maybe after I did a pod update, it never actually rebuilt apollo.\r\n\r\nI will close this. ","author":{"__typename":"User","login":"jsm174","id":"MDQ6VXNlcjExOTcxMzc=","name":"Jason Millard"}},{"__typename":"IssueComment","body":"No worries, that can definitely happen. Thanks for the update!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"codegen produces Swift code that doesn't compile","author":{"__typename":"User","login":"rlimberger","id":"MDQ6VXNlcjQ4NDEyNDI=","name":"Rene Limberger"},"body":"My scheme defines a GQL query named ```shipmentETAs``` and a type ```shipmentETA```. Codegen generates Swift code which incorrectly changes parts of the query and type name to lowercase. As a result, the Swift code generated by codegen doesn't compile.\r\n\r\nSchema:\r\n```\r\n         {\r\n            \"name\": \"shipmentETAs\",\r\n            \"description\": \"\",\r\n            \"args\": [\r\n              {\r\n                \"name\": \"params\",\r\n                \"description\": \"\",\r\n                \"type\": {\r\n                  \"kind\": \"NON_NULL\",\r\n                  \"name\": null,\r\n                  \"ofType\": {\r\n                    \"kind\": \"INPUT_OBJECT\",\r\n                    \"name\": \"QueryShipmentETAParams\",\r\n                    \"ofType\": null\r\n                  }\r\n                },\r\n                \"defaultValue\": null\r\n              }\r\n            ],\r\n            \"type\": {\r\n              \"kind\": \"NON_NULL\",\r\n              \"name\": null,\r\n              \"ofType\": {\r\n                \"kind\": \"LIST\",\r\n                \"name\": null,\r\n                \"ofType\": {\r\n                  \"kind\": \"OBJECT\",\r\n                  \"name\": \"ShipmentETA\",\r\n                  \"ofType\": null\r\n                }\r\n              }\r\n            },\r\n            \"isDeprecated\": false,\r\n            \"deprecationReason\": null\r\n          }\r\n```\r\n\r\nResulting  Swift code:\r\n```\r\n    public var shipmentEtAs: [ShipmentEta?] {\r\n      get {\r\n        return (resultMap[\"shipmentETAs\"] as! [ResultMap?]).map { (value: ResultMap?) -> ShipmentEtA? in value.flatMap { (value: ResultMap) -> ShipmentEtA in ShipmentEtA(unsafeResultMap: value) } }\r\n      }\r\n      set {\r\n        resultMap.updateValue(newValue.map { (value: ShipmentEtA?) -> ResultMap? in value.flatMap { (value: ShipmentEtA) -> ResultMap in value.resultMap } }, forKey: \"shipmentETAs\")\r\n      }\r\n    }\r\n\r\npublic struct ShipmentEta: GraphQLSelectionSet {\r\n...\r\n```\r\n\r\nCompiler error:\r\n`Cannot find type 'ShipmentEtA' in scope`\r\n\r\nSwift 5.3\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Urgh, this is one of the things I'm working on getting rid of with Swift Codegen - this is all handled under the hood in the Typescript codegen in a way that's really, really opaque. Unfortunately for now the only real way to work around it is to alias the name of the field to not have multiple uppercase characters in a row. \r\n\r\nI don't know your schema but here's a general stab at what I think an updated query would look like: \r\n\r\n```query\r\nquery ShipmentArrives($id: ID!) {\r\n    shipment(id: $id) {\r\n       id\r\n       shipmentETA: shipmentEstimate\r\n   }\r\n}\r\n```\r\n\r\nLet me know if that works!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks so much @designatednerd ! The alias worked! \r\n```\r\nquery ShipmentEstimates($siteId: ID!) {\r\n  shipmentEstimates: shipmentETAs(params: {siteId: $siteId}) {\r\n    ...\r\n  }\r\n}\r\n```","author":{"__typename":"User","login":"rlimberger","id":"MDQ6VXNlcjQ4NDEyNDI=","name":"Rene Limberger"}},{"__typename":"IssueComment","body":"Woot! Mind if we close this out - I'm already tracking the casing stuff in other tickets. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Fix Apple Silicon on Xcode 12 GM","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"},"body":"Related to #1280. In testing for the Xcode 12 GM everything's working swimmingly via my Intel mac but the DTK is throwing fits that I can't seem to solve at the moment, mostly related to `unable to load standard library` issues. ","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"OK well it turns out I am both less dumb than I originally thought for not being able to get this to work, _and_ dumber than I thought for not realizing I shouldn't download the GM on the DTK. \r\n\r\nThe Apple Silicon stuff was not included with the GM since that ships to the public, and AS stuff should still be using the beta track (still Xcode 12b6 for now, probably a 12.1 beta sometime soon). \r\n\r\nClosing this out since everything still works on the most recent version of Xcode to support Apple Silicon, 12.0b6. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Apollo 0.33.0 + Xcode 11.7. Use of unknown directive '#filePath'.","author":{"__typename":"User","login":"Hazeaze","id":"MDQ6VXNlcjgzNTE4NzQ=","name":null},"body":"Hi.\r\nI use SPM for the third-party libraries, updated Apollo from 0.32.1 to 0.33.0, and on the app build, I faced with the problem in the `FileFinder.swift`, where received an error `Use of unknown directive '#filePath'`.\r\n\r\n![image](https://user-images.githubusercontent.com/8351874/93308812-91fcdb00-f824-11ea-9050-275be2b39282.png)\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I got the same error","author":{"__typename":"User","login":"Parilar","id":"MDQ6VXNlcjgxNTk2NDY=","name":"Lars Hallek"}},{"__typename":"IssueComment","body":"`#filePath` is new in Swift 5.3, which ships with Xcode 12. You will need to use Xcode 12 for versions `0.33.0` and higher.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'm going to close this out since this is intended behavior. Enjoy Xcode 12!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Exclude Apollo Playground from the main project file to make Carthage faster","author":{"__typename":"User","login":"manicmaniac","id":"MDQ6VXNlcjE2NzIzOTM=","name":"Ryosuke Ito"},"body":"Apollo Playground, which introduced in Apollo 0.33.0 as [a scheme in Apollo.xcoderpoj](https://github.com/apollographql/apollo-ios/blob/0.33.0/Apollo.xcodeproj/xcshareddata/xcschemes/Apollo%20Playground.xcscheme), makes Carthage build slower, and to make matters worse, building Apollo Playground fails in Xcode older than 12 (https://github.com/apollographql/apollo-ios/issues/1391).\r\n\r\nI guess most Apollo users don't want to build Apollo Playground at the time they install dependencies.\r\nHowever, Carthage doesn't provide a convenient way to exclude a specific scheme as discussed in https://github.com/Carthage/Carthage/issues/2529.\r\n\r\nSo to solve this problem, could you exclude Apollo Playground scheme from Apollo.xcodeproj and move it to another xcodeproj or another repo?\r\n\r\n```sh\r\n$ carthage bootstrap --platform iOS --no-use-binaries --cache-builds\r\n*** Checking out ApolloDeveloperKit at \"ce9fd3e1c75c074ae77632a8fe21be635219401b\"\r\n*** Checking out apollo-ios at \"0.33.0\"\r\n*** No cache found for apollo-ios, building with all downstream dependencies\r\n*** xcodebuild output can be found in /var/folders/tm/wy8sj46s6yq4rlfgsxyvd1l80000gn/T/carthage-xcodebuild.Plidos.log\r\n*** Building scheme \"Apollo\" in Apollo.xcodeproj\r\n*** Building scheme \"ApolloCore\" in Apollo.xcodeproj\r\n*** Building scheme \"Apollo Playground\" in Apollo.xcodeproj\r\nld Failed\r\n        Task failed with exit code 65:\r\n        /usr/bin/xcrun xcodebuild -project /Users/manicmaniac/Projects/manicmaniac/ApolloDeveloperKit/InstallTests/Carthage/Checkouts/apollo-ios/Apollo.xcodeproj -scheme Apollo\\ Playground -configuration Release -derivedDataPath /Users/manicmaniac/Library/Caches/org.carthage.CarthageKit/DerivedData/11.5_11E608c/apollo-ios/0.33.0 -sdk iphoneos ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/tm/wy8sj46s6yq4rlfgsxyvd1l80000gn/T/apollo-ios SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO STRIP_INSTALLED_PRODUCT=NO (launched in /Users/manicmaniac/Projects/manicmaniac/ApolloDeveloperKit/InstallTests/Carthage/Checkouts/apollo-ios)\r\n\r\nThis usually indicates that project itself failed to compile. Please check the xcodebuild log for more details: /var/folders/tm/wy8sj46s6yq4rlfgsxyvd1l80000gn/T/carthage-xcodebuild.Plidos.log\r\nmake: *** [carthage] Error 1\r\n```","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Have you tried using the [`carthage-build-workaround` script outlined in the release notes?](https://github.com/apollographql/apollo-ios/releases/tag/0.33.0) There's some other nonsense going on with Carthage that I think may be causing the build failures rather than this scheme. \r\n\r\nAs for time reduction, the problem is that if that scheme isn't shared, the playgrounds won't build because it needs different sub-libraries than any of the other schemes. \r\n\r\nI can't for the life of me figure out why Carthage is so against excluding schemes. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> Have you tried using the carthage-build-workaround script outlined in the release notes?\r\n\r\nAh, my bad 😓 \r\nWith the workaround script and Xcode 12, I confirmed it works.\r\n\r\n```sh\r\n$ ./carthage-build-workaround.sh\r\n/tmp/static.xcconfig.hvN4SB\r\n*** Fetching apollo-ios\r\n*** Checking out apollo-ios at \"0.33.0\"\r\n*** xcodebuild output can be found in /var/folders/tm/wy8sj46s6yq4rlfgsxyvd1l80000gn/T/carthage-xcodebuild.6GUdYX.log\r\n*** Building scheme \"Apollo\" in Apollo.xcodeproj\r\n*** Building scheme \"ApolloCodegenLib\" in Apollo.xcodeproj\r\n*** Building scheme \"Apollo Playground\" in Apollo.xcodeproj\r\n*** Building scheme \"ApolloSQLite\" in Apollo.xcodeproj\r\n*** Building scheme \"ApolloCore\" in Apollo.xcodeproj\r\n*** Building scheme \"ApolloWebSocket\" in Apollo.xcodeproj\r\n```","author":{"__typename":"User","login":"manicmaniac","id":"MDQ6VXNlcjE2NzIzOTM=","name":"Ryosuke Ito"}},{"__typename":"IssueComment","body":"Cool - do you mind if we close this out with the answer as \"No\" for removing the `Apollo Playground` scheme? I understand it's inconvenient, but it's not inconvenient that often. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Yes, let me close this issue and thank you very much for your support 👍 ","author":{"__typename":"User","login":"manicmaniac","id":"MDQ6VXNlcjE2NzIzOTM=","name":"Ryosuke Ito"}}]}},{"__typename":"Issue","title":"Looking for recommendation for Pagination + Watching flow","author":{"__typename":"User","login":"bharath2020","id":"MDQ6VXNlcjkwMzUzNg==","name":null},"body":"_(Have this question [posted ](https://spectrum.chat/apollo/apollo-ios/looking-for-recommendation-to-perform-pagination-watch-in-ios-and-android-clients~a15afb8b-21fb-49a6-a80c-dd2ef097c8ad) in Spectrum chat as well, Adding here for better reach. Apologize for noise.)_\r\n\r\n# Problem\r\n\r\nWe have done some experiments in adopting pagination and encountered a few issues. I am looking for a recommendation on how to extract paginated results that do achieve two of my main goals. For the context, we have a mobile application that has screens that show paginated content that allows infinite vertical scrolling.\r\n\r\n1. Perform pagination in a responsible manner without any lag on the UI\r\n2. Ability to watch any changes to the items retrieved across all pages\r\n\r\nFor example, assume the following schema\r\n\r\n```\r\ntype PageResult {\r\n   cursor: String\r\n   hasMore: Bool\r\n   items: [String]\r\n}\r\nquery {\r\n   getItems(cursor: String): PageResult\r\n}\r\n```\r\n\r\nHere are the approaches we tried:\r\n\r\n## Approach 1: Follow the suggestion as per the [Apollo iOS tutorial blog](https://www.apollographql.com/docs/ios/tutorial/tutorial-pagination/)\r\n\r\n1. Load the first page with no cursor with cache policy that writes data back to the cache\r\n2. Load the second page with the cursor and follow the same for the next pages with cache policy that writes data back to the cache\r\n\r\n### Issues with Approach 1\r\n\r\n#### 1. Zombie records:\r\n\r\nFollowing the query path approach to generate cache key, the First page will be written under cache key \"QUERY\\_ROOT.getPage-cursor\", while subsequent pages will hold the items under the cache key \"QUERY\\_ROOT.getItems-cursor-page2cursor\", \"QUERY\\_ROOT.getItems-cursor-page3cursor\", and so on..\r\n\r\nIn our case, The page cursors are generated run time and only valid until the first page is refreshed again to get a new cursor. Following this approach, We notice that all the pages that were previously fetched will never be deleted after re-fetching the first page and hence get accumulated as the user fetches more pages and re-fetches leading to larger cache size over time. Not to mention the more number of records, the higher the read time.\r\n\r\n#### 2. Cannot watch updates to items from the second page onwards:\r\n\r\nWe want to set up a GraphQLQueryWatcher on the paginated query, such that any changes to the items, including items from all the pages retrieved so far. However, Looking at the implementation of the GraphQLQueryWatcher, it appears that with this approach, Watcher will notify only for the items returned from the first page since dependent keys for the watcher includes only keys from the first page.\r\n\r\n## Approach 2: Manually merge data from subsequent pages into the first page\r\n\r\nIn order to solve the Approach #1 Issue #2, We took inspiration from [Apollo react Pagination](https://www.apollographql.com/docs/react/data/pagination/#cursor-based) which does the following:\r\n\r\n1. Load the first page with no cursor with cache policy that writes data back to the cache\r\n2. Load the second page, and so on, with `fetchIgnoringCacheCompletely` cache policy and manually write the data into the First-page query.\r\n\r\n### Issues with Approach 2\r\n\r\n#### 1. Writes are slow\r\n\r\nAs we can notice in Step #2, we merge the previous page with data pulled from the next page and re-write the entire data back. As we fetch more pages, the write latency increases.\r\n\r\n#### 2 Latency of reading the first page exponentially increases\r\n\r\nSince we merge data from all pages into the first page, reading the first page exponentially increases based on the number of items present in the cache. This is more evident with queries that have an increasing number of attributes that are non-scalar data types in the query as the batch loader does round trip to the database for each attribute. With our sample of data, the read time for a query with medium complex schema has clocked 10 seconds to read 150 items on an iPhone XS device.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hey @bharath2020 - just a heads up that I'm bogged down at the moment but this is a *very* good question that I need to work on a better answer to (and that we should have a *way* better answer to overall for mobile), and I think messing around with the tutorial is probably a good place to start with it. And you are very correct that 10 seconds to read 150 items is 🤮. \r\n\r\nIn terms of what you can try while I'm digging out from under what I'm dealing with now, there's the `cacheKeyForObject` closure that you can use to generate a custom cache key. For most items you should be able to cache by ID, and that should avoid having to rewrite all the data if it's not necessary. \r\n\r\nI'm going to leave this open for the community to respond more - I know this has been done well, but my knowledge of details isn't there because I'm focused on other parts of the SDK at the moment. \r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks, @designatednerd for the response.\r\n\r\n> For most items you should be able to cache by ID, and that should avoid having to rewrite all the data if it's not necessary.\r\n\r\nInteresting. In approach #2, Given that I am appending items from `morePage` back to `firstPage` and issuing a re-write of data for the first-page query, I am curious how would the store understand to not overwrite data referencing items in the first page? In other words, I understand `cacheKeyForObject` would reduce the number of records written to the database, but even with normalized cache, there would be unnecessary overwrites (in this case the items in the first page) that would add to the write latency. Please correct me If I am wrong.\r\n\r\nP.S. I have cacheKeyForObject enabled in my sample, and timings were taken after. The only part where I would not be able to generate a cache key is for the `PageResult` type, as `cacheKeyForObject` does not expose the variables (or field arguments) used to generate the type, in this case, it is the `cursor` provided for `getItems(cursor:)` query.","author":{"__typename":"User","login":"bharath2020","id":"MDQ6VXNlcjkwMzUzNg==","name":null}},{"__typename":"IssueComment","body":"Again, my knowledge of the cache is not as deep as it should be, but my understanding is you'd be rewriting the references with IDs rather than the entire object and its entire tree of changes. This almost certainly has some unnecessary work, but it would likely constitute a lot *less* unnecessary work than without the `cacheKeyForObject`. \r\n\r\nAnd again, this is not working as well as we want it to. We have some changes to the cache slated for [phases 2 and 3 of the ongoing Swift codegen rewrite](https://github.com/apollographql/apollo-ios/issues/939), and making things less annoying for pagination is one of the major things I want to do within that work. \r\n\r\nWish I had a better answer for you. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Got it. I played a little bit with batch reading objects from the database. I will give it a try to see if we can do the batch updates within a transaction. Right now, each roundtrip to the SQLite database is in its own transaction and I am guessing that is causing the reads to slow down. I have in the past read a huge number of items from SQLite and latency was fine.\r\n\r\nI will see if it makes any difference in the same and post it back.","author":{"__typename":"User","login":"bharath2020","id":"MDQ6VXNlcjkwMzUzNg==","name":null}},{"__typename":"IssueComment","body":"OK - do you mind if we close out this issue? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Ok","author":{"__typename":"User","login":"bharath2020","id":"MDQ6VXNlcjkwMzUzNg==","name":null}}]}},{"__typename":"Issue","title":"It expected a JSON schema introspection result, but got an HTML response instead.","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null},"body":"Hello,\r\n\r\nI am trying to run a script first time but i am receiving below error. \r\n\r\n**Unexpected token < in JSON at position 0\r\n    Error: Apollo tried to introspect a running GraphQL service at \r\n    http://10.10.10.10/graphql\r\n    It expected a JSON schema introspection result, but got an HTML response \r\n    instead.\r\n    You may need to add headers to your request or adjust your endpoint url.**\r\n\r\nHere is my Script\r\n\r\n       # Type a script or drag a script file from your workspace to insert its path.\r\n       # Go to the build root and search up the chain to find the Derived Data Path where the source packages are checked out.\r\n       DERIVED_DATA_CANDIDATE=\"${BUILD_ROOT}\"\r\n\r\n       while ! [ -d \"${DERIVED_DATA_CANDIDATE}/SourcePackages\" ]; do\r\n           if [ \"${DERIVED_DATA_CANDIDATE}\" = / ]; then\r\n           echo >&2 \"error: Unable to locate SourcePackages directory from BUILD_ROOT: '${BUILD_ROOT}'\"\r\n           exit 1\r\n        fi\r\n\r\n            DERIVED_DATA_CANDIDATE=\"$(dirname \"${DERIVED_DATA_CANDIDATE}\")\"\r\n           done\r\n\r\n            # Grab a reference to the directory where scripts are checked out\r\n            SCRIPT_PATH=\"${DERIVED_DATA_CANDIDATE}/SourcePackages/checkouts/apollo-ios/scripts\"\r\n\r\n             if [ -z \"${SCRIPT_PATH}\" ]; then\r\n                   echo >&2 \"error: Couldn't find the CLI script in your checked out SPM packages; make sure to add the framework           to your project.\"\r\n                   exit 1\r\n             fi\r\n\r\n            #cd \"${SRCROOT}/${TARGET_NAME}\"\r\n            #\"${SCRIPT_PATH}\"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./**/*.graphql --localSchemaFile=\"schema.json\" API.swift\r\n\r\n            SCRIPT_PATH=\"${PODS_ROOT}/Apollo/scripts\"\r\n            cd \"${SRCROOT}/${TARGET_NAME}\"\r\n           \"${SCRIPT_PATH}\"/run-bundled-codegen.sh schema:download --endpoint=http://<serverURL>/graphql schema.json\r\n\r\nXCode Version : 11.3.1\r\nApollo : 0.24.1\r\nInstalled Apollo pod.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi, it looks like the endpoint hasn't had the `<serverURL>` placeholder replaced yet - the `http:///graphql` in your error message makes it look like that's just being stripped out entirely by the CLI. \r\n\r\nUnrelated to your immediate issue, I would strongly recommend running `schema:download` before running `codegen:generate` since codegen uses the result of downloading the schema. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"As of now i am trying to download schema.json from CLI with the following command.\r\n\r\n`apollo schema:download --endpoint=http://<my server url>/graphql schema.json\r\n`\r\n\r\nBut still i am getting the same error. I didnt get <serverurl> placeholder (in your comment, can you please clarify)\r\n\r\nI have updated my question where i written down a dummy server url","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null}},{"__typename":"IssueComment","body":"Hey I am able to download schema.json file from other public graphql url.\r\n\r\nBut now i am facing another error. I am using POD for apollo now.\r\n\r\nRun Script : \r\n\r\n`SCRIPT_PATH=\"${PODS_ROOT}/Apollo/scripts\"\r\ncd \"${SRCROOT}/${TARGET_NAME}\"\r\n\"${SCRIPT_PATH}\"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./**/*.graphql --localSchemaFile=\"schema.json\" API.swift\r\n`\r\n\r\nError :\r\n\r\nLoading Apollo Project [started]\r\nLoading Apollo Project [completed]\r\nGenerating query files [started]\r\nGenerating query files with 'swift' target [title changed]\r\nGenerating query files with 'swift' target [failed]\r\n→ Apollo does not support anonymous operations\r\n    GraphQLError: Apollo does not support anonymous operations\r\nCommand PhaseScriptExecution failed with a nonzero exit code\r\n\r\n\r\nIf its not legal then can i raise new issue with this error and close this one","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null}},{"__typename":"IssueComment","body":"You need to make sure you give your query a name - otherwise the codegen won't know what name to give the class containing the query. \r\n\r\nSo it has to look like this: \r\n\r\n```graphql\r\nFetchUser($id: ID!) {\r\n  user(id: $id) {\r\n     name\r\n     [etc]\r\n  }\r\n}\r\n```\r\n\r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks.. this works.","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null}},{"__typename":"IssueComment","body":"Hello, \r\n\r\nI am receiving this error right now.\r\n\r\nERROR : Received error response: Field \"country\" argument \"code\" of type \"ID!\" is required, but it was not provided.\r\n\r\nGraphQL : https://countries.trevorblades.com/graphql\r\n\r\nQuery : \r\n\r\n         query AllCountry {\r\n              country {\r\n                    name\r\n              }\r\n           }\r\n\r\niOS Swift Code : \r\n\r\n        NetworkClient.sharedInstance().apollo.fetch(query: AllCountryQuery()) { result in\r\n            \r\n            switch result {\r\n            case .success(let GraphQLResult) :\r\n                print(GraphQLResult.data?.country as Any)\r\n                \r\n            \r\n            \r\n            case .failure(let error) :\r\n                print(\"ERROR :\", error.localizedDescription)\r\n        }\r\n        }\r\n","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null}},{"__typename":"IssueComment","body":"I think the error is telling you exactly what the problem is: `Field \"country\" argument \"code\" of type \"ID!\" is required, but it was not provided.`  You need to make sure you're passing in a country code for this query.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Fixed. Thanks","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null}}]}},{"__typename":"Issue","title":"Swift Package Manager + Xcode 12.0:  Target 'arm64-apple-ios-simulator' missing","author":{"__typename":"User","login":"jzeisweiss","id":"MDQ6VXNlcjQyNjEyNTg=","name":"Jimmy Zeisweiss"},"body":"Hello,\r\n\r\nI can no longer use \"Preview\" for SwiftUI or build to a simulator due to the following error.:\r\n\r\n```\r\nerror: could not find module 'Apollo' for target 'arm64-apple-ios-simulator'; found: x86_64-apple-ios-simulator, x86_64\r\nimport Apollo\r\n```\r\n**Xcode Version**: 12.0 (12A7209)\r\n**Apollo Version**: 33.0\r\n\r\n_Note: I am having no problem building to a device._","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"@jzeisweiss Hi, what package manager are you using? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd - Hey Ellen, I am using Swift Package Manager.","author":{"__typename":"User","login":"jzeisweiss","id":"MDQ6VXNlcjQyNjEyNTg=","name":"Jimmy Zeisweiss"}},{"__typename":"IssueComment","body":"Are you using it on the Developer Transition Kit (I ask since it's looking for the `arm64-apple-ios-simulator` slice)? They took all the Apple Silicon stuff out of 12.0 and put it back in the 12.2 beta, so you'd need to use that if you are. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I am not using the Silicon ARM-Based prototype Mac from the Developer Transition Kit. I am using a 2018 Mac Mini and a 2018 MacBook Pro. However, I did find a workaround. I went in and changed the project settings to:\r\n\"Build Settings\" > \"Build Active Architecture Only\" > Set to \"YES\". This fixed my issue and I can now see the SwiftUI previews as well as build to simulators. Thank you for the speedy responses!\r\n\r\n**Source**: https://stackoverflow.com/questions/56957632/could-not-find-module-for-target-x86-64-apple-ios-simulator","author":{"__typename":"User","login":"jzeisweiss","id":"MDQ6VXNlcjQyNjEyNTg=","name":"Jimmy Zeisweiss"}},{"__typename":"IssueComment","body":"Ah yeah, that'll do it for sure - thank you for sharing your fix! Do you mind if we close this issue out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Networking Beta: Convenience constructors for HTTPRequest and JSONRequest","author":{"__typename":"User","login":"knox","id":"MDQ6VXNlcjE2NDAx","name":"Mickey"},"body":"In my use case i have to append to the `URLRequest.query` before a request is actually sent and that was fairly straight forward with the old network stack using `HTTPNetworkTransportPreflightDelegate.networkTransport(_:willSend:)` \r\n\r\nWith the new network stack things have gotten a bit more complex but i was able to come up with a solution involving a custom `ApolloInterceptor` that turns a given `JSONRequest` into a custom subclass which overrides `toURLRequest()`.\r\n\r\nSo to make implementation of custom HTTPRequests more easy i suggest you to add some convenience constructors for `HTTPRequest` and `JSONRequest` that take a single argument of their own type. This would let me get rid of this bunch of constructor arguments like this:\r\n\r\n```\r\n        let customRequest = CustomJSONRequest<Operation>(jsonRequest)\r\n```\r\n\r\ninstead of this:\r\n```        \r\n        let customRequest = CustomJSONRequest<Operation>(\r\n                operation: jsonRequest.operation,\r\n                graphQLEndpoint: jsonRequest.graphQLEndpoint,\r\n                contextIdentifier: jsonRequest.contextIdentifier,\r\n                clientName: jsonRequest.additionalHeaders[\"apollographql-client-name\"] ?? \"\",\r\n                clientVersion: jsonRequest.additionalHeaders[\"apollographql-client-version\"] ?? \"\",\r\n                additionalHeaders: jsonRequest.additionalHeaders,\r\n                cachePolicy: jsonRequest.cachePolicy,\r\n                autoPersistQueries: jsonRequest.autoPersistQueries,\r\n                useGETForQueries: jsonRequest.useGETForQueries,\r\n                useGETForPersistedQueryRetry: jsonRequest.useGETForPersistedQueryRetry,\r\n                requestCreator: jsonRequest.requestCreator\r\n                )\r\n```","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"The override is the correct way of doing this - I'm not quite clear why the `super init`, which has a bunch of default parameters, isn't the way you're doing this, though. Can you go into a bit more detail on that? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"When looking for a way to get my `CustomHTTPRequest` with its overriden `toURLRequest()` into place i learned about the concept of `ApolloInterceptor` in the new network stack architecture.\r\n\r\nTherefore i have implemented a custom interceptor to replace the original `HTTPRequest` instance with one of `CustomHTTPRequest` as a substitution. Basically what i'm trying to do here is to create a copy of the request _with whatever particular values its properties have_ but extend its original functionality.\r\n\r\nIf there is something i have misunderstood or a better approach to achive this i'm glad to get enlighted.","author":{"__typename":"User","login":"knox","id":"MDQ6VXNlcjE2NDAx","name":"Mickey"}},{"__typename":"IssueComment","body":"OK! I think I see what the problem is here: While the `RequestChain` can take an arbitrary subclass of `HTTPRequest`, there's no way to say \"You should use this specific subclass\" from the level of the `RequestChainNetworkTransport`, so as of right now you're having to recreate the request at the interceptor level. \r\n\r\nIt sounds like the issue is that there needs to be a way to specify the request type that's customizable at that level, so that you can actually use the custom type you've created. \r\n\r\nDoes that sound accurate? I'm gonna poke at some ideas on this. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Indeed, if subclassing `HTTPRequest` is the intended way to go, a more simple way to place that type into the processing is greatly appreciated.","author":{"__typename":"User","login":"knox","id":"MDQ6VXNlcjE2NDAx","name":"Mickey"}},{"__typename":"IssueComment","body":"@knox Please see #1405 . You may have opened a trapdoor to a bigger change but it's a good one 😄 ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Wow i didn't mean to ask for moving mountains but opening `RequestChainNetworkTransport` and `constructRequest(for:cachePolicy:contextIdentifier:)` seems to perfectly fit my needs.","author":{"__typename":"User","login":"knox","id":"MDQ6VXNlcjE2NDAx","name":"Mickey"}},{"__typename":"IssueComment","body":"Haha, this worked as designed: You pointed out that I hadn't provided an access point to something, so I added it. Then by adding it I realized something else that was annoying me could change. 😇","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"With 0.34.0-rc.2 i was able to implement a clean and simple solution to my use case.","author":{"__typename":"User","login":"knox","id":"MDQ6VXNlcjE2NDAx","name":"Mickey"}}]}},{"__typename":"Issue","title":"Download Schema.json but server has CSRF Token protection","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null},"body":"Hello,\r\n\r\nI want to download a schema.json file but our server is protected with CSRF Token so which command i need to use to download a schema file and how can i send --header with CSRF token (From where i can get CSRF token means from our server guy or is apollo-client give/generate for downloading schema & passing in --header) ","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! Please check out the instructions for [doing this in Bash](https://www.apollographql.com/docs/ios/downloading-schema/) and/or [doing this with the Swift Scripting tools](https://www.apollographql.com/docs/ios/swift-scripting/#downloading-a-schema). Do those docs answer your questions? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hi! Since this is pretty clearly documented and I haven't heard anything back in a week, I'm going to close this out - @tapannathvani if you're still having problems please reopen. Anyone else having similar problems, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"is apollo provide internet check class?","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null},"body":"I am trying to check internet connection in my project.. and looking in apollo-ios library also like if you guys providing any reachability type class so without adding any other library or framework i can use your class to check connection\r\n\r\nIf yes then please provide documentation link and if not then please let me know how can i achieve this? and can i check internet connectivity in HTTPNetworkTransportPreflightDelegate (will send) method or in should send method? ","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"We do not provide an internet check class, nor do we have plans to do so. \r\n\r\nIf you're using iOS 12 and above, the recommend way of doing things is [using `NWPathMonitor`](https://medium.com/@rwbutler/nwpathmonitor-the-new-reachability-de101a5a8835). If you're storing the most recent result from `NWPathMonitor` the preflight delegate would be a reasonable place to check it. \r\n\r\nPlease note that the Preflight delegate will be going away with `0.34.0` - you can check out the updated networking beta in #1386, and the PR has links to updated documentation. It would probably be fairly easy to add an interceptor that does that network check in the new networking stack. \r\n\r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Can we know when can we have 0.34.0?","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null}},{"__typename":"IssueComment","body":"Release candidate 2 is available now, gonna let it bake over the weekend and put it out monday night (US-Central time) if I don't hear any major showstoppers.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks for the quick response.","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null}}]}},{"__typename":"Issue","title":"No such file or directory: run-bundled-codegen.sh","author":{"__typename":"User","login":"angelu25","id":"MDQ6VXNlcjYzMDgxMjA=","name":null},"body":"I imported via cocoa pods the Apollo, actually it installed 0.30. \r\n\r\nI added exactly the same script as here:\r\nhttps://www.apollographql.com/docs/ios/installation/#troubleshooting \r\nschema.json is under project folder, under the target folder name.\r\nBut I keep receiving:\r\n![image](https://user-images.githubusercontent.com/6308120/94440933-75588f80-01a2-11eb-8095-c1d6862880b1.png)\r\nActually there is no data on SourcePackages folder about Apollo scripts.\r\n\r\nCould you help me?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi, it looks like you're using the Swift Package Manager run script rather than the CocoaPods run script [outlined in this step of the setup instructions](https://www.apollographql.com/docs/ios/installation/#adding-a-code-generation-build-step), because the CocoaPods script should be looking in `Pods/apollo-ios/scripts` rather than doing the weird dance of diving through derived data that the SPM script has to do.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"OMG!!! True. Wee can close the ticket!!!! ","author":{"__typename":"User","login":"angelu25","id":"MDQ6VXNlcjYzMDgxMjA=","name":null}}]}},{"__typename":"Issue","title":"How to inject HTTP headers before fetching a query","author":{"__typename":"User","login":"angelu25","id":"MDQ6VXNlcjYzMDgxMjA=","name":null},"body":"Do you know a mechanism to do that?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"This is covered in the [Advanced Client Creation](https://www.apollographql.com/docs/ios/initialization/) section of our docs. \r\n\r\nFair warning that this will be changing significantly very soon with the release of what's now in RC for #1386 (which I'm hoping to release tonight). The PR has a link to the updated docs for advanced client creation as well. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Error not parsed","author":{"__typename":"User","login":"angelu25","id":"MDQ6VXNlcjYzMDgxMjA=","name":null},"body":"Hi,\r\n\r\nI have a GraphQL which is returning the following:\r\n![image](https://user-images.githubusercontent.com/6308120/94543867-da67c000-024a-11eb-803f-e76731c18064.png)\r\nBut the generated code is not parsing the error, but just giving data:\r\n![image](https://user-images.githubusercontent.com/6308120/94543972-fa977f00-024a-11eb-8689-7fa93a3d05f9.png)\r\nCould you help to identify how to get the errors?\r\n\r\n\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Weird - that does look like properly formatted JSON for the error - can you confirm what version of the SDK, Xcode, and Swift you're using here? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"SDK 0.33.0\r\nXcode 11.5 \r\nSwift 5","author":{"__typename":"User","login":"angelu25","id":"MDQ6VXNlcjYzMDgxMjA=","name":null}},{"__typename":"IssueComment","body":"I've got no idea why that's not parsing the error - I put a test together and this is passing (different `\"data\"` key name since I'm using a local type for this test): \r\n\r\n```swift\r\nfunc testGH1415() throws {\r\n    let json = \"\"\"\r\n{\r\n  \"data\": {\r\n    \"hero\": null\r\n  },\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"Exception while fetching data (lastViewedProducts) : Customer not logged in\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 2,\r\n          \"column\": 3\r\n        }\r\n      ],\r\n      \"path\": [\r\n        \"lastViewedProducts\"\r\n      ],\r\n      \"extensions\": {}\r\n    }\r\n  ]\r\n}\r\n\"\"\"\r\n    let data = try XCTUnwrap(json.data(using: .utf8),\r\n                             \"Couldn't create json data\")\r\n    \r\n    let deserialized = try JSONSerializationFormat.deserialize(data: data)\r\n    let jsonObject = try XCTUnwrap(deserialized as? JSONObject)\r\n    let response = GraphQLResponse(operation: HeroNameQuery(), body: jsonObject)\r\n    \r\n    let result = try response.parseResultFast()\r\n    XCTAssertNil(result.data)\r\n    XCTAssertNotNil(result.errors)\r\n    \r\n    let error = try XCTUnwrap(result.errors?.first)\r\n    XCTAssertEqual(error.message, \"Exception while fetching data (lastViewedProducts) : Customer not logged in\")\r\n    XCTAssertEqual(error.locations, [\r\n      GraphQLError.Location(line: 2, column: 3),\r\n    ])\r\n    XCTAssertNotNil(error.extensions)\r\n}\r\n```","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Overwrite whole cache after fetch.","author":{"__typename":"User","login":"pgawlowski","id":"MDQ6VXNlcjk4NDUwMjQ=","name":null},"body":"Hello again.\r\n\r\nMy application is trying to archive offline first mode.\r\nWe are using BigQuery to fetch all the data required for app to be usable and focus on offline cache mutations with custom made syc feature. \r\n\r\nThe problem is that after synchronization we are trying to refresh whole cache data. Some of our tasks can fail, most will be successful.\r\nTo avoid too much noise with cache handling, right after syc we are refetching BigQuery once again. \r\nAnd here is our problem. Mutations we performed in offline mode are still present, no matter the fact of success of failure during sync it is because backend is creating it's own unique ID's here and we are just generating UUID as a placeholder. The source of truth is server. So in case of BigQuery fetch I would like to totally teardown current cache and recreate it with BigQuery result.\r\n\r\nCalling clearCache before BigQuery seems to be a little bit risky. I mean there is a risk of loosing data if sth goes wrong with BigQuery.\r\n\r\nAny ideas how to handle?\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Oof, that's a tough one. This is part of why sync is so hard (and frankly why I have zero interest in handling it on our end). \r\n\r\nThe first thing that jumps to mind is making a second instance of whatever cache you're using, swapping in a store with that cache, and then putting the old one back if things fail. I won't say that won't be a giant pain, but off the top of my head that's at least something that will keep the old data in case your `BigQuery` fails. \r\n\r\nLike I said though, sync is really hard. I don't think there's going to be a simple, straightforward solution to this problem. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@pgawlowski Anything else I can help with here or do you mind if I close this out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Since I haven't heard back in a week, I'm going to close this out. @pgawlowski feel free to reopen if you have more questions - anyone else with similar problems, please open a separate issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Question about ApolloInterceptor","author":{"__typename":"User","login":"dchohfi","id":"MDQ6VXNlcjUwODYzNg==","name":"Diego Chohfi"},"body":"Hey, amazing rewrite of the http architecture, good naming and nice usage of open/close principles.\r\n\r\nJust one stuff, I'm not sure how many times the `interceptAsync` method gets called, as it receives both request and an option response, I think this will be called twice, I'm correct?\r\n\r\nIf this is correct, talking about an interceptor that adds authentication token to the request, might be better to check if we don't have the response yet? Should I only add the token if the response is nil?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Each interceptor is called once - they're called in sequence based on the order of the array passed in from the `InterceptorProvider`. So if you want to put a token in, you can probably just add the token adding interceptor to the beginning of that array. \r\n\r\nYou can see an example of this in the [updated tutorial here](https://www.apollographql.com/docs/ios/tutorial/tutorial-mutations/#add-authentication-handling).","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"So the interceptor isn't called before each request and after each response?","author":{"__typename":"User","login":"dchohfi","id":"MDQ6VXNlcjUwODYzNg==","name":"Diego Chohfi"}},{"__typename":"IssueComment","body":"Thank your for your response! Now I get it, sorry about that.","author":{"__typename":"User","login":"dchohfi","id":"MDQ6VXNlcjUwODYzNg==","name":"Diego Chohfi"}}]}},{"__typename":"Issue","title":"JSONRequest losing headers when useGETForQueries is true","author":{"__typename":"User","login":"dchohfi","id":"MDQ6VXNlcjUwODYzNg==","name":"Diego Chohfi"},"body":"## Bug report\r\n\r\nAfter migrating my project to the new version, I'm not able to use a service that has authentication via header.\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.34.0\r\n- Xcode version: 12.0.1\r\n- Swift version: 5.3\r\n\r\n## Steps to reproduce\r\n\r\nCreate an interceptor that adds a header to the request, the NetworkTransporter must have `useGETForQueries=true`.\r\n\r\n## Further details\r\n\r\nWhen the method `toURLRequest` gets called, the request gets recreated and all headers are lost, including the defaults added by apollo. After digging into the code, I found that the library is instantiating a new `URLRequest` instead of just changing the URL.\r\n\r\nhttps://github.com/apollographql/apollo-ios/blob/main/Sources/Apollo/JSONRequest.swift#L101","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I would love to send a PR to fix it, just want to confirm first if this is what is happening.","author":{"__typename":"User","login":"dchohfi","id":"MDQ6VXNlcjUwODYzNg==","name":"Diego Chohfi"}}]}},{"__typename":"Issue","title":"Massive API.swift file ","author":{"__typename":"User","login":"RomanTysiachnik","id":"MDQ6VXNlcjMxNjUyMjY1","name":"Roman Tysiachnik"},"body":"## Feature request\r\n\r\nGenerate each query, mutation, fragment and scalar type in a separate file.\r\n\r\n## Motivation\r\n\r\nWe use Apollo in production on a pretty large project.\r\nRight now our generated `API.swift` file is almost 10 Mb and it has 255,000+ lines of code.\r\nAfter we create a new query/mutation, the file may be overwritten completely, that it is impossible to understand anything in git. \r\nMoreover, Xcode freezes for about a minute when we try to open that single file.\r\n\r\n| Code | Git mess |\r\n| :--: | :--: | \r\n| <img width=\"277\" alt=\"Screen Shot 2020-09-30 at 15 14 18\" src=\"https://user-images.githubusercontent.com/31652265/94684097-3bb58f00-0330-11eb-8f22-b721077bf593.png\"> | <img width=\"165\" alt=\"Screen Shot 2020-09-30 at 15 20 13\" src=\"https://user-images.githubusercontent.com/31652265/94684302-8931fc00-0330-11eb-9565-d7ac6044e96f.png\"> |\r\n\r\n\r\n## Proposed solution\r\n\r\nAs far as all requests and types are public classes, it shouldn't be hard to put each of them in a separate file.\r\nAll those files can also be sorted in folders to make it much easier to navigate through the API.\r\nAPI ->\r\n--Scalars ->\r\n----Upload.swift\r\n--Fragments ->\r\n----UserFragment.swift\r\n--Queries ->\r\n----UserQuery.swift ->\r\n--Mutations ->\r\n----CreateUserMutation.swift\r\n\r\n#### Benefits\r\n\r\n- Each request/type in a separate file and it is easy to navigate among them;\r\n- No freezes when you accidentally open an API file and it freezes Xcode for minutes.\r\n- Only new updates of the API in source control. \r\n\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"If you provide a folder path instead of a file path to the generate command, it will do exactly this: a separate file for everything.","author":{"__typename":"User","login":"TizianoCoroneo","id":"MDQ6VXNlcjE1MzQwMzgy","name":"TizianoCoroneo"}},{"__typename":"IssueComment","body":"@TizianoCoroneo \r\n\r\nCould you share an example, please? ","author":{"__typename":"User","login":"RomanTysiachnik","id":"MDQ6VXNlcjMxNjUyMjY1","name":"Roman Tysiachnik"}},{"__typename":"IssueComment","body":"This is the script as is in [the docs](https://www.apollographql.com/docs/ios/installation/):\r\n```bash\r\n\"${SCRIPT_PATH}\"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./**/*.graphql --localSchemaFile=\"schema.json\" API.swift\r\n```\r\n\r\nIf you make a folder named `API` just next to your `API.swift` file, and then remove the `.swift` extension from the last argument of the script, it should work:\r\n```bash\r\n\"${SCRIPT_PATH}\"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./**/*.graphql --localSchemaFile=\"schema.json\" API/\r\n```","author":{"__typename":"User","login":"TizianoCoroneo","id":"MDQ6VXNlcjE1MzQwMzgy","name":"TizianoCoroneo"}},{"__typename":"IssueComment","body":"I'm using Swift scripting to generate API from this [doc](https://www.apollographql.com/docs/ios/swift-scripting/):\r\n```swift\r\nApolloCodegen.run(\r\n    from: queriesURL,\r\n    with: apolloCLIURL,\r\n    options: Options.codegen\r\n  )\r\n```\r\n\r\nAnd I couldn't find a way to get rid of that massive file.","author":{"__typename":"User","login":"RomanTysiachnik","id":"MDQ6VXNlcjMxNjUyMjY1","name":"Roman Tysiachnik"}},{"__typename":"IssueComment","body":"Ok. I guess I've managed how to handle that, there's another `init` that allows you to specify output format:\r\n\r\n```swift\r\nlet operationIDsURL = outputURL\r\n  .appendingPathComponent(\"operationIDs.json\")\r\n\r\nlet schemaURL = outputURL\r\n  .appendingPathComponent(\"schema.json\")\r\n\r\n ApolloCodegenOptions(\r\n    codegenEngine: .default,\r\n    operationIDsURL: operationIDsURL,\r\n    outputFormat: .multipleFiles(inFolderAtURL: outputURL),\r\n    urlToSchemaFile: schemaURL\r\n  )\r\n```\r\n\r\nClosing the issue :) ","author":{"__typename":"User","login":"RomanTysiachnik","id":"MDQ6VXNlcjMxNjUyMjY1","name":"Roman Tysiachnik"}},{"__typename":"IssueComment","body":"So, I'm noticing we're getting massive differences in file sizes from the generated output depending on if we use the `apollo codegen:generate` command through the NPM installed CLI vs. the **SwiftCodegenLib**.\r\n\r\nLike... one of our files is almost 20mb from **SwiftCodegenLib** but 224kb from the NPM CLI.\r\n\r\nWhat could be causing such as massive difference?","author":{"__typename":"User","login":"Mordil","id":"MDQ6VXNlcjM1MDY3NzY=","name":"Nathan Harris"}},{"__typename":"IssueComment","body":"I just compared the commands, and it looks like the default `mergeInFieldsFromFragmentSpreads: true` is the source of the \"bloat\".\r\n\r\nWhat is the cost/benefit of having that set to `true`, as it is by default?","author":{"__typename":"User","login":"Mordil","id":"MDQ6VXNlcjM1MDY3NzY=","name":"Nathan Harris"}},{"__typename":"IssueComment","body":"I'm very surprised to hear it's causing that big a jump. `mergeInFieldsFromFragmentSpreads` ensures that fields in spreads (the `...BlahFragment` operator) are actually on the returned object. It basically is the difference between calling `object.propertyFromFragment` and `object.fragment.propertyFromFragment` on literally everything, which can get REAL old. \r\n\r\n@Mordil you've got my email, can you send me before/after of your API.swift so i can validate assumptions? \r\n\r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"In our codebase adding the `mergeInFieldsFromFragmentSpreads` option causes 220k+ lines of code to appear, mostly:\r\n- getter/setters for each property in the fragment\r\n- memberwise initializers that are omitted if a type contains a fragment (I found this behavior quite surprising; I would prefer to always have `init`s for testing purposes)\r\n\r\n(I have to admit that we overuse fragments, and that's the main culprit.)\r\n\r\nMight be interesting to use [dynamic member lookup with keypaths](https://www.avanderlee.com/swift/dynamic-member-lookup/) to reduce code bloat, so that the enclosing type can refer dynamically to the properties of the enclosed fragment. I guess this road will be explored in the context of the new Swift Codegen though, right?","author":{"__typename":"User","login":"TizianoCoroneo","id":"MDQ6VXNlcjE1MzQwMzgy","name":"TizianoCoroneo"}},{"__typename":"IssueComment","body":"Yes. Also representing fragments as protocols means that you can have the properties straight on the object without duplication. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Query watcher not being called when cache is updated on an element by another query/subscription/mutation","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"},"body":"## Bug report\r\n\r\nQuery watcher not being called when cache is updated on an element of a collection that is added after calling watch\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.34.0\r\n- Xcode version: 12.0.1\r\n- Swift version: 5.3\r\n\r\n## Steps to reproduce\r\n\r\nI've been trying a lot of things on that one and wasn't able to find a way to fix my problem. So in my app I'm having a list of conversations, so I'm creating a `watch` on a query that returns the list of conversations, this is something like that:\r\n\r\n```\r\nuser {\r\n    uuid\r\n    firstName\r\n    lastName\r\n    conversations {\r\n        uuid\r\n        unreadMessagesCount\r\n    }\r\n}\r\n```\r\n\r\n> In the app we use the `uuid` key to handle cache, so we make sure to always pass `uuid` in our queries to automatically handle cache update.\r\n\r\nSo the role of the watcher I'm talking about is both to update existing conversations and also be able to catch when a new conversation is created (it can happen and not be initiated by the user, we then trigger an event from the backend that is listen from a subscription in the app). When this event happens it returns something like that\r\n\r\n```\r\nevent {\r\n     newConversation {\r\n          conversation {\r\n               uuid\r\n               unreadMessagesCount\r\n               // This is the part that adds the new conversation to the existing ones of the users in the cache\r\n               user {\r\n                    uuid\r\n                    conversations {\r\n                          uuid\r\n                          unreadMessagesCount\r\n                    }\r\n               } \r\n          }\r\n     }\r\n}\r\n```\r\n\r\nIt works great, meaning that when this event happens, the watcher is being called with the newly created conversation, but the issue is that any new cache update for that specific conversation doesn't trigger the watcher again.\r\n\r\nAfter investigating a bit, I realised that the cache is being updated because if I'm adding 3 new messages into the new conversation (setting the `unreadMessagesCount` to 3), the watcher doesn't get called but then if I add 1 new message into an old one, the watcher is being called with both the new message on the old conversation and the 3 new on the new one. \r\n\r\nSo it really seems like `watch` is not being called again for changes on an item that wasn't in a collection when the `watch` was initially made. I've also take a look at https://github.com/apollographql/apollo-ios/issues/281 and making a `fetch` on the same query again after the event doesn't fix the issue.\r\n\r\nLet me know if I'm not clear on something as the whole thing is a bit complicated to explain.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"To add more to this, I feel like this is not related to collections only. If you have 1 query that watches something, then another query/mutation updates this cache indirectly (not using the same query, but another query that contains the same element with the same `uuid`), it doesn't work.","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"Do you have any thoughts on why the test that was added would be passing, but what you're working with would not be working?","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'm afraid no, but all I can tell is that it works with 0.32.0 and not with 0.34.0","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"Hi @designatednerd,\r\n\r\nI think I have the same problem but not on a collection. My watcher is not triggered anymore since I have updated Apollo from 0.31.0 to 0.34.1. I have a watcher in cachePolicy .returnCacheDataAndFetch on this Query.\r\n\r\n```\r\nquery GetRide($rideId: ID!) {\r\n    ride(id: $rideId) {\r\n        ...EndRideFragment\r\n    }\r\n}\r\n```\r\n\r\nAnd I have a mutation that updates my cache and normally triggers my watcher.\r\n```\r\nmutation StopRide($input: StopActiveRideInput!) {\r\n    stopActiveRide(input: $input) {\r\n        ride {\r\n            ...EndRideFragment\r\n        }\r\n    }\r\n}\r\n```\r\nSince my Apollo pod upgrade, not working anymore. My watcher is not triggered when mutation payload updates my cache.","author":{"__typename":"User","login":"Narayane","id":"MDQ6VXNlcjQ5MjEzMDg=","name":"Sébastien BALARD"}},{"__typename":"IssueComment","body":"This is also occurring for me. 0.33.0 (non beta) worked; but not 0.34.0 or 0.34.1","author":{"__typename":"User","login":"dhritzkiv","id":"MDQ6VXNlcjEzNDk4NjU=","name":"Daniel Hritzkiv"}},{"__typename":"IssueComment","body":"@dhritzkiv That makes sense, the network stack and how it interacts with the cache changed completely in 0.34.0. \r\n\r\nApologies, I've been under the weather. I'm gonna do some digging starting tomorrow to try to figure out how I broke this without breaking the tests 🙃","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"No rush from me! I was able to roll back to 0.33.0 no problem","author":{"__typename":"User","login":"dhritzkiv","id":"MDQ6VXNlcjEzNDk4NjU=","name":"Daniel Hritzkiv"}},{"__typename":"IssueComment","body":"I can wait 1 week to have feedback from you @designatednerd on this issue.\r\nIf you need more time to investigate or to solve it, I could roll back to 0.33.0 to avoid blocking me in production","author":{"__typename":"User","login":"Narayane","id":"MDQ6VXNlcjQ5MjEzMDg=","name":"Sébastien BALARD"}},{"__typename":"IssueComment","body":"Same here, I rollbacked to 0.32.1 so no rush from me, and thanks for taking time investigating this!","author":{"__typename":"User","login":"benoitletondor","id":"MDQ6VXNlcjg2ODA1NA==","name":"Benoit Letondor"}},{"__typename":"IssueComment","body":"I'm trying to reproduce this issue to investigate what could be going on, but it's been hard because unfortunately our tests aren't set up to run in real life conditions, where concurrency may play a role. The existing watcher tests all continue to pass, and so do some new ones I've been adding.\r\n\r\nIt would be helpful to learn more about the way people who experience this are using the framework, and what behavior they are seeing:\r\n- How are you initializing and configuring the client, cache, store and network transport?\r\n- Are you calling methods on `ApolloClient` from the main thread or from a background thread? Do you receive results on the main queue as well, or are you passing in a custom queue?\r\n- Does the issue occur 100% of the time, or only sometimes?\r\n- Are there other operations in flight when this happens, or does it also happen with just a single watcher and a single related query or mutation?\r\n- Anything else unusual or noticeable?\r\n\r\nI know this is a long shot, but it would be even more helpful if anyone was able to share a project that reliably exhibits this issue.","author":{"__typename":"User","login":"martijnwalraven","id":"MDQ6VXNlcjU0NDg1","name":"Martijn Walraven"}},{"__typename":"IssueComment","body":"A few more thoughts after taking a closer look at this:\r\n\r\n1) It seems any operations using the `WebSocketTransport` always ignore the cache completely starting in 0.33 (I believe https://github.com/apollographql/apollo-ios/commit/444c465671c786659599a16da4b2d23d43648a74 is where this change was introduced). That means subscription results are not actually published to the store, and thus will not trigger watchers. (@benoitletondor I think that would at least explain your initial bug report).\r\n\r\n2) That doesn't yet explain why queries and mutations would also fail to trigger watchers (assuming those are not using the `WebSocketTransport`). There is a possibility for misconfiguration however, which would lead to inadvertently having multiple stores (see https://github.com/apollographql/apollo-ios/issues/1438). Could some of you be bitten by this maybe?\r\n\r\n3) Using a custom `NetworkTransport` also currently ignores the cache completely (see https://github.com/apollographql/apollo-ios/pull/1442 for an in progress PR to work around this). Any chance this could explain the behavior some of you are seeing?","author":{"__typename":"User","login":"martijnwalraven","id":"MDQ6VXNlcjU0NDg1","name":"Martijn Walraven"}},{"__typename":"IssueComment","body":"I'm not using WebSocketTransport, but 3. sound like it could be what's plaguing us! Will have some time in two weeks to poke around that","author":{"__typename":"User","login":"dhritzkiv","id":"MDQ6VXNlcjEzNDk4NjU=","name":"Daniel Hritzkiv"}},{"__typename":"IssueComment","body":"@martijnwalraven I guess 3. could be an explanation in my case, I have a custom `NetworkTransport` implementation (http request headers additions, checks on http response)\r\n\r\n`public func send<Operation: GraphQLOperation>(operation: Operation, completionHandler: @escaping (_ result: Result<GraphQLResponse<Operation.Data>, Error>) -> Void) -> Cancellable` in 0.33\r\n\r\nbecomes\r\n\r\n`public func send<Operation>(operation: Operation, cachePolicy: CachePolicy, contextIdentifier: UUID?, callbackQueue: DispatchQueue, completionHandler: @escaping (Result<GraphQLResult<Operation.Data>, Error>) -> Void) -> Cancellable where Operation : GraphQLOperation` in 0.34\r\n\r\nI need to change\r\n```\r\ndo {\r\n    let body = try self.serializationFormat.deserialize(data: data) as! JSONObject\r\n    let response = GraphQLResponse(operation: operation, body: body)\r\n    completionHandler(.success(response))\r\n} catch { }\r\n```\r\ninto\r\n```\r\ndo {\r\n    let body = try self.serializationFormat.deserialize(data: data) as! JSONObject\r\n    let response = GraphQLResponse(operation: operation, body: body)\r\n    let result = try response.parseResultFast()\r\n    completionHandler(.success(result))\r\n} catch { }\r\n```\r\nto try to conform my code to the new signature","author":{"__typename":"User","login":"Narayane","id":"MDQ6VXNlcjQ5MjEzMDg=","name":"Sébastien BALARD"}}]}},{"__typename":"Issue","title":"Why the response is not being triggered and no interceptors are dispatched?","author":{"__typename":"User","login":"angelu25","id":"MDQ6VXNlcjYzMDgxMjA=","name":null},"body":"I'm building the client like this:\r\n![image](https://user-images.githubusercontent.com/6308120/94703838-90143b00-033f-11eb-8033-3f2727a09fbe.png)\r\nThis is my Interceptor Provider:\r\n![image](https://user-images.githubusercontent.com/6308120/94703879-9c989380-033f-11eb-8fab-ea802d571565.png)\r\nAnd this is an example of the query fetch:\r\n![image](https://user-images.githubusercontent.com/6308120/94703946-aae6af80-033f-11eb-93aa-b7670cb5c41d.png)\r\nIt is never stopping at result or at any interceptor, but console is dispatching:\r\n![image](https://user-images.githubusercontent.com/6308120/94704042-c81b7e00-033f-11eb-9ca7-ad9b833251b2.png)\r\n\r\nDo you have any idea what is wrong there?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"You are not actually including anything that calls the network, it looks like. You will need to include the `NetworkFetchInterceptor`, probably between request and response logging interceptors. \r\n\r\nI don't know why the response logging interceptor would be showing a 200 response when there's nothing that came through, because the request never went out to the network.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Obsolete type GraphQLHTTPResponseError","author":{"__typename":"User","login":"knox","id":"MDQ6VXNlcjE2NDAx","name":"Mickey"},"body":"## Bug report\r\n\r\nWith the new network stack (yeah!) a few types such as `GraphQLHTTPResponseError` became obsolte but did not get removed from code base yet.\r\n\r\n## Versions\r\n\r\n- `apollo-ios` SDK version: 0.34.0\r\n\r\n## Steps to reproduce\r\n\r\n\"Find usages\" of `GraphQLHTTPResponseError`, `GraphQLHTTPRequestError` and probably others.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"`GraphQLHTTPRequestError` is still used, but good catch on the response error. \r\n\r\nPlease note that \"find usages\" isn't the be-all, end-all, especially for enum types - always worth doing a text search through the full codebase. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"The problem here for me was that by not beeing broken because of a removed class my validations got semantically broken because they where still checking for that type.\r\n\r\nOf course you're right about `GraphQLHTTPRequestError`. I've mistaken that.\r\n\r\nBut still, regarding your advise to check for \"usages\" with full text search i have to strongly disagree. In fact i heavily rely on this kind of type based analysis and navigating through code and therefore i prefer AppCode over Xcode a lot because of it outstanding capabilities in that. You should give it a try.","author":{"__typename":"User","login":"knox","id":"MDQ6VXNlcjE2NDAx","name":"Mickey"}},{"__typename":"IssueComment","body":"I agree that it's helpful, but particularly when it comes to removing stuff, I've found it better to belt-and-suspenders things by actually searching out where something is used (even in AppCode, which I have used before). ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"This has been removed with `0.35.0`. If you find other unused types, please open a new issue. Thanks!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Enhance support for custom cache key resolver logic","author":{"__typename":"User","login":"qingqingliu","id":"MDQ6VXNlcjMzMDk3NjE=","name":null},"body":"## Feature request\r\n\r\nAdd similar support of [CacheKeyResolver](https://github.com/apollographql/apollo-android/blob/main/apollo-normalized-cache-api/src/commonMain/kotlin/com/apollographql/apollo/cache/normalized/CacheKeyResolver.kt) as from Android Apollo Client library. \r\n\r\n## Motivation\r\n\r\nCurrent iOS library provides cacheKeyForObject on ApolloClient that allows you to provide custom cache key for response, but there is no way for client app to provide custom cache key for request. This feature is needed in case client wants to use a different cache key for request\r\n\r\n## Proposed solution\r\n\r\nFollow Android pattern to introduce CacheKeyResolver on ApolloClient and support custom cache key for both response and request key.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"We're going to be looking in late 2020-early 2021 at getting our mobile caching more aligned, both across iOS and android and with our web cache, and this is one of the things I'll definitely be considering. \r\n\r\nI'm definitely open to discussion if you're interested in implementing this yourself.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks @designatednerd for the follow up. I see this is being part of bigger alignment between iOS and Android, I would probably wait for an overall proposal first. Happy to contribute though once the proposal is in place\r\n\r\nAs android side does seems have more feature supports like refetch, optimistic updates and custom cache key etc, wondering whether the direction for iOS would be following Android design pattern","author":{"__typename":"User","login":"qingqingliu","id":"MDQ6VXNlcjMzMDk3NjE=","name":null}},{"__typename":"IssueComment","body":"We're going to try to line up on what's best for both - the biggest issue right now is that iOS had a long period where no development took place (while Android was chugging along well with open-source contributions) and I'm still digging my way out of that hole. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Enum generation with `INIT` case","author":{"__typename":"User","login":"bezoadam","id":"MDQ6VXNlcjI1NjEzMTI1","name":"Adam Bezak"},"body":"## Bug report\r\n\r\nHi, enum is declared like this:\r\n![Snímka obrazovky 2020-10-01 o 8 26 56](https://user-images.githubusercontent.com/25613125/94775340-ede86780-03bf-11eb-9f4e-f9cb5bc9f5a0.png)\r\n\r\nand generated code throws these errors:\r\n![Snímka obrazovky 2020-10-01 o 8 27 08](https://user-images.githubusercontent.com/25613125/94775447-18d2bb80-03c0-11eb-9fe5-b6f6d12420ef.png)\r\n\r\nIt looks like there is problem with `INIT` case when using enum.\r\n\r\n## Versions\r\n\r\n- `apollo-ios` SDK version: 0.34.1\r\n- Xcode version: 12.0.1\r\n- Swift version: 5\r\n\r\n## Steps to reproduce\r\n\r\nGenerate code with `init` in enum case.\r\n\r\nIs it problem on my side or bug in apollo codegen. Any possible fixes?\r\nThanks.\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"It's the codegen - it's not properly escaping the case named `init`, which is a reserved Swift keyword. Upcoming codegen should handle this better but it's gonna be a bit - is this schema already public or is it still being evolved? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Schema is partially public but I think there is not chance that there will be some changes. Anyway if I change `.init` to ``.init`` on lines where error is triggered, it disappears. But of course on next build code is regenerated. So I think this should be fixed in codegen.","author":{"__typename":"User","login":"bezoadam","id":"MDQ6VXNlcjI1NjEzMTI1","name":"Adam Bezak"}},{"__typename":"IssueComment","body":"Yeah, absolutely - fixing the current codegen is a pain (which is why it's being rewritten) so I was trying to make sure it was necessary before diving into it. 🙃","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thank you 👍 it is not necessary for me, I think i can handle it somehow (use temporary script to rename all `.init` cases to `\".init\"`)","author":{"__typename":"User","login":"bezoadam","id":"MDQ6VXNlcjI1NjEzMTI1","name":"Adam Bezak"}},{"__typename":"IssueComment","body":"You'd need to make it\r\n\r\n```swift\r\n`.init`\r\n```\r\n\r\n rather than `\".init\"`, but if you're ok with that, I'm very OK with not diving into typsecript hell 😇. If that's cool with you, mind if we close this one out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"When adding interceptors, they don't parse properly errors","author":{"__typename":"User","login":"angelu25","id":"MDQ6VXNlcjYzMDgxMjA=","name":null},"body":"SDK 0.34.0\r\n\r\nI can fetch the data, response is received:\r\n![image](https://user-images.githubusercontent.com/6308120/94791351-cac9b200-03d7-11eb-9d99-78a0bacddbcf.png)\r\nBut when handling it:\r\n![image](https://user-images.githubusercontent.com/6308120/94791434-e92fad80-03d7-11eb-934b-7777241fbad7.png)\r\nIt is entering the failure, but with a totally separate error:\r\n![image](https://user-images.githubusercontent.com/6308120/94791471-f8166000-03d7-11eb-8e70-c9a48d108e87.png)\r\nActually, that error does not contain anything related to the errors data is receiving.\r\nEven with just the Network Interceptor:\r\n![image](https://user-images.githubusercontent.com/6308120/94791498-02d0f500-03d8-11eb-8877-bc49dd33a64e.png)\r\n\r\nCould you help there?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"If I use LegacyInterceptorProvider it does work","author":{"__typename":"User","login":"angelu25","id":"MDQ6VXNlcjYzMDgxMjA=","name":null}},{"__typename":"IssueComment","body":"You don't have a parsing interceptor happening here, so the data is not being parsed by the time it gets to the end of the interceptor chain. The parsing isn't done by the chain itself, it's done by the individual interceptors.\r\n\r\nIf you're creating your own interceptor provider, you have to provide _all_ the interceptors that you're planning to use, including the ones that do the parsing. A good place to start is to copy the interceptors that are in `LegacyInterceptorProvider` and then add your custom interceptors to that array wherever you want them to execute. \r\n\r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Is there anything else I can help with here, or can we close this issue out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"You can close it. Many thanks!\n\nEl mar., 6 oct. 2020 a las 0:43, Ellen Shapiro (<notifications@github.com>)\nescribió:\n\n> Is there anything else I can help with here, or can we close this issue\n> out?\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/apollographql/apollo-ios/issues/1428#issuecomment-703928072>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABQECGHDP4CQL3CTJXTBIELSJJDXVANCNFSM4SAHEIYQ>\n> .\n>\n\n\n-- \n*Jose Ángel Zamora Cobo*\nTelecommunication Engineer\nAndroid/iOS Senior Software Engineer\n<https://www.credential.net/9643hskr>\n","author":{"__typename":"User","login":"angelu25","id":"MDQ6VXNlcjYzMDgxMjA=","name":null}}]}},{"__typename":"Issue","title":"Failed codegen when using GitHub GraphQL schema","author":{"__typename":"User","login":"mattia","id":"MDQ6VXNlcjExMTM4OA==","name":"Mattia Valzelli"},"body":"## Bug report\r\n\r\nWhile trying to use the [Swift scripting codegen tooling](https://www.apollographql.com/docs/ios/swift-scripting/) I was not able to generate the `API.swift` file given the corresponding schema file.\r\n\r\nAn error like this is generated \r\n\r\n> Field \"AcceptEnterpriseAdministratorInvitationInput.clientMutationId\" already exists in the schema. It cannot also be defined in this type extension.\r\n\r\n\r\nBut using the GraphQL verification tool available in the [same repo](https://github.com/octokit/graphql-schema) it passes. (running `npm start validate:ts`)\r\n\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.34.1\r\n- Xcode version:  12.2 beta 2 (12B5025f)\r\n- Swift version: 5.3\r\n\r\n## Steps to reproduce\r\n\r\nSet up the project as described in the [Swift scripting guide](https://www.apollographql.com/docs/ios/swift-scripting/) and use the GitHub schema definition with the following files:\r\n - [schema.graphql](https://raw.githubusercontent.com/octokit/graphql-schema/master/schema.graphql)\r\n - [schema.json](https://raw.githubusercontent.com/octokit/graphql-schema/master/schema.json)\r\n\r\n## Further details\r\n\r\n<details>\r\n  <summary>Example `main.swift`</summary>\r\n  \r\n```swift\r\nimport ApolloCodegenLib\r\n\r\n// Grab the parent folder of this file on the filesystem\r\nlet parentFolderOfScriptFile = FileFinder.findParentFolder()\r\n\r\n// Use that to calculate the source root of both the\r\nlet sourceRootURL = parentFolderOfScriptFile\r\n    .apollo.parentFolderURL() // Sources\r\n    .apollo.parentFolderURL() // Codegen\r\n    .apollo.parentFolderURL() // My Project\r\n\r\n// From the source root, figure out where your target\r\n// root is within your main project\r\nlet targetRootURL = sourceRootURL\r\n    .apollo.childFolderURL(folderName: \"My Project\")\r\n\r\n// Set up the URL you want to use to download the project\r\nlet endpoint = URL(string: \"https://api.github.com/graphql\")!\r\n\r\n// Create an options object for downloading the schema\r\nlet schemaDownloadOptions = ApolloSchemaDownloadConfiguration(\r\n  endpointURL: endpoint,\r\n  headers: [\"Authorization: Bearer XXXXXXXXX\"],\r\n  outputFolderURL: targetRootURL\r\n)\r\n\r\n// Calculate where you want to create the folder where the CLI will\r\n// be downloaded by the ApolloCodegenLib framework.\r\nlet cliFolderURL = sourceRootURL\r\n    .apollo.childFolderURL(folderName: \"Codegen\")\r\n    .apollo.childFolderURL(folderName: \"ApolloCLI\")\r\n\r\ndo {\r\n  // Actually attempt to download the schema.\r\n  try ApolloSchemaDownloader.run(with: cliFolderURL,\r\n                                 options: schemaDownloadOptions)\r\n} catch {\r\n  // This makes the error message in Xcode a lot more legible,\r\n  // and prevents the script from continuing to try to generate\r\n  // code if the schema download failed.\r\n  exit(1)\r\n}\r\n\r\n// Create the default Codegen options object (assumes schema.json\r\n// is in the target root folder, all queries are in some kind\r\n// of subfolder of the target folder and will output as a\r\n// single file to API.swift in the target folder)\r\nlet codegenOptions = ApolloCodegenOptions(targetRootURL: targetRootURL)\r\n\r\ndo {\r\n    // Actually attempt to generate code.\r\n    try ApolloCodegen.run(from: targetRootURL,\r\n                          with: cliFolderURL,\r\n                          options: codegenOptions)\r\n} catch {\r\n    // This makes the error message in Xcode a lot more legible.\r\n    exit(1)\r\n}\r\n```\r\n</details>\r\n\r\nPlease let me know if I can help debug this. Also I am new to GraphQL, so I may be doing something wrong.\r\n\r\nThank you for this library!","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I've definitely seen this from the `.graphql` version of the GitHub schema before, but it looks from the code like you're downloading the JSON version of it. Can you please confirm that and attach a copy of the schema you're getting from GitHub so I can take a look? Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> I've definitely seen this from the `.graphql` version of the GitHub schema before, but it looks from the code like you're downloading the JSON version of it. Can you please confirm that and attach a copy of the schema you're getting from GitHub so I can take a look? Thank you!\r\n\r\nYes, of course. The schema I'm downloading is from the [octokit repo](https://github.com/octokit/graphql-schema).\r\nThe files are:\r\n - [schema.graphql](https://gist.github.com/mattia/d2cc50fdbfc1a90e58c4c35716677052)\r\n - [schema.json](https://gist.github.com/mattia/4545c6371577d3a7c7c17722bf7266f2).\r\n\r\nThank you and have a nice day!","author":{"__typename":"User","login":"mattia","id":"MDQ6VXNlcjExMTM4OA==","name":"Mattia Valzelli"}},{"__typename":"IssueComment","body":"OK looks like I had it backwards, it's the JSON that's giving the weird error and the SDL that seems to be working fine. If you update your schema download options to downloading SDL instead of the default JSON option, that should work: \r\n\r\n```swift\r\n// Create an options object for downloading the schema\r\nlet schemaDownloadOptions = ApolloSchemaDownloadConfiguration(\r\n  schemaFileType: .schemaDefinitionLanguage,\r\n  endpointURL: endpoint,\r\n  headers: [\"Authorization: Bearer XXXXXXXXX\"],\r\n  outputFolderURL: targetRootURL\r\n)\r\n```","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thanks for the reply. I've been real busy these days but I will try to come back to you in the next few days after trying your suggestion.\r\n\r\nThanks again! Have a nice day","author":{"__typename":"User","login":"mattia","id":"MDQ6VXNlcjExMTM4OA==","name":"Mattia Valzelli"}},{"__typename":"IssueComment","body":"OK cool - I'm going to close this issue out for now, please let us know if using the Schema Definition Language version of their schema doesn't work by reopening this issue. \r\n\r\nAnyone else having a similar problem, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Is it okay to git ignore API.swift?","author":{"__typename":"User","login":"prateek3255","id":"MDQ6VXNlcjIxMjc3MTc5","name":"Prateek Surana"},"body":"## Question\r\n\r\nSince API.swift is auto-generated, is it good practice to add it to `.gitignore`?\r\n\r\nWe tried adding it to `.gitignore` but whenever someone new clones the repo, the code fails to compile because of a broken reference to API.swift, and hence we have to manually pass it for the very first time.\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.32.1\r\n- Xcode version: 11.4\r\n- Swift version: 5.1","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"This is not a recommended practice - the exact problem you're having illustrates why this isn't a good idea. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Okay, thanks for the clarification","author":{"__typename":"User","login":"prateek3255","id":"MDQ6VXNlcjIxMjc3MTc5","name":"Prateek Surana"}}]}},{"__typename":"Issue","title":"Using a custom Date scalar","author":{"__typename":"User","login":"Renish-Development","id":"MDQ6VXNlcjQ3Njg0NzE5","name":"Renish_Development"},"body":"@cerupcat @jzhw0130: You should be able to pass `--passthrough-custom-scalars` to `apollo-codegen` to avoid generating a `typealias` to `String` for custom scalars. You can then add your own alias and conversion code, see [here](https://github.com/apollographql/apollo-ios/issues/23#issuecomment-261697349) for an example.\r\n\r\n_Originally posted by @martijnwalraven in https://github.com/apollographql/apollo-ios/issues/94#issuecomment-327287361_","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"How to use/implement Date type custom scalar in iOS?\r\n\r\nI'm working with GraphQL. I have successfully implement Query and Mutation in iOS app.\r\nI'm facing issue with Date Type. As per references, I have added --passthrough-custom-scalars in Run Script BUT I'm facing compilation issue.\r\n**I'm facing issue with \"--passthrough-custom-scalars\" variable. I have added below code in Run script but I'm facing an error.**\r\n\r\n```\r\nDERIVED_DATA_CANDIDATE=\"${BUILD_ROOT}\"\r\nwhile ! [ -d \"${DERIVED_DATA_CANDIDATE}/SourcePackages\" ]; do\r\nif [ \"${DERIVED_DATA_CANDIDATE}\" = / ]; then\r\necho >&2 \"error: Unable to locate SourcePackages directory from BUILD_ROOT: '${BUILD_ROOT}'\"\r\nexit 1\r\nfi\r\nDERIVED_DATA_CANDIDATE=\"$(dirname \"${DERIVED_DATA_CANDIDATE}\")\"\r\ndone\r\nSCRIPT_PATH=\"${DERIVED_DATA_CANDIDATE}/SourcePackages/checkouts/apollo-ios/scripts\"\r\nif [ -z \"${SCRIPT_PATH}\" ]; then\r\necho >&2 \"error: Couldn't find the CLI script in your checked out SPM packages; make sure to add the framework to your project.\"\r\nexit 1\r\nfi\r\ncd \"${SRCROOT}/${TARGET_NAME}\"\r\n\"${SCRIPT_PATH}\"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./*/.graphql --localSchemaFile=\"schema.json\" API.swift\r\n\"${SCRIPT_PATH}\"/run-bundled-codegen.sh schema:download --endpoint=\"endpointURL\"\r\n#custom scalars\r\n**$APOLLO_FRAMEWORK_PATH/check-and-run-apollo-codegen.sh generate $(find . -name '*.graphql') --schema schema.json --output API.swift --passthrough-custom-scalars**\r\n```\r\n\r\n**Code for Define Date Scalars**\r\n```swift\r\npublic typealias DateTime = Date\r\nextension DateTime: JSONDecodable, JSONEncodable {\r\n  public init(jsonValue value: JSONValue) throws {\r\n    guard let string = value as? String else {\r\n      throw JSONDecodingError.couldNotConvert(value: value, to: String.self)\r\n    }\r\n    guard let date = ISO8601DateFormatter().date(from: string) else {\r\n      throw JSONDecodingError.couldNotConvert(value: value, to: Date.self)\r\n    }\r\n    self = date\r\n  }\r\n  public var jsonValue: JSONValue {\r\n    return ISO8601DateFormatter().string(from: self)\r\n  }\r\n}\r\n```\r\n\r\n**I have reviewed schema JSON have a Date variable but API.swift still string type.**\r\nHere is my graphql mutation.\r\n```graphql\r\nmutation AddPeriod($uid:ID!, $start_time : Date!, $flow: PeriodFlowInput){\r\n  addPeriod(uid:$uid, start_time : $start_time, flow: $flow){\r\n    id\r\n    start_time\r\n    end_time\r\n    flow {\r\n      value\r\n      flow_time\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHow can I pass date in GraphQL mutation. Please help me. Thanks in advance","author":{"__typename":"User","login":"Renish-Development","id":"MDQ6VXNlcjQ3Njg0NzE5","name":"Renish_Development"}},{"__typename":"IssueComment","body":"Hi @Renish-Development - I updated your comment to add some formatting. \r\n\r\nIt looks like your type is called `Date` rather than `DateTime`, which would mean I believe you need to have your typealias be:\r\n\r\n```swift\r\ntypealias Date = Swift.Date\r\n```\r\n\r\nAnd then have your extension be on `Date` rather than `DateTime`. Give that a shot, let me know how it goes.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd , \r\n\r\n**1. Swift Date is Not available. I'm using Xcode 12. Please look at the attached screen shot.**\r\n\r\n**2. I'm also facing issue with execute --passthrough-custom-scalars. Please let me know what I missed for custom scalars**\r\n\r\n**$APOLLO_FRAMEWORK_PATH/check-and-run-apollo-codegen.sh generate $(find . -name '*.graphql') --schema schema.json --output API.swift --passthrough-custom-scalars**\r\n\r\n<img width=\"1315\" alt=\"Screenshot 2020-10-06 at 12 52 09 AM\" src=\"https://user-images.githubusercontent.com/47684719/95122518-43c96080-076e-11eb-96d0-fee48b62daaa.png\">\r\n","author":{"__typename":"User","login":"Renish-Development","id":"MDQ6VXNlcjQ3Njg0NzE5","name":"Renish_Development"}},{"__typename":"IssueComment","body":"Argh, I meant `Foundation.Date`. I always forget what's swift and what's foundation📈\r\n\r\nAnd `--output API.swift` has to be the last argument - move `--passthrough-custom-scalars` before that. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd , Its' not working. Please can I do any mistake or issue due to the updated version of Xcode 12. I'm using Xcode 12. Please check with your side and let me know it's work or not. Happy top share more information","author":{"__typename":"User","login":"Renish-Development","id":"MDQ6VXNlcjQ3Njg0NzE5","name":"Renish_Development"}},{"__typename":"IssueComment","body":"I did notice that the param is `--passthroughCustomScalars` rather than `--passthrough-custom-scalars` - that could be part of it. If that's not what's not working, please let me know in more detail what isn't working and in what way it is not working. Thanks. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Hi @Renish-Development is there anything more I can help with here or can we close this issue out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"You're far from the only person who's asked a ton of questions about this so I've added a page to our example playground to try and clarify this. Please see #1474 for further details","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd , Please add verify and step by step code or make tutorial as per latest version of GIT repo. Also I have not found proper documentation regarding custom scalar, pass token in API call, generate schema file with auth token and so on. I'm happy to help you anyway and if you can guide I will write tutorial for the same. Looking forward....","author":{"__typename":"User","login":"GlobesyncTechnologies","id":"MDQ6VXNlcjUzNDc1MDIx","name":"Renish | GlobeSync Technologies"}},{"__typename":"IssueComment","body":"@GlobesyncTechnologies Please see the PR I linked for an example of using a custom scalar. Please check out [our full tutorial](https://www.apollographql.com/docs/ios/tutorial) for full setup instructions. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Mismatched stores for ApolloClient/LegacyInterceptorProvider","author":{"__typename":"User","login":"danpalmer","id":"MDQ6VXNlcjIwMjQwMA==","name":"Dan Palmer"},"body":"## Bug report\r\n\r\nCaveat: this isn't quite a bug, perhaps more of a design bug, but we nearly shipped a bug in our app because of it. Also, I may just be missing things!\r\n\r\nThere are two ways to set up an `ApolloStore` for the networking in Apollo, and unless both are done, in the same way, I believe there can be inconsistencies.\r\n\r\nFor example, we previously did this in our `ApolloClient` setup:\r\n\r\n```swift\r\nlet networkTransport = HTTPNetworkTransport(url: baseURL)\r\nlet cache = InMemoryNormalizedCache()\r\nlet store = ApolloStore(cache: cache)\r\nlet client = ApolloClient(networkTransport: networkTransport, store: store)\r\n```\r\n\r\nWhen upgrading to the newest version of Apollo, we originally re-wrote this as:\r\n\r\n```swift\r\nlet provider = LegacyInterceptorProvider()\r\nlet networkTransport = RequestChainNetworkTransport(interceptorProvider: provider, endpointURL: baseURL)\r\nlet cache = InMemoryNormalizedCache()\r\nlet store = ApolloStore(cache: cache)\r\nlet client = ApolloClient(networkTransport: networkTransport, store: store)\r\n```\r\n\r\nAs far as I can tell (please tell me if I'm wrong!) this has set up a store that is now not being used at all. We can still call `client.clearCache()` or `client.cacheKeyForObject` and it will use the store that we created, but this would _not_ affect the store being used by the interceptors.\r\n\r\nSimilarly, we could have configured a more complex cache setup, but that would not be used by the interceptors.\r\n\r\nIf we corrected this in the following way...\r\n\r\n```swift\r\nlet cache = InMemoryNormalizedCache()\r\nlet store = ApolloStore(cache: cache)\r\nlet provider = LegacyInterceptorProvider(store: store)\r\nlet networkTransport = RequestChainNetworkTransport(interceptorProvider: provider, endpointURL: baseURL)\r\nlet client = ApolloClient(networkTransport: networkTransport)\r\n```\r\n\r\n...this would also introduce bugs because while our correct store is being used for the networking, `client.clearCache` or `client.cacheKeyForObject` are pointing to the `ApolloClient`'s default store from its init method.\r\n\r\n## Versions\r\n\r\n- `apollo-ios` SDK version: 0.34.1\r\n- Xcode version: 12.0\r\n- Swift version: 5.3\r\n\r\n## Steps to reproduce\r\n\r\nSee above for the process that can lead to incorrect use. This is roughly the steps that we took while upgrading Apollo to 0.34.x – i.e. we went through two invalid implementations before reaching one that we believe is valid.\r\n\r\n## Further details\r\n\r\nAs mentioned above, this isn't really a bug, but I think it's a design issue that could be improved. My recommendation would be to eliminate the store from the `ApolloClient` entirely, and leave it up to the user to coordinate the store with their interceptor provider. Potentially the store could become part of the interceptor provider protocol so that the client could still back `cacheKeyForObject`/`clearCache` onto the provider's store.\r\n\r\nAn alternative would be to eliminate the store from the interceptor provider, and ensure that in the client the store is set correctly on the provider so that they always line up.\r\n\r\nLastly, if maintaining backwards compatibility is key, the store from the provider and the store from the client could be compared at the end of the client initialiser, and an error raised if they are not exactly the same object.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Is there a particular using you're not passing in the `store` parameter for `client` on that last version? eg: \r\n\r\n```swift\r\nlet cache = InMemoryNormalizedCache()\r\nlet store = ApolloStore(cache: cache)\r\nlet provider = LegacyInterceptorProvider(store: store)\r\nlet networkTransport = RequestChainNetworkTransport(interceptorProvider: provider, endpointURL: baseURL)\r\nlet client = ApolloClient(networkTransport: networkTransport, store: store)\r\n```\r\n\r\nThat would ensure you have the same store in all places. \r\n\r\nI do agree it's a little overcomplicated at the moment - I do plan to keep evolving this, and I appreciate the feedback.\r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> Is there a particular using you're not passing in the store parameter for client on that last version? eg:\r\n\r\nNot particularly, but we did go through this stage on the way to our fully working version, which is pretty much what you have in your example. The fact that there were multiple opportunities for human error in getting to that working solution suggests there's a better design possible.\r\n\r\nIdeally these would be caught by the type system, or made un-representable, as I don't believe they are states of the system with valid use-cases.\r\n\r\nWould you accept a PR to address this? If so, what's your preferred approach out of those options I outlined, or is there another way you'd like to solve this?","author":{"__typename":"User","login":"danpalmer","id":"MDQ6VXNlcjIwMjQwMA==","name":"Dan Palmer"}},{"__typename":"IssueComment","body":"If you're not using a custom interceptor provider, the default initializer for `ApolloClient` initializes all this stuff for you - is that more what you're thinking? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> If you're not using a custom interceptor provider, the default initializer for ApolloClient initializes all this stuff for you - is that more what you're thinking?\r\n\r\nI think that route is safe.\r\n\r\nWe were transitioning from the legacy networking stack where we used `HTTPNetworkTransportPreflightDelegate` though. To maintain compatibility we decided to use `LegacyInterceptorProvider` and add an additional interceptor that did what our preflight delegate implementation had previously done, hence ending up with needing to pass the store into two different places, and this getting out of sync in two different ways before we realised the implicit dependency between those two places.\r\n\r\nAlso, just realised that the 3rd code example in the issue body is roughly what's in `Network.swift` in the docs here: https://www.apollographql.com/docs/ios/tutorial/tutorial-mutations/ – following the docs here will result in an invalid construction of the networking stack I think.\r\n\r\nHaving thought about this a bit more, I think there's a more common way this could also be done incorrectly:\r\n\r\n```swift\r\nlet provider = LegacyInterceptorProvider()\r\nlet networkTransport = RequestChainNetworkTransport(interceptorProvider: provider, endpointURL: baseURL)\r\nlet client = ApolloClient(networkTransport: networkTransport, store: store)\r\n```\r\n\r\nIf not manually constructing a store at all, but instantiating a custom interceptor provider, there are two different stores being used and therefore it's impossible to clear the cache of the \"real\" one, but no error would be raised clearing the cache of the unused one.\r\n\r\nIt's possible I've missed somewhere that the stores get \"joined up\" – I'm new to Swift and don't know much about the Apollo codebase and may not understand the intention here. Apologies if that's the case!\r\n\r\n- - -\r\n\r\nI think there are 3 possible options here (although very open to more suggestions!):\r\n\r\n1. Eliminate the store from the ApolloClient entirely, leave it up to the user to coordinate the store with their interceptor provider. User will need to hold a reference to it for setting/getting the cache key, or clearing the cache.\r\n\r\n2. Eliminate the store from the interceptor provider init, have the client inject it into the interceptor provider. This way the user only has one place to pass it in, and if they don't the default one is still the same.\r\n\r\n3. If maintaining backwards compatibility is key, the store from the provider and the store from the client could be compared at the end of the client initialiser, and an error raised if they are not exactly the same object.\r\n\r\n","author":{"__typename":"User","login":"danpalmer","id":"MDQ6VXNlcjIwMjQwMA==","name":"Dan Palmer"}},{"__typename":"IssueComment","body":"Good catch on the example in the tutorial, that's definitely an error.\r\n\r\nThere are (rare) instances where someone intentionally wants to use different stores, but you're right that most of the time, that's not the case. \r\n\r\nI think of the options you propose, 2 probably makes the most sense. I'll try to see what I can do here. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> There are (rare) instances where someone intentionally wants to use different stores, but you're right that most of the time, that's not the case.\r\n\r\nInteresting! I'm not sure I quite understand what the use-case is for the client to have a different store to the interceptor provider? I can't see how that client store gets used apart from by the user... which means if I've understood correctly, it's not plugged in to the Apollo internals?","author":{"__typename":"User","login":"danpalmer","id":"MDQ6VXNlcjIwMjQwMA==","name":"Dan Palmer"}},{"__typename":"IssueComment","body":"basically there are some people who use multiple clients with multiple stores, and there are some...odd ways people make that work. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I've shipped the PR removing the default stores with `0.36.0` - I took a couple swipes at doing something else besides that, but everything I tried wound up *far* more complicated than \"actually make people select what store they're passing\". \r\n\r\nGoing to close this one out, please open a new issue if you think you've got a better suggestion!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Nice one! PRs look good. Straightforward approach sounds good – I can't see myself making the mistakes above if this was in place. Better API ergonomics can come later if they're needed at all.\r\n\r\nThanks for your work on this!","author":{"__typename":"User","login":"danpalmer","id":"MDQ6VXNlcjIwMjQwMA==","name":"Dan Palmer"}}]}},{"__typename":"Issue","title":"Can not find 'GenericScalar' in scope","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null},"body":"## Bug report\r\n\r\nBackend is JWT and when i'll try to execute a mutation for tokenVerification it gives me an error. We have Payload (Scalar Type) as response it in. I have added --passthroughCustomScalars in run script also.\r\n\r\n`SCRIPT_PATH=\"${PODS_ROOT}/Apollo/scripts\"\r\ncd \"${SRCROOT}/${TARGET_NAME}\"\r\n\"${SCRIPT_PATH}\"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./**/*.graphql --localSchemaFile=\"schema.json\" --passthroughCustomScalars API.swift\r\n`\r\n\r\n## Versions\r\n\r\n\r\n- `apollo-ios` SDK version: POD 0.34.0\r\n- Xcode version: XCode 12\r\n- Swift version: Swift 5\r\n\r\n## Steps to reproduce\r\n\r\nPlease add Scalar type response in mutation/query and try to build the project (first clear build folder)\r\n\r\n## Further details\r\n\r\nI have tried to do Type Conversion using this help : https://github.com/apollographql/apollo-ios/blob/main/Sources/Apollo/JSONStandardTypeConversions.swift\r\n\r\nBut its not working as we are using swift 5 i think.\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! Can you clarify a bit: \r\n\r\n- What is the name of your custom scalar type, `Payload` or `GenericScalar`? \r\n- What is the underlying type of your custom scalar? It sounds like it's a string containing the JWT, I just want to double check\r\n- Have you tried using a `typealias` to define the scalar type? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@tapannathvani Hi, do you have answers to any of the questions I asked? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Closing this issue as i am not using Payload response data now.","author":{"__typename":"User","login":"tapannathvani","id":"MDQ6VXNlcjEwMzY4OTU1","name":null}}]}},{"__typename":"Issue","title":"Add example for direct writing to the cache","author":{"__typename":"User","login":"michael-mckenna","id":"MDQ6VXNlcjE0MDM1MTQ4","name":null},"body":"## Feature request\r\n\r\nAdd examples for writing directly to the cache, hopefully for all variants of the \"write\" function:\r\n```\r\ntransaction.write(object:withKey:)\r\ntransaction.write(data:forQuery:)\r\ntransaction.write(object:withKey:variables:)\r\n```\r\n\r\nLooks like only `read` and `update` are in the docs at the moment.\r\nhttps://github.com/apollographql/apollo-ios/blob/main/docs/source/caching.mdx#direct-cache-access\r\n\r\n## Motivation\r\n\r\nI'm new to GraphQL and using it for a side project has a learning experience. I don't want to get the whole server and datasource set up yet - would like to just do the iOS portion and have some sort of proof of concept going before pursuing it further. Because of this, I'm using the direct cache access exclusively for now. The extra examples in the readme will help me and future devs a lot. I come from using Realm and Core Data so this is quite a bit different for me.\r\n\r\n## Outstanding Questions\r\n\r\nIs there a sample app that utilizes direct cache access? If so, it'd be great to add a reference to that.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi, I can certainly add one, but I will say that the idea is that you avoid manually reading from or writing to the cache unless you absolutely have to, and let the store handle most of the nonsense around dealing with cache keys and things like that.\r\n\r\nIf it's your first time messing around with it and you just want to get an idea of how it works, I'd recommend checking out the app from the [Tutorial](https://www.apollographql.com/docs/ios/tutorial/), which uses a server that's already set up. You can then more easily inspect how things go into the in-memory cache or, if you want to, you can switch to using the SQLite cache and examine the SQLite database. \r\n\r\nThat will also allow you to have a base to mess around from if you are interested in seeing how the writing works if you need it.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd Just to clarify, it is still the expectation though that you should use manual cache updating after mutations / incoming subscriptions, correct? Recently I started to receive JSON `missingValue` errors in my cache updates and I'm not sure if it has anything to do with the major architectural changes that have been going on. ","author":{"__typename":"User","login":"Nickersoft","id":"MDQ6VXNlcjIxMDQxMjk=","name":"Tyler Nickerson"}},{"__typename":"IssueComment","body":"Subscriptions don't hit the cache at all at the moment - I wasn't part of that decision but it makes sense from a standpoint of \"This is constantly changing information, we don't necessarily want to cache all of it\", and also from a performance standpoint. So yes, that you'd need to do manually.\r\n\r\nMutation results can update the cache, though if you're not using a `cacheKeyForObject` function that says the cache key should be based on a unique identifier, you will need to update any related queries manually. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Can't update the RequestBodyCreator for WebSocketTransport","author":{"__typename":"User","login":"lowki93","id":"MDQ6VXNlcjU0NzMwMTc=","name":"budain"},"body":"## Bug report\r\n\r\nWe use `WebSocketTransport` and we need to override the `requestBodyCreator` parameters.\r\nWe define `CustomBodyCreator`:\r\n```\r\nstruct CustomBodyCreator: RequestBodyCreator {\r\n  \r\n  public func requestBody<Operation: GraphQLOperation>(\r\n    for operation: Operation,\r\n    sendOperationIdentifiers: Bool\r\n  ) -> GraphQLMap {\r\n    .....\r\n  }\r\n  \r\n}\r\n\r\n```\r\n\r\nwe put it when we initialize the `WebSocketTransport`: \r\n```\r\n WebSocketTransport(request: request, requestBodyCreator: CustomBodyCreator())\r\n```\r\n\r\nThe method call in `WebSocketTransport` don't use the method define in the procotol :\r\n```\r\n func sendHelper<Operation: GraphQLOperation>(operation: Operation, resultHandler: @escaping (_ result: Result<JSONObject, Error>) -> Void) -> String? {\r\n    let body = requestBodyCreator.requestBody(for: operation, sendOperationIdentifiers: self.sendOperationIdentifiers)\r\n    ....\r\n    return sequenceNumber\r\n  }\r\n```\r\nBut `requestBody` from our struct is never call.\r\n\r\nThere is a an extension for `RequestBodyCreator` that define the function in the protocol : \r\n```\r\nextension RequestBodyCreator {\r\n  /// Creates a `GraphQLMap` out of the passed-in operation\r\n  ///\r\n  /// - Parameters:\r\n  ///   - operation: The operation to use\r\n  ///   - sendOperationIdentifiers: Whether or not to send operation identifiers. Defaults to false.\r\n  ///   - sendQueryDocument: Whether or not to send the full query document. Defaults to true.\r\n  ///   - autoPersistQuery: Whether to use auto-persisted query information. Defaults to false.\r\n  /// - Returns: The created `GraphQLMap`\r\n  public func requestBody<Operation: GraphQLOperation>(for operation: Operation,\r\n                                                       sendOperationIdentifiers: Bool = false,\r\n                                                       sendQueryDocument: Bool = true,\r\n                                                       autoPersistQuery: Bool = false) -> GraphQLMap {\r\n.....\r\n}\r\n```\r\n\r\nWhy can put this default implementation in `ApolloRequestBodyCreator` directly ?\r\n```\r\n// Helper struct to create requests independently of HTTP operations.\r\npublic struct ApolloRequestBodyCreator: RequestBodyCreator {\r\n  // Internal init methods cannot be used in public methods\r\n  public init() { }\r\n}\r\n```\r\n\r\nWhy we can't override this ?\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.34.1\r\n- Xcode version: 12.0.1\r\n- Swift version: 5.2 \r\n\r\n## Further details\r\n\r\nWe need to override this to make `WebSocketTransport`with `AppSync`from AWS","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi, apologies for the delay, I was under the weather. \r\n\r\nYou can't override `ApolloRequestBodyCreator` because it's not intended to be overridden - that's why `RequestBodyCreator` is a protocol with a default implementation: That way your custom implementation can use the default implementation without having to implement it yourself if you don't need to. \r\n\r\nThat being said, there've been some changes to this class recently (mostly, removing all the stuff that was going on for uploads) that might make changes make sense. \r\n\r\nI'm not sure why your custom implementation wouldn't be getting called - I would double check that the request creator is being passed in everywhere you expect it to be by setting some breakpoints and validating whether you've got your `CustomRequestCreator` or an `ApolloRequestBodyCreator`, and then working backwards to try to figure out where things are going wrong. If it is the custom request creator, that's definitely a bug. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"OK updating a test, I am now seeing the issue you're having - looks like something I gave [literally an entire talk on](https://speakerdeck.com/designatednerd/protocols-all-the-way-down-dotswift-paris-january-2018?slide=63) just came to bite me because I have angered the gods of iOS development 🤦‍♀️ \r\n\r\nThe issue is the default implementation is getting called even if it's overridden when the only type the compiler knows about is the protocol itself. \r\n\r\nUnfortunately I think the approach in #1448 is going to break things too hard - it removes the ability for anyone to use the default implementation at all. I will make some changes with some tests to validate it works though. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"This has shipped with `0.35.0`. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Am running to this error `Cannot find 'HTTPNetworkTransport' in scope` and `Cannot find type 'HTTPNetworkTransportDelegate' in scope` when am trying to make calls, ApolloClient Version 0.34.1","author":{"__typename":"User","login":"gbrigens","id":"MDQ6VXNlcjQyMTAxNTY=","name":"Гералд Бирген"},"body":"Am running to this error `Cannot find 'HTTPNetworkTransport' in scope` and `Cannot find type 'HTTPNetworkTransportDelegate' in scope` when am trying to make calls, ApolloClient Version 0.34.1\r\n\r\nHere is my code;\r\n```\r\nfinal class Network {\r\n    static let shared = Network()\r\n    private lazy var networkTransport: NetworkTransport = {\r\n        \r\n        let transport = HTTPNetworkTransport(url: URL(string: \"https://exampe.com/grapghql\")!)\r\n        transport.delegate = self\r\n        \r\n        return transport\r\n    }()\r\n    \r\n    private(set) lazy var apollo = ApolloClient(networkTransport: self.networkTransport)\r\n}\r\n\r\nextension Network: HTTPNetworkTransportDelegate {\r\n    func networkTransport(_ networkTransport: NetworkTransport, shouldSend request: URLRequest) -> Bool {\r\n        return true\r\n    }\r\n    \r\n    func networkTransport(_ networkTransport: NetworkTransport, willSend request: inout URLRequest) {\r\n        \r\n        let token = \"\"\r\n        var headers = request.allHTTPHeaderFields ?? [String: String]()\r\n        headers[\"Authorization\"] = \"Bearer \\(token)\"\r\n        \r\n        request.allHTTPHeaderFields = headers\r\n    }\r\n}\r\n```\r\nI appreciate your feedback.\r\n\r\n_Originally posted by @gbrigens in https://github.com/apollographql/apollo-ios/issues/909#issuecomment-706535757_","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Hi! In 0.34.0 after an RFC and multiple betas, we released an updated networking stack which removed these methods in favor of a `RequestChainNetworkTransport`. Please see the [0.34.0 release notes](https://github.com/apollographql/apollo-ios/releases/tag/0.34.0) for links to updated documentation.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd this is my first time working with Apolloclient and GraphQL. I have ted the one from the link still running into errors `Cannot find 'NetworkInterceptorProvider' in scope`... Do you have an example that shows passing authorization headers?","author":{"__typename":"User","login":"gbrigens","id":"MDQ6VXNlcjQyMTAxNTY=","name":"Гералд Бирген"}},{"__typename":"IssueComment","body":"Yes, the [tutorial bit on additional mutations](https://www.apollographql.com/docs/ios/tutorial/tutorial-mutations/) has an example","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd thank you for your help, hope in future there will be more tutorials on iOS. I have been searching for content online and there isn't much compared to Android.","author":{"__typename":"User","login":"gbrigens","id":"MDQ6VXNlcjQyMTAxNTY=","name":"Гералд Бирген"}},{"__typename":"IssueComment","body":"Yes, definitely in the long term plan to beef that up.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Cannot query field \"currencyTypes\" on type \"Query\".","author":{"__typename":"User","login":"Hazem-Mohammed","id":"MDQ6VXNlcjU1Mjk4MDg0","name":null},"body":"Hello all,\r\n\r\nThis is my first time to work with GraphQl and i have a very weird issue if i try to add any new query to my .graphql file i get error Cannot query field on type\r\ni faced this issue once and the solution was simply download the new schema file and it is work just fine now it doesn't work and if the Backend add any new query and i try to use it i get the same error even after update the schema file.\r\n\r\nnow i have the same issue again and i have tried almost everything:\r\n1- remove schema and download the new one.\r\n2- remove the (Generate Apollo GraphQL API) and add it again\r\n3- remove apollo SDK and reinstall it (cocoapods)\r\n4- update apollo SDK to the latest version\r\n5- make sure the schema have the new query's (works fine with the android)\r\n\r\n1- screenshot from Altair GraphQl Client:\r\n<img width=\"908\" alt=\"Screen Shot 2020-10-11 at 12 06 34 PM\" src=\"https://user-images.githubusercontent.com/55298084/95675821-37079b00-0bba-11eb-95b3-97bce27372ab.png\">\r\n\r\n\r\n2- screenshot from Xcode:\r\n<img width=\"556\" alt=\"Screen Shot 2020-10-11 at 12 07 25 PM\" src=\"https://user-images.githubusercontent.com/55298084/95675830-54d50000-0bba-11eb-9856-27b9c46de75a.png\">\r\n<img width=\"255\" alt=\"Screen Shot 2020-10-11 at 12 07 39 PM\" src=\"https://user-images.githubusercontent.com/55298084/95675835-5e5e6800-0bba-11eb-88dd-3acebe6ac22f.png\">\r\n\r\n3- screenshot from schema file this one show that the query is there.\r\n<img width=\"414\" alt=\"Screen Shot 2020-10-11 at 12 08 40 PM\" src=\"https://user-images.githubusercontent.com/55298084/95675852-81891780-0bba-11eb-9ea6-3f18185feaca.png\">\r\n\r\n4- screenshot from .graphql file:\r\n<img width=\"746\" alt=\"Screen Shot 2020-10-11 at 12 11 46 PM\" src=\"https://user-images.githubusercontent.com/55298084/95675923-fe1bf600-0bba-11eb-8aa0-3dc3b4c63c2d.png\">\r\n\r\ni really don't know what is the issue here i have tried to clean project file , restart Xcode, restart Mac and the 5 steps mentioned above with no result and the same schema file work just fine with the android team.\r\n\r\nany help will be much appreciated \r\n- `apollo-ios` SDK version: 0.33.0\r\n- Xcode version: 11.6\r\n- Swift version: 5","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"finally i solved the issue.\r\ni was downloading the schema file from terminal using this command:\r\napollo schema:download --endpoint=https://myEndPoint schema.json\r\n\r\nthat was working with me in past but for some unknown reason using this command cause the problem\r\n\r\nThe solution:\r\nDownload schema using CLI script:\r\nSCRIPT_PATH=\"${PODS_ROOT}/Apollo/scripts\"\r\ncd \"${SRCROOT}/${TARGET_NAME}\"\r\n\"${SCRIPT_PATH}\"/run-bundled-codegen.sh schema:download --endpoint=http://myEndPoint schema.json\r\n","author":{"__typename":"User","login":"Hazem-Mohammed","id":"MDQ6VXNlcjU1Mjk4MDg0","name":null}}]}},{"__typename":"Issue","title":"Crash in Alamofire","author":{"__typename":"User","login":"tspecht","id":"MDQ6VXNlcjYwMzE0NA==","name":null},"body":"## Bug report\r\n\r\nSince upgrading to the latest `0.34.0` release line with the revamped networking stack, we are seeing intermittent failures in conjunction with Alamofire. Is this a known issue?\r\n\r\n```\r\nCode Type:             X86-64 (Native)\r\nParent Process:        launchd_sim [2352]\r\nResponsible:           SimulatorTrampoline [2256]\r\nUser ID:               501\r\n\r\nDate/Time:             2020-10-13 14:15:09.012 +0000\r\nOS Version:            Mac OS X 10.15.5 (19F101)\r\nReport Version:        12\r\nAnonymous UUID:        4763FA26-E06C-409D-9FAC-0174438B0AC7\r\n\r\n\r\nTime Awake Since Boot: 2500 seconds\r\n\r\nSystem Integrity Protection: disabled\r\n\r\nCrashed Thread:        7  Dispatch queue: org.alamofire.session.rootQueue\r\n\r\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\r\nException Codes:       KERN_INVALID_ADDRESS at 0x000027b7a55693a0\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nTermination Signal:    Segmentation fault: 11\r\nTermination Reason:    Namespace SIGNAL, Code 0xb\r\nTerminating Process:   exc handler [6910]\r\n\r\nVM Regions Near 0x27b7a55693a0:\r\n    mapped file            000000011638b000-000000011caba000 [103.2M] r--/rwx SM=COW  Object_id=254d583f\r\n--> \r\n    MALLOC_NANO            0000600000000000-0000600008000000 [128.0M] rw-/rwx SM=ALI  \r\n\r\nApplication Specific Information:\r\nCoreSimulator 704.12.2 - Device: iPhone 11 (********-****-****-****-************) - Runtime: iOS 13.7 (17H22) - DeviceType: iPhone 11\r\n\r\nThread 7 Crashed:: Dispatch queue: org.alamofire.session.rootQueue\r\n0   libobjc.A.dylib               \t0x00007fff512b7c6a objc_retain + 10\r\n1   com.apple.Foundation          \t0x00007fff259243bf NSKeyValueWillChange + 510\r\n2   com.apple.Foundation          \t0x00007fff25923ff7 -[NSObject(NSKeyValueObservingPrivate) _changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:] + 487\r\n3   com.apple.Foundation          \t0x00007fff259249f2 -[NSObject(NSKeyValueObservingPrivate) _changeValueForKey:key:key:usingBlock:] + 68\r\n4   com.apple.Foundation          \t0x00007fff2591f6da _NSSetLongLongValueAndNotify + 269\r\n5   com.apple.CFNetwork           \t0x00007fff230f3bfc 0x7fff22f52000 + 1711100\r\n6   com.apple.Foundation          \t0x00007fff2594f28c __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__ + 7\r\n7   com.apple.Foundation          \t0x00007fff2594f1ad -[NSBlockOperation main] + 80\r\n8   com.apple.Foundation          \t0x00007fff259520dc __NSOPERATION_IS_INVOKING_MAIN__ + 17\r\n9   com.apple.Foundation          \t0x00007fff2594e3ee -[NSOperation start] + 731\r\n10  com.apple.Foundation          \t0x00007fff25952a20 __NSOPERATIONQUEUE_IS_STARTING_AN_OPERATION__ + 17\r\n11  com.apple.Foundation          \t0x00007fff25952540 __NSOQSchedule_f + 182\r\n12  libdispatch.dylib             \t0x00007fff520e9344 _dispatch_block_async_invoke2 + 83\r\n13  libdispatch.dylib             \t0x00007fff520dc8cb _dispatch_client_callout + 8\r\n14  libdispatch.dylib             \t0x00007fff520e260c _dispatch_lane_serial_drain + 707\r\n15  libdispatch.dylib             \t0x00007fff520e3044 _dispatch_lane_invoke + 388\r\n16  libdispatch.dylib             \t0x00007fff520ed0c4 _dispatch_workloop_worker_thread + 626\r\n17  libsystem_pthread.dylib       \t0x00007fff52301a3d _pthread_wqthread + 290\r\n18  libsystem_pthread.dylib       \t0x00007fff52300b77 start_wqthread + 15\r\n```\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: `0.34.0`\r\n- Xcode version: 11.7 as well as 12.0\r\n- Swift version: 5.1 as well as 5.3\r\n\r\n## Steps to reproduce\r\n\r\nHappens intermittently, hard to come up with exact steps.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"That's a new one on me - under the hood we're using the same `URLSessionClient` that wraps `URLSession` as we were previously, so there shouldn't be anything messing with `URLSession` that wasn't already happening before. \r\n\r\nThe crash is happening on the Alamofire queue, but it looks like it's happening pretty deep within foundation when a block operation tries to change a value and it triggers KVO, and then something blows up. \r\n\r\nFew questions:\r\n- Have you seen this happen on device or just on sim? \r\n- Have you cleaned your build folder since this happened? \r\n- Did Alamofire also update versions or is it still an older version?\r\n- Are you using the apollo-alamofire wrapper (which is totally separate from this repo) or are you just using AF in parallel to what we're doing? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I see several people have 👍'd this - any further details from anyone would be helpful","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd we have been doing some more experiments on our end, the common denominator so far seems to be recent versions of Firebase. We opened a separate issue in their repository hoping to get some insights on that, would be helpful to know if any of the other users upvoting this here are also using Firebase in their projects. Wondering if there might be some method swizzling going on somewhere? 🤔 \r\n\r\nhttps://github.com/firebase/firebase-ios-sdk/issues/6734","author":{"__typename":"User","login":"tspecht","id":"MDQ6VXNlcjYwMzE0NA==","name":null}},{"__typename":"IssueComment","body":"Oh interesting - yes that definitely seems plausible. For what it's worth our codebase is entirely in Swift, which doesn't completely prevent us from using swizzling but does make it way more of a pain. Either way, we do not use any swizzling. \r\n\r\nFor others running into this issue, are you also using Firebase? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd I am also using Firebase","author":{"__typename":"User","login":"ethan021021","id":"MDQ6VXNlcjE1MzI5NjU4","name":"Ethan"}},{"__typename":"IssueComment","body":"OK - since the stack trace doesn't show anything from the Apollo API, we're not doing any swizzling that could cause the crashes in the stack trace, and there seems to be an issue with the Firebase SDK and other people having this issue seem to also be using Firebase, I'm going to close this issue and direct folks to the [Firebase issue where this is being discussed in significantly more detail](https://github.com/firebase/firebase-ios-sdk/issues/6734). \r\n\r\nThanks all for the heads up on this!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"run-bundled-codegen.sh: No such file or directory","author":{"__typename":"User","login":"mobile-simformsolutions","id":"MDQ6VXNlcjYzMjI1OTEz","name":null},"body":"## run-bundled-codegen.sh: No such file or directory\r\n\r\ni'm implementing this demo as per the documentation (https://www.apollographql.com/docs/ios/tutorial/tutorial-obtain-schema) but after adding script into build phase it will showing me this error:\r\n\r\n**Command PhaseScriptExecution failed with a nonzero exit code**\r\n**Script-3E447D9625386A88004AD507.sh: line 10: /run-bundled-codegen.sh: No such file or directory\r\nCommand PhaseScriptExecution failed with a nonzero exit code**\r\n\r\n![Screenshot 2020-10-16 at 10 32 30 AM](https://user-images.githubusercontent.com/63225913/96215184-e8337a00-0f9a-11eb-8a38-b02591340731.png)\r\n\r\n## Versions\r\n0.34.1\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.34.1\r\n- Xcode version: 12.0.1\r\n- Swift version: 5","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"It looks like you may have skipped step 6, in which you add the build script where the script path is retrieved. It links to [these instructions](https://www.apollographql.com/docs/ios/installation/#adding-a-code-generation-build-step) which are separated out by package manager. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"got it thanks but one suggestion for documentation please make one section where whole script was there.","author":{"__typename":"User","login":"mobile-simformsolutions","id":"MDQ6VXNlcjYzMjI1OTEz","name":null}},{"__typename":"IssueComment","body":"Appreciate the feedback - for what it's worth the reason it's linked is because those instructions had been changing enough that having it in two places meant that it was going to constantly get out of sync. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Help wanted migrating to new Networking stack","author":{"__typename":"User","login":"taher-mosbah","id":"MDQ6VXNlcjIzMDAwODc=","name":"Mohamed Taher Mosbah"},"body":"## Question\r\nGreetings 👋 \r\n\r\nWe are trying to update our custom implementation of a `NetworkTransport` to the new networking stack in version 0.34 but can't seem to figure out where to start, we took a look at the release notes and the documentation `RequestChainNetworkTransport` seems promising but can't figure out how to achieve the same results.\r\n\r\nHere is the current implementation:\r\n\r\n```\r\nimport Foundation\r\nimport Apollo\r\n\r\n/// A network transport that uses HTTP POST requests to send GraphQL operations to a server, and that uses `URLSession` as the networking implementation.\r\npublic class ApolloHTTPGETNetworkTransport: NetworkTransport {\r\n    public enum NetworkError: Swift.Error {\r\n        case invalidURLComponents\r\n    }\r\n\r\n    let url: URL\r\n    let session: URLSession\r\n    let serializationFormat = JSONSerializationFormat.self\r\n    let jsonEncoder = JSONEncoder()\r\n\r\n    /// Creates a network transport with the specified server URL and session configuration.\r\n    ///\r\n    /// - Parameters:\r\n    ///   - url: The URL of a GraphQL server to connect to.\r\n    ///   - configuration: A session configuration used to configure the session. Defaults to `URLSessionConfiguration.default`.\r\n    ///   - sendOperationIdentifiers: Whether to send operation identifiers rather than full operation text, for use with servers that support query persistence. Defaults to false.\r\n    public init(url: URL, configuration: URLSessionConfiguration = URLSessionConfiguration.default, sendOperationIdentifiers: Bool = false) {\r\n        self.url = url\r\n        self.session = URLSession(configuration: configuration)\r\n        self.sendOperationIdentifiers = sendOperationIdentifiers\r\n    }\r\n\r\n    /// Send a GraphQL operation to a server and return a response.\r\n    ///\r\n    /// - Parameters:\r\n    ///   - operation: The operation to send.\r\n    ///   - completionHandler: A closure to call when a request completes.\r\n    ///   - response: The response received from the server, or `nil` if an error occurred.\r\n    ///   - error: An error that indicates why a request failed, or `nil` if the request was successful.\r\n    /// - Returns: An object that can be used to cancel an in progress request.\r\n    public func send<Operation>(operation: Operation, completionHandler: @escaping (Result<GraphQLResponse<Operation.Data>, Error>) -> Void) -> Cancellable where Operation: GraphQLOperation {\r\n        let query = requestBody(for: operation)\r\n        guard var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false) else {\r\n            completionHandler(.failure(NetworkError.invalidURLComponents))\r\n            return EmptyCancellable()\r\n        }\r\n        urlComponents.queryItems = query.compactMap { queryMapItem -> URLQueryItem? in\r\n            guard let queryMapItemValue = queryMapItem.value else { return nil }\r\n            if let queryMapItemValue = queryMapItemValue as? JSONObject {\r\n                guard let queryItemValue = ((try? String(data: JSONSerializationFormat.serialize(value: queryMapItemValue), encoding: .utf8)) as String??) else { return nil }\r\n                return URLQueryItem(name: queryMapItem.key, value: queryItemValue)\r\n            }\r\n            if let queryMapItemValue = queryMapItemValue as? String {\r\n                return URLQueryItem(name: queryMapItem.key, value: queryMapItemValue)\r\n            }\r\n            return nil\r\n        }\r\n\r\n        var request = URLRequest(url: url)\r\n        request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\r\n        request.httpMethod = \"GET\"\r\n        request.url = urlComponents.url\r\n        let task = session.dataTask(with: request) { (data: Data?, response: URLResponse?, error: Swift.Error?) in\r\n            if let error = error {\r\n                completionHandler(.failure(error))\r\n                return\r\n            }\r\n\r\n            guard let httpResponse = response as? HTTPURLResponse else {\r\n                fatalError(\"Response should be an HTTPURLResponse\")\r\n            }\r\n\r\n            if !httpResponse.isSuccessful {\r\n                completionHandler(.failure(GraphQLHTTPResponseError(body: data, response: httpResponse, kind: .errorResponse)))\r\n                return\r\n            }\r\n\r\n            guard let data = data else {\r\n                completionHandler(.failure(GraphQLHTTPResponseError(body: nil, response: httpResponse, kind: .invalidResponse)))\r\n                return\r\n            }\r\n\r\n            do {\r\n                guard let body = try self.serializationFormat.deserialize(data: data) as? JSONObject else {\r\n                    throw GraphQLHTTPResponseError(body: data, response: httpResponse, kind: .invalidResponse)\r\n                }\r\n                let response = GraphQLResponse(operation: operation, body: body)\r\n                completionHandler(.success(response))\r\n            } catch {\r\n                completionHandler(.failure(error))\r\n            }\r\n        }\r\n\r\n        task.resume()\r\n\r\n        return task\r\n    }\r\n\r\n    private let sendOperationIdentifiers: Bool\r\n\r\n    private func requestBody<Operation: GraphQLOperation>(for operation: Operation) -> GraphQLMap {\r\n        if sendOperationIdentifiers {\r\n            guard let operationIdentifier = operation.operationIdentifier else {\r\n                preconditionFailure(\"To send operation identifiers, Apollo types must be generated with operationIdentifiers\")\r\n            }\r\n            return [\"id\": operationIdentifier, \"variables\": operation.variables]\r\n        }\r\n        return [\"query\": operation.queryDocument, \"variables\": operation.variables]\r\n    }\r\n}\r\n\r\nfileprivate extension HTTPURLResponse {\r\n    var isSuccessful: Bool {\r\n        return (200..<300).contains(statusCode)\r\n    }\r\n\r\n    var statusCodeDescription: String {\r\n        return HTTPURLResponse.localizedString(forStatusCode: statusCode)\r\n    }\r\n\r\n    var textEncoding: String.Encoding? {\r\n        guard let encodingName = textEncodingName else { return nil }\r\n\r\n        return String.Encoding(rawValue: CFStringConvertEncodingToNSStringEncoding(CFStringConvertIANACharSetNameToEncoding(encodingName as CFString)))\r\n    }\r\n}\r\n\r\n```\r\n\r\nfeel free to ask me any questions about the code and thanks for your time !\r\n\r\n## Versions\r\n- `apollo-ios` SDK version: 0.34.1\r\n- Xcode version: 120.1\r\n- Swift version: 5.3","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"So it looks like you could probably get to this point with what you're doing by passing in a custom `RequestBodyCreator` to `RequestChainNetworkTransport` and then setting the `useGETForQueries` parameter to `true` - I believe almost all the rest of this is handled for you automatically in the RCNT otherwise.\r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@taher-mosbah Anything else I can help with here? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"thanks for your answer, it's clear will try to implement as soon as I got the time 😄 ","author":{"__typename":"User","login":"taher-mosbah","id":"MDQ6VXNlcjIzMDAwODc=","name":"Mohamed Taher Mosbah"}}]}},{"__typename":"Issue","title":"Swift scripting error with xcode 12","author":{"__typename":"User","login":"jdevng","id":"MDQ6VXNlcjI2ODE3NDEw","name":null},"body":"## Bug report\r\n\r\nInitialization of Codegen directory at \r\n\r\nhttps://www.apollographql.com/docs/ios/swift-scripting/\r\n\r\nresults in error.\r\n\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.35\r\n- Xcode version:  12.0.1\r\n- Swift version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)\r\n\r\n## Steps to reproduce\r\n```\r\n\r\n% swift packet init --type executable\r\nerror: unable to invoke subcommand: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-packet (No such file or directory)\r\n```\r\n\r\n\r\n## Further details\r\n\r\nPlease replace this line with any further details or context necessary to understand the problem. Delete this section if you don't have anything further to add.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I think you mean `swift package --init` rather than `swift packet --init`","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I'm blind. Will delete :) Thank you. Should learn to copy!","author":{"__typename":"User","login":"jdevng","id":"MDQ6VXNlcjI2ODE3NDEw","name":null}}]}},{"__typename":"Issue","title":"set the timeout of the ApolloCodegenLib","author":{"__typename":"User","login":"wongzigii","id":"MDQ6VXNlcjczODQyODg=","name":"Zigii Wong"},"body":"I am following the guide to download zip file with CLI.\r\nHow can I set the timeout of the ApolloCodegenLib:CLIDownloader ?\r\nMy network is so bad :(\r\n\r\n```\r\nswift run\r\n[DEBUG - ApolloCodegenLib:CLIDownloader.swift:72] - Downloading zip file with the CLI...\r\ndownloadTimedOut(after: 30.0)\r\n```","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"For anyone stumbling across this, all of the methods to call into the codegen lib should have a `timeout` parameter. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Create WebsocketTransport without connecting automatically","author":{"__typename":"User","login":"winstondu","id":"MDQ6VXNlcjgxNzQzMTA=","name":"Winston Du"},"body":"## Feature request\r\n\r\nCurrently, the designated initializer for the WebSocketTransport[ immediately connects the websocket. ](https://github.com/apollographql/apollo-ios/blob/cf537701e407bed1a13df6dd6288d641abdda42a/Sources/ApolloWebSocket/WebSocketTransport.swift#L128)\r\n\r\nWe wish to manually control when it does its first connection.\r\n\r\n## Motivation\r\n\r\nWe want to our app's webservers to able to handle load, and at high traffic times we actually want the ability to disable automatic websocket connections to our server at app startup.\r\n\r\n## Proposed solution\r\n\r\nAdd a parameter to the [designated initializer](https://github.com/apollographql/apollo-ios/blob/cf537701e407bed1a13df6dd6288d641abdda42a/Sources/ApolloWebSocket/WebSocketTransport.swift#L128) on whether the websocket should connect immediately on initialization. In otherwords, wrap the `websocket.connect()` call in an `if` statement.\r\n\r\nAdditional notes:  \r\nBecause the mutex-locked `reconnect` parameter only comes into play after the the first disconnection (which can only happen after the first connection), that parameter does not affect things.\r\n  \r\n## Outstanding Questions\r\n- It is up to the implementor to decide whether there should be a separate api for the first websocket connection, or if the developer can just call `reconnectWebSocket()`","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Seems like a reasonable request, and thank you for adding a PR! I'll keep feedback over on the PR just for the sake of clarity. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"allowSpecificHTTPSCertificateForHost warning in iOS 14","author":{"__typename":"User","login":"DiwakarThapa","id":"MDQ6VXNlcjI5OTE3Nzk5","name":"diwakar thapa"},"body":"I started receiving following warning on Xcode after I update my iPhone to iOS 14. How to fix this warning? \r\n ## Warning\r\nnil host used in call to allowSpecificHTTPSCertificateForHost: \r\nnil host used in call to allowAnyHTTPSCertificateForHost:\r\nnil host used in call to allowSpecificHTTPSCertificateForHost: \r\nnil host used in call to allowAnyHTTPSCertificateForHost:\r\n\r\n## Network Transport \r\nprivate  var networkTransport: HTTPNetworkTransport  {\r\n        let configuration = URLSessionConfiguration.default\r\n        configuration.timeoutIntervalForResource = 65\r\n        configuration.timeoutIntervalForRequest = 65\r\n        let client = URLSessionClient(sessionConfiguration: configuration)\r\n        let transport = HTTPNetworkTransport(url: URL(string: self.baseUrl)!, client: client)\r\n        transport.delegate = self\r\n        return transport\r\n    }\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.30.0\r\n- Xcode version: 11.2.1\r\n- Swift version:  5","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Wow, weird! Never seen that before. We're not doing anything that I'm aware of that should be calling any of those methods. \r\n\r\nWould be curious if this is still happening in versions `0.34.0` and above - we made some pretty significant changes to the networking stack there. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@DiwakarThapa Is there any further information you can share here? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Since I haven't heard back in a couple weeks, I'm going to close this out - @DiwakarThapa if you get more info feel free to reopen. Anyone else with a similar problem, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Initializer default values make it very easy to accidentally create 2 distinct ApolloStore's","author":{"__typename":"User","login":"namolnad","id":"MDQ6VXNlcjYxNDg0ODA=","name":"Dan Loman"},"body":"## Bug report\r\n\r\nCurrently it's very easy, through default initializer values, to end up with multiple ApolloStore's and the inability to properly invalidate your cache. I just spent a fair amount of time debugging this issue, which I think could be resolved by removing some default values in one or both the `ApolloClient`'s and `LegacyInterceptorProvider`'s initializers. The problem is as follows:\r\n\r\n``` swift\r\nlet interceptorProvider: LegacyInterceptorProvider = .init() // More likely to use your own subclass for authentication\r\nlet transport: RequestChainNetworkTransport = .init(\r\n    interceptorProvider: interceptorProvider,\r\n    endpointURL: baseUrl.appendingPathComponent(\"graphql\")\r\n)\r\nlet client: ApolloClient = .init(\r\n    networkTransport: transport\r\n)\r\n```\r\n\r\nThe above code creates two separate `ApolloStore`'s with default caches of `InMemoryNormalizedCache()` for both the `LegacyInterceptorProvider` and for the `ApolloClient`. When going to invalidate your cache here, you will invalidate one of the caches (the ApolloStore one), but the InterceptorProvider's cache will remain untouched, which is where results seem to be fetched from, thus making it impossible to actually invalidate the cache. Without these default values, I believe this problem would be obvious to the developer.\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.34.0\r\n- Xcode version: 12.0.1\r\n- Swift version: 5.3\r\n\r\n## Steps to reproduce\r\n\r\nInitialize the ApolloClient using default values, as above.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Yeah this is basically a dupe of #1438 - I'm going to take a look at your solution, I was still pondering exactly how to get this set up in a friendlier way. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Yup, definitely a dupe — sorry for missing that and thanks for taking a look!","author":{"__typename":"User","login":"namolnad","id":"MDQ6VXNlcjYxNDg0ODA=","name":"Dan Loman"}},{"__typename":"IssueComment","body":"This has shipped with `0.36.0`!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"graphql file with description","author":{"__typename":"User","login":"wongzigii","id":"MDQ6VXNlcjczODQyODg=","name":"Zigii Wong"},"body":"Any way to add description to graphql file? This results in errors in compile time.\r\n\r\nA good example would be:\r\n\r\n```\r\n\"\"\"\r\nA simple GraphQL schema which is well described.\r\n\"\"\"\r\nschema {\r\n  query: Query\r\n}\r\n```\r\n\r\nhttp://spec.graphql.org/draft/#sec-Descriptions\r\n\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"In theory that should not result in errors - can you give an example of a file where this is resulting in errors, along with the errors? Any information around your setup would also be really helpful. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Just add \r\n\r\n    \"\"\"\r\n    A simple GraphQL schema which is well described.\r\n    \"\"\"\r\n\r\nto the first line of any .graphql file and Build then you will see the error.\r\n\r\n    Showing Recent Messages\r\n    Error: Syntax error in \r\n\r\n    file:///Users/mac/a.graphql: Syntax \r\n\r\n    Error: Unexpected Name \"query\".\r\n\r\n","author":{"__typename":"User","login":"wongzigii","id":"MDQ6VXNlcjczODQyODg=","name":"Zigii Wong"}},{"__typename":"IssueComment","body":"Are you trying to add this to your operation graphQL files, or to the Schema graphQL file? This syntax is intended for the schema - you can see an example in [the version of the GitHub Schema we're using for some tests](https://github.com/apollographql/apollo-ios/blob/main/Sources/GitHubAPI/schema.docs.graphql). \r\n\r\nIf you were to try to add this to an operation's graphQL file like: \r\n\r\n```graphQL\r\n\"\"\"\r\nA simple GraphQL schema which is well described.\r\n\"\"\"\r\nquery UserInfo($id: ID!) {\r\n  user(id: $id) {\r\n    name\r\n  }\r\n}\r\n```\r\n\r\nThat would not compile. Does that help? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@wongzigii Any thoughts on my response? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Good to know! Thanks @designatednerd ","author":{"__typename":"User","login":"wongzigii","id":"MDQ6VXNlcjczODQyODg=","name":"Zigii Wong"}}]}},{"__typename":"Issue","title":"Is there any way to have a hybrid cache instead of memory/disk exclusively?","author":{"__typename":"User","login":"malonehedges","id":"MDQ6VXNlcjEyMDkyMjk2","name":"Malone Hedges"},"body":"Is there any official (or community) support for a hybrid cache for Apollo iOS?","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Not at this time but I have had at least one customer talk to us about this. We're gonna be doing some heavy work around the cache in the next couple months but probably after that we can take a look. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Awesome, would love to adopt a hybrid cache when one is available","author":{"__typename":"User","login":"malonehedges","id":"MDQ6VXNlcjEyMDkyMjk2","name":"Malone Hedges"}}]}},{"__typename":"Issue","title":"some thoughts on Interceptors","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"},"body":"## Feedback\r\n\r\nI just update from 0.33.0 to 0.36.0 and want to share some thoughts on Interceptors.\r\n\r\n- confusing what does proceedAsync, handleErrorAsync, retry and kickoff do. If I have error in response and want to retry do I call retry? or kickoff?\r\n- `Request`ChainNetworkTransport but you pass response Interceptors to it (as request and response interceptors are the same list)\r\n- confusing that same call used for request and response, only way to check for response == nil in `interceptAsync`\r\n- `TokenAddingInterceptor` from docs adds Authorization header to request not depending if its request or response. Is that how it should be?\r\n- `RequestChainNetworkTransport` have `additionalHeaders` - shouldn't this be interceptor?\r\n- there is `AutomaticPersistedQueryInterceptor` and also `autoPersistQueries` on `RequestChainNetworkTransport` what should I use?\r\n- There is `LegacyInterceptorProvider` but something not \"legacy\" (`NetworkInterceptorProvider`) only mentioned in documentation. How do I create custom provider where I add only my interceptors and leave \"default\" ones untouched? `NetworkInterceptorProvider` from docs have 10 interceptors, `LegacyInterceptorProvider` have 7. Should I inherit from `LegacyInterceptorProvider` or should I copy one from docs and constantly track if new Interceptor will just appear in the list?\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.36.0\r\n- Swift version: 5.3","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"comment about `TokenAddingInterceptor` is invalid as it is inserted in first place (so it can't be response)","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"> confusing what does proceedAsync, handleErrorAsync, retry and kickoff do. If I have error in response and want to retry do I call retry? or kickoff?\r\n\r\n- `proceedAsync` is called anytime you want to have the chain proceed to the next interceptor\r\n- `handleErrorAsync` is called anytime you want to have the chain return an error to the original caller\r\n- `kickoff` should only be called by you when you want to start the chain from scratch.\r\n- `retry` should be called if you want to retry a request - it will [reset the interceptor index under the hood and call `kickoff` to restart the chain](https://github.com/apollographql/apollo-ios/blob/9c624bbcfa1c8b3b909ee0c53ec43ebb1a50e944/Sources/Apollo/RequestChain.swift#L129). You should use this method rather than trying to reset the index yourself. Basically, don't call `kickoff` on the chain from within an interceptor, call `retry`. \r\n\r\n> RequestChainNetworkTransport but you pass response Interceptors to it (as request and response interceptors are the same list) confusing that same call used for request and response, only way to check for response == nil in interceptAsync\r\n\r\nI'm not totally clear on what the question here is - is it \"Why are we using the same interceptors for preparing a request as handling a response?\" If yes, please confirm, if not, please clarify. Thanks. \r\n\r\n> TokenAddingInterceptor from docs adds Authorization header to request not depending if its request or response. Is that how it should be?\r\n\r\nYes - the idea of that is that you put it first so that it is the first change applied before a request goes out. \r\n\r\n> RequestChainNetworkTransport have additionalHeaders - shouldn't this be interceptor?\r\n\r\nThese are intended to be additional headers that must be added to every single request, and which do not change (for example, an API key or a language setting). The interceptors are intended for things which may change (for example, a user's authentication token). \r\n\r\n> there is AutomaticPersistedQueryInterceptor and also autoPersistQueries on RequestChainNetworkTransport what should I use?\r\n\r\nThe short answer is both - `autoPersistQueries` tells you whether auto-persisted queries should be used at all, and the interceptor does the work of checking for APQ-related errors and auto-retrying when needed. Essentially, `autoPersistQueries` tells you if you should send APQ hashes outgoing, and the interceptor handles incoming responses to tell if you need to retry due to an APQ failure. \r\n\r\n> There is LegacyInterceptorProvider but something not \"legacy\" (NetworkInterceptorProvider) only mentioned in documentation. How do I create custom provider where I add only my interceptors and leave \"default\" ones untouched? NetworkInterceptorProvider from docs have 10 interceptors, LegacyInterceptorProvider have 7. Should I inherit from LegacyInterceptorProvider or should I copy one from docs and constantly track if new Interceptor will just appear in the list?\r\n\r\nYou _can_ inherit from `LegacyInterceptorProvider`, and override the method providing the array of interceptors. This is easier if you're putting interceptors at the beginning or end of the array rather than interspersing them throughout. If they're interspersed, it's likely better create your own implementation of `InterceptorProvider` and using the array provided by `LegacyInterceptorProvider` as a starting point. \r\n\r\nI will call out in release notes if any changes are made to the `LegacyInterceptorProvider`, particularly new interceptors - the intent is that the core interceptors should not change. \r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I was going through a similar thinking process as @RolandasRazma yesterday doing the same 0.33->0.36 migration. Would be super helpful if you added these explanations to the documentation for other people. ","author":{"__typename":"User","login":"Nealsoni00","id":"MDQ6VXNlcjcwMTMxOTE=","name":"Neal Soni"}},{"__typename":"IssueComment","body":"Have y'all had a chance to read through [the updated client creation documentation](https://www.apollographql.com/docs/ios/initialization/#advanced-client-creation), particularly the [section on how the request chain works](https://www.apollographql.com/docs/ios/initialization/#how-the-requestchain-works)? I would be particularly interested in where you feel like that's not clear enough. Thanks!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I did, I think for me most confusion would have been averted if:\r\n\r\n- there would be 2 lists: pre server call and post server call having different call signature (no reply in \"pre\" ones)\r\n- there would be no \"Legacy\" in class names as it made not clear what to use\r\n- don't feel feel comfortable of just copying list of \"default\" interceptors as that list might change without the realising","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"> there would be 2 lists: pre server call and post server call having different call signature (no reply in \"pre\" ones)\r\n\r\nOne of the reasons I went with a single chain is we've had repeated feature requests to have the data associated with what was being requested passed through to the completion handler. I will be taking a look at some options based on feedback here, I think maybe there could be some other options that might make `NetworkTransport` unnecessary and allow the user to send data through any transport (ie, send it with a websocket if you really feel like it). \r\n\r\n> there would be no \"Legacy\" in class names as it made not clear what to use\r\n\r\nOK. I believe I tried to explain \"Legacy\" vs \"Codable\" as \"What we've been using\" vs \"What we will be using in the future\" in those docs, but it sounds like that didn't help. I'll try to clarify that.\r\n\r\n> don't feel feel comfortable of just copying list of \"default\" interceptors as that list might change without the realising\r\n\r\nI mean, that's going to be a problem no matter what if you need to intersperse different interceptors - if you're subclassing hte default list and relying on the default order in terms of where to insert your interceptors, that's going to cause problems too. Again, I can certainly commit to making sure I make it very clear in release notes when any of this changes. \r\n","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@RolandasRazma @Nealsoni00 I've just opened a PR with updated docs. Would love your feedback on #1484. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> One of the reasons I went with a single chain is we've had repeated feature requests to have the data associated \r\n\r\nEverything could still work as it does now under the hood. 2 list would allow to not have \"response\" in pre list\r\n\r\n> I mean, that's going to be a problem no matter what\r\n\r\nthat's not necessary true if there would be 2 lists as in most cases you need \"pre action\" and \"post action\"\r\n\r\n\r\nI already migrated and now it's more clear what's going on so I'm not advocating for a change. Most likely all new users will do better as they have no expectations ","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":">  2 list would allow to not have \"response\" in pre list\r\n\r\nThat's fair. \r\n\r\n> I'm not advocating for a change.\r\n\r\nI think if we're gonna make one it's better to do it sooner rather than later, honestly. I also need to think a few things over, to be honest.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"OK, I've merged #1464. I will continue to think about what could work to make it easier to deal with when an interceptor will be called - pre or post response - and see what I can come up with. However, I wanted to check - do you feel there's anything else here that still needs to be directly addressed before we can close this issue out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I will close it","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"@RolandasRazma thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Crash in 0.36.0","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"},"body":"## Bug report\r\n\r\nCrash using interceptors\r\n\r\n<img width=\"1024\" alt=\"Screenshot 2020-10-26 at 18 37 05\" src=\"https://user-images.githubusercontent.com/1027187/97213977-4857c680-17ba-11eb-902d-90d617d3ef97.png\">\r\n\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.36.0\r\n- Swift version: 5.3\r\n\r\n## Steps to reproduce\r\n\r\nI have TokenAddingInterceptor that retrieves token from server and asynchronously calls `chain.proceedAsync`. I have check for TokenAddingInterceptor being released to not call up the chain on dealloc, so that's not the case.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"The crash is happening in the `URLSessionClient` rather than in any of the interceptors - it looks like the client either a) Hasn't had a chance to set up its `URLSession` or b) has had the session torn down. \r\n\r\nCan you share how you're setting up your `TokenAddingService`? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"There is nothing interesting to see there. It just check for token validity if it it expired updates it from server and calls back. I will try to trace/fix crash as it's blocking us, but as its another race condition its not going to be simple as I can't even replicate it reliably. Sometimes it crashes every run (tests) sometimes I hit https://github.com/apollographql/apollo-ios/issues/1376 and sometimes all tests passes without any problem :)","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"I can replicate it with example from https://www.apollographql.com/docs/ios/tutorial/tutorial-mutations/\r\n\r\n```swift\r\nclass TokenAddingInterceptor: ApolloInterceptor {\r\n    func interceptAsync<Operation: GraphQLOperation>(chain: RequestChain, request: HTTPRequest<Operation>, response: HTTPResponse<Operation>?, completion: @escaping (Result<GraphQLResult<Operation.Data>, Error>) -> Void) {\r\n        DispatchQueue.main.async { [weak self] in\r\n            guard self != nil else { return }\r\n            chain.proceedAsync(request: request, response: response, completion: completion)\r\n        }\r\n    }\r\n    \r\n}\r\n```","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"This is how memory graph looks for crashing client\r\n\r\n<img width=\"445\" alt=\"Screenshot 2020-10-27 at 10 39 03\" src=\"https://user-images.githubusercontent.com/1027187/97290611-b0e98680-1840-11eb-8bf9-e3690946ecf1.png\">\r\n","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"NetworkFetchInterceptor:32 don't you need `self.currentTask?.cancel()` before it?\r\n\r\nP.S. adding cancel didn't stop crash, but still, don't you need it there? (made PR https://github.com/apollographql/apollo-ios/pull/1476)","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"Ok, what's happening is that `RequestChain` (created in `RequestChainNetworkTransport`) lifetime is longer than `LegacyInterceptorProvider` and `LegacyInterceptorProvider` does `shouldInvalidateClientOnDeinit` \r\n\r\n`RequestChain` is created in `RequestChainNetworkTransport`, `LegacyInterceptorProvider` is released invalidating client and `RequestChain` knows nothing about it. \r\n\r\nI managed to \"solve\" it by retaining link to chain in `RequestChainNetworkTransport` and canceling it in `deinit` - not sure if that's correct thing to do, as that would imply that I need to cancel it on send as well (or retain all references created by send)","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"sorry for spam @designatednerd ","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"I thought not retaining chain would help\r\n\r\n```swift\r\nclass TokenAddingInterceptor: ApolloInterceptor {\r\n    func interceptAsync<Operation: GraphQLOperation>(chain: RequestChain, request: HTTPRequest<Operation>, response: HTTPResponse<Operation>?, completion: @escaping (Result<GraphQLResult<Operation.Data>, Error>) -> Void) {\r\n        DispatchQueue.main.async { [weak self, weak chain] in\r\n            guard self != nil else { return }\r\n            chain?.proceedAsync(request: request, response: response, completion: completion)\r\n        }\r\n    }\r\n    \r\n}\r\n```\r\n\r\nbut that's not the case - it is deallocated before we can update token and call to server never executed","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"right - if you let go of the chain there there's nothing hanging on to it, so ARC smashes it. \r\n\r\nI'm surprised the legacy interceptor provider is getting deallocated - that indicates that the Request Chain Network Transport itself is getting deallocated. I would really like to see how you're setting this stuff up for tests - it seems like maybe something is calling into an old instance of RCNT in different tests. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"`RequestChainNetworkTransport` is deallocated, but the problem is not that it is deallocated, the problem is that it doesn't cleanup properly while it does that\r\n\r\n```swift\r\nclass TokenAddingInterceptor: ApolloInterceptor {\r\n    func interceptAsync<Operation: GraphQLOperation>(chain: RequestChain, request: HTTPRequest<Operation>, response: HTTPResponse<Operation>?, completion: @escaping (Result<GraphQLResult<Operation.Data>, Error>) -> Void) {\r\n        DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(1)) { [weak self] in\r\n            guard self != nil else { return }\r\n            chain?.proceedAsync(request: request, response: response, completion: completion)\r\n        }\r\n    }\r\n}\r\n\r\nlet transport = RequestChainNetworkTransport(...)\r\nlet apolloClient = ApolloClient(networkTransport: transport, ...)\r\napolloClient.fetch(query: ...)\r\n```\r\n\r\nwill make whole app crash in 1 second because `ApolloClient` will be deallocated together with `RequestChainNetworkTransport` while `RequestChain` will be retained by block (and it has to be)\r\n\r\nCrash will happen because deallocatingin `LegacyInterceptorProvider` will call `client.invalidate()` that will nil `URLSessionClient.sesion` and after 1 sec it will be accessed with force unwrap","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"this is the crash https://github.com/apollographql/apollo-ios/pull/1480","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"I guess easy workaround would be to remove force unwrap, but the real problem is that `RequestChain` don't know that it is no longer needed. Correct fix would be to add \"cancel\" for chain in `RequestChainNetworkTransport` as mentioned in https://github.com/apollographql/apollo-ios/issues/1473#issuecomment-717173144 the only difficulty it that there is multiple chains per transport and all of them needs to be cancelled","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"Created PR with workaround https://github.com/apollographql/apollo-ios/pull/1481 but somehow don't fee good about it :) It doe's work, but feels like some code smell","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"should I close this?","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"I'll close it when it actually ships","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"GraphQLError parsing issue in response?.parsedResponse ","author":{"__typename":"User","login":"StanislavCekunov","id":"MDQ6VXNlcjk3NzQ0Nzc=","name":null},"body":"Hello Apollo community,\r\nI am currently updating our codebase to support `RequestChainNetworkTransport` interface. \r\nIn a previous structure I used `HTTPNetworkTransportGraphQLErrorDelegate` to catch `GraphQLError` to initiate access token update and retryHandler to retry faild request. \r\n\r\nWith the new `RequestChain` structure I am perfoming same action inside ResponseCodeInterceptor. Though, `GraphQLError` is not being parced anymore. I am accessing it by `response?.parsedResponse?.errors`\r\n\r\nHere is the response raw data: \r\n`{\"errors\":[{\"message\":\"Access denied\",\"path\":[\"getUserDetails\"],\"locations\":[{\"line\":2,\"column\":1}],\"extensions\":{\"code\":\"accessTokenExpired\"}}],\"data\":null}`\r\n\r\nWould love to get some help or suggestions where is the right way to fetch `GraphQLError` this time.\r\nAm I doing something wrong? \r\nThanks\r\n\r\n## Versions\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.36.0\r\n- Swift version: 5.3\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I would probably do this check in an interceptor that runs after `LegacyParsingInterceptor` - that's where the actual parsing takes place, and after it's gone through that inteceptor, you should be able to access it using `response?.parsedResponse?.errors`. \r\n\r\nThe `ResponseCodeInterceptor` that's provided by default is mostly just checking to make sure the response code is something vaguely sane before attempting to parse the result","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Thank you @designatednerd !\r\nI have added a new interceptor `AccessTokenValidationInterceptor` right after `LegacyParsingInterceptor`. \r\nSolved. 🙌 \r\n\r\n","author":{"__typename":"User","login":"StanislavCekunov","id":"MDQ6VXNlcjk3NzQ0Nzc=","name":null}},{"__typename":"IssueComment","body":"@StanislavCekunov Mind if we close this out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Using same query with different set of fields","author":{"__typename":"User","login":"vani2","id":"MDQ6VXNlcjQ3MzQ5ODM=","name":"Ivan Vavilov"},"body":"## Question\r\n\r\nI have query of `draftProfile` and `profile`\r\n\r\n```GraphQL\r\nquery fetchProfile {\r\n    draftProfile {\r\n        firstName\r\n        secondName\r\n    },\r\n    profile {\r\n        firstName\r\n        secondName \r\n    }\r\n}\r\n```\r\n\r\nLater I need to make the same query but only `profile` object.\r\n\r\n```GraphQL\r\nquery fetchProfile {\r\n    profile {\r\n        firstName\r\n        secondName \r\n    }\r\n}\r\n``` \r\n\r\nIf I declare these two queries I get the error `There are multiple definitions for the `fetchProfile` operation. Please rename or remove all operations with the duplicated name before continuing.`.\r\n\r\nHow I can make it possible? \r\n\r\n## Versions\r\n\r\n- `apollo-ios` SDK version: 0.35\r\n- Xcode version: 12.0\r\n- Swift version: 5.3","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"You need to give the two queries different names at the `query fetchProfile` point. Maybe `query fetchProfileWithDraft` for that top one and just `fetchProfile` for the bottom one? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Oh, yes, that's easy. Thanks.","author":{"__typename":"User","login":"vani2","id":"MDQ6VXNlcjQ3MzQ5ODM=","name":"Ivan Vavilov"}}]}},{"__typename":"Issue","title":"XCode 12 : Could not find module ‘Apollo’ for target ‘arm64-apple-ios-simulator’; found: x86_64-apple-ios-simulator, x86_64","author":{"__typename":"User","login":"poorvasingh04","id":"MDQ6VXNlcjIwMDkwODU5","name":"Poorva Singh"},"body":"## Bug report\r\n\r\nXCode 12 : Could not find module ‘Apollo’ for target ‘arm64-apple-ios-simulator’; found: x86_64-apple-ios-simulator, x86_64\r\nUnable to build app against iOS simulator using XCode 12.\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.27.1 and 0.36.0\r\n- Xcode version: 12\r\n- Swift version: 5\r\n\r\n## Steps to reproduce\r\nBuild code against iOS simulator. I am using app to build against iOS simulator for UI tests.\r\n\r\n## Further details\r\n\r\nCode fails to compile. I also added following post install script in podfile:\r\n\r\npost_install do |pi|\r\n    pi.pods_project.targets.each do |t|\r\n        t.build_configurations.each do |config|\r\n            config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '11.0'\r\n            config.build_settings[\"EXCLUDED_ARCHS[sdk=iphonesimulator*]\"] = \"arm64\"\r\n        end\r\n    end\r\nend\r\n\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"It looks like your post-install script's change `EXCLUDED_ARCHS` is actively excluding the `arm64` type that the compiler is looking for. Is there a particular reason why you're excluding that? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd yes. To compile with Xcode 12 against iOS simulator, we need to exclude arm64 architecture in app and all the linked pods. This is same issue as described here: https://stackoverflow.com/questions/63607158/xcode-12-building-for-ios-simulator-but-linking-in-object-file-built-for-ios","author":{"__typename":"User","login":"poorvasingh04","id":"MDQ6VXNlcjIwMDkwODU5","name":"Poorva Singh"}},{"__typename":"IssueComment","body":"Interesting - there's a related suggestion in there about making sure that `ONLY_ACTIVE_ARCH` is set to yes for your debug setup. In a sample CocoaPods app I've got where that's set up I have not seen this issue.\r\n\r\nI *think* as long as you're not building on a developer transition kit, setting that up should help with this, since it seems like Xcode is trying to build the universe, then complaining that the thing you specifically told it not to build isn't there.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd  ONLY_ACTIVE_ARCH is already set to Yes","author":{"__typename":"User","login":"poorvasingh04","id":"MDQ6VXNlcjIwMDkwODU5","name":"Poorva Singh"}},{"__typename":"IssueComment","body":"🤔 That's...very odd if you're not on a developer transition kit. Are you on a developer transition kit? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd no. I am not in a developer transition kit. I am trying to build app against simulator for my UI tests but it fails with Xcode 12.1","author":{"__typename":"User","login":"poorvasingh04","id":"MDQ6VXNlcjIwMDkwODU5","name":"Poorva Singh"}},{"__typename":"IssueComment","body":"Here's a couple other things I can think of that are unlikely but worth checking: \r\n\r\n- If there's more than one target in your project, are all targets in your project set for `ONLY_ACTIVE_ARCH`, or just the main application?\r\n- Is your scheme set to run the tests in release mode rather than debug mode? \r\n- Is there something about XCUI tests that's trying to build the app for release even though your tests are set in debug?\r\n\r\nIf none of those turn up the problem, do you mind either emailing me your project or a sample project that reproduces this issue? ellen at apollographql dot com. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Were you ever able to figure this out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Race condition when unsubscribing","author":{"__typename":"User","login":"marioradonic","id":"MDQ6VXNlcjQxNTg3Mzc=","name":null},"body":"## Bug report\r\n\r\nI've been randomly (but often) getting `.unprocessedMessage` errors in my `.subscribe(...` handlers. I had a look at the code and it seems to me that there is a possible race condition.\r\n\r\nWhen [unsubscribing](https://github.com/apollographql/apollo-ios/blob/e0f65fee8c197239dbefbf1386b8e7f83b684f25/Sources/ApolloWebSocket/WebSocketTransport.swift#L301) from a subscribe task websocket message is sent requesting the subscription to stop and handler is released. It might be possible that a message is received from the socket with the update before the backend has time process this stop message and stop sending the messages. So in the [processMessage](https://github.com/apollographql/apollo-ios/blob/e0f65fee8c197239dbefbf1386b8e7f83b684f25/Sources/ApolloWebSocket/WebSocketTransport.swift#L146) method we end up in [this clause](https://github.com/apollographql/apollo-ios/blob/e0f65fee8c197239dbefbf1386b8e7f83b684f25/Sources/ApolloWebSocket/WebSocketTransport.swift#L177) because there is no subscription handlers any more. And then **all** the other handlers are notified about this error. This doesn't seem right to me as there was nothing wrong with other subscriptions.\r\n\r\nI'm not an expert in web sockets, so I don't know what the best solution would be. Maybe wait for the ack message from backend? But then the subscriber might get a message after cancelling the task, which is not nice. Maybe keep an intermittent array of task ids whose cancellation hasn't been acknowledged by the backend and ignore messages for those subscribers? That is if there is a stop acknowledge message from backend.\r\n\r\nI don't mind creating a PR if someone suggests the approach on how to fix this.\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.35.0\r\n- Xcode version: 12.1\r\n- Swift version: 5.3\r\n\r\n## Steps to reproduce\r\n\r\nI have a rx code in format of:\r\n`subscribeSomething().flatMapLatest { subscribeSomethingElse(using: $0) }`\r\n\r\nWhen the first subscription updates the second one is cancelled and new one is created.\r\n\r\n## Further details\r\n\r\nI can probably restructure my query so it's all done in one subscription, which would fix my issue but the underlying problem will still be there although it might happen less often.\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"I don't have any bright ideas on this one, websockets are also not my area of expertise. \r\n\r\n@fassko, if you're around, would love to hear any thoughts you have.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I was using GraphQL subscriptions with just one subscription. Otherwise, you can run into these weird side effects that you explained.","author":{"__typename":"User","login":"fassko","id":"MDQ6VXNlcjI5NDgy","name":"Kristaps Grinbergs"}},{"__typename":"IssueComment","body":"@fassko Well, it was worth a shot 🙃\r\n\r\n@marioradonic - Are you subscribing to the same `subscription` from your schema multiple times, or are there different `subscription`s defined that you're using? Basically, are your multiple subscriptions all returning the same information, or different information?","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@designatednerd I am using multiple. Basically, I am subscribing to entity A, and when it updates I subscribe to entity B, cancelling the previous B subscription if there was any. (this cancelled subscription causes the problem - if the message comes from the backend with the cancelled subscription id the first entity A subscriber and the new B subscriber get the error message.\r\n\r\nI had another look at the websocket connection and it seems there is no closing acknowledgment message from the backend upon closing the subscription. So I'm not sure at which point should an unhandled message be considered an internal error. In any case I don't think it's a good API design that all the other subscribers get the error message, since nothing is wrong with their subscriptions. Maybe there could be a global error handler for these kinds of errors?\r\n\r\n","author":{"__typename":"User","login":"marioradonic","id":"MDQ6VXNlcjQxNTg3Mzc=","name":null}},{"__typename":"IssueComment","body":">cancelling the previous B subscription if there was any. \r\n\r\nIn theory you shouldn't have to cancel any existing subscription to entity B - if you've already got a running subscription it should continue to get all updates.\r\n\r\nIt may help me understand a bit better if you can give a concrete example of what entity A and entity B are representing. To take an example from our sample code, if you've subscribed to all reviews of Star Wars episodes, then as soon as you get a review of _Return of the Jedi_ kick off a second subscription that only handles _Jedi_ reviews, any further reviews that come in on that first subscription for _Jedi_ would also come in on the second subscription, without needing to stop and restart. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"spectrum.chat/apollo link is unavailable, Heroku error shown","author":{"__typename":"User","login":"gemmakbarlow","id":"MDQ6VXNlcjMzNzk2Mw==","name":"Gemma Barlow"},"body":"## Bug report\r\n\r\nMorning folks ! \r\n\r\nNot technically an Apollo bug, but I wanted to flag that https://spectrum.chat/apollo, linked from [CONTRIBUTING.md](https://github.com/apollographql/apollo-ios/blob/main/CONTRIBUTING.md), is currently returning a Heroku error.\r\n\r\n<img width=\"1773\" alt=\"Screen Shot 2020-10-30 at 9 15 04 AM\" src=\"https://user-images.githubusercontent.com/337963/97709951-7d516b00-1a91-11eb-91a8-e323abe037af.png\">\r\n\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n-  N / A\r\n\r\n## Steps to reproduce\r\n\r\n-  N / A\r\n\r\n## Further details\r\n\r\nPlease feel free to close this if it isn't something you are in control of / hosting yourselves. I wasn't able to find a status page for the tool / platform and am not familiar with it. Google results get mixed in with the ISP provider unfortunately. 😄 ","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Haha, i have the same problem with the ISP, particularly since they are _my_ ISP. \r\n\r\nSpectrum is a chat platform that got bought out by GitHub about a year and a half ago - we'd been using them prior to that buyout and have been continuing to do so. Thanks for the heads up on this, but unfortunately there isn't much we can do about their deploys failing. Upside is it seems to be back up and running now, though!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"How to handle errors correctly","author":{"__typename":"User","login":"odanu","id":"MDQ6VXNlcjExMTA0MDg=","name":null},"body":"Hi,\r\nI am currently on the stage of migrating from 0.33 -> 0.36. Gone through all the provided documentation, but I am still confused on what would be the correct way of handling errors(also read the suggested article: https://medium.com/@sachee/200-ok-error-handling-in-graphql-7ec869aec9bc).\r\n\r\nBefore going to write this question, I just wanted to give it a try myself.\r\nOne of the most important use cases related to error handling is that we want to cover the case when a auth token expires on  the backend, which results in an error when performing the next app query or mutation. At this stage, we want to catch the error, perform automatically a relogin(call `login` mutation), which basically will return a new auth token and after all that re-execute the failed request(query/mutation).\r\nAs far as I managed to understand, the best way to do this is through `ApolloErrorInterceptor`, which I basically did. I created a custom `ApolloErrorInterceptor`, returned it in `InterceptorProvider.additionalErrorInterceptor`.\r\nThe first problem I met is that it seems that not absolutely all errors get through this interceptor. Which left me without ideas on how to continue, but since this new apollo sdk approach is pretty fresh, I also left some space to consider it might be a bug, `full stop`.\r\n\r\nNow my question is: what is the correct way of handling errors? Can we improve the documentation to provide more examples about it?\r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Interesting, I thought it was me but maybe `InterceptorProvider.additionalErrorInterceptor` is not what we expect.\r\nI just went through same update and had same problem as you do. what worked for me was:\r\n\r\n```swift\r\n/// InterceptorProvider\r\n    func interceptors<Operation: GraphQLOperation>(for operation: Operation) -> [ApolloInterceptor] {\r\n        return [\r\n            MaxRetryInterceptor(),\r\n            LegacyCacheReadInterceptor(store: self.store),\r\n            TokenAddingInterceptor(...),\r\n            NetworkFetchInterceptor(client: self.client),\r\n            TokenErrorInterceptor(...),\r\n            ResponseCodeInterceptor(),\r\n            LegacyParsingInterceptor(cacheKeyForObject: self.store.cacheKeyForObject),\r\n            AutomaticPersistedQueryInterceptor(),\r\n            LegacyCacheWriteInterceptor(store: self.store),\r\n        ]\r\n    }\r\n\r\n    func additionalErrorInterceptor<Operation: GraphQLOperation>(for operation: Operation) -> ApolloErrorInterceptor? {\r\n        return nil\r\n    }\r\n```\r\n\r\n```swift\r\n/// TokenErrorInterceptor\r\n    func interceptAsync<Operation: GraphQLOperation>(chain: RequestChain, request: HTTPRequest<Operation>, response: HTTPResponse<Operation>?, completion: @escaping (Result<GraphQLResult<Operation.Data>, Error>) -> Void) {\r\n        guard\r\n            let responseStatusCode = response?.httpResponse.statusCode,\r\n            responseStatusCode == 401\r\n        else {\r\n            chain.proceedAsync(request: request, response: response, completion: completion)\r\n            return\r\n        }\r\n        \r\n        tokenService.renewAccessToken { [weak self] (error: OAuthSwiftError?) in\r\n            guard self != nil else { return }\r\n            \r\n            if let error = error {\r\n                chain.handleErrorAsync(error, request: request, response: response, completion: completion)\r\n            } else {\r\n                chain.retry(request: request, completion: completion)\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nneither `additionalErrorInterceptor` nor having `TokenErrorInterceptor` after `ResponseCodeInterceptor` worked","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"`additionalErrorInterceptor` is generally intended for error handling *after* something has been dealt with by the request chain. In this case, you want to deal with it *within* the request chain, so that you can call retry. \r\n\r\n@RolandasRazma's example is a great one if the token error is coming back from middleware and causing a `401 Unauthorized` to be returned. \r\n\r\nIf there's something within GraphQL that's returning the error, you'll get a `200 OK` and an error on `GraphQLResult`'s `errors` property. In that case, you would want to insert your `TokenErrorInterceptor` after the `LegacyParsingInterceptor`, since that's where those would actually be parsed.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> `additionalErrorInterceptor` is generally intended for error handling _after_ something has been dealt with by the request chain.\r\n\r\nJust for the sake of understanding it better, what does it mean and why in some particular conditions it is not called.? I guess some of the docs needs to be more explicit about the use cases when it should be used.","author":{"__typename":"User","login":"odanu","id":"MDQ6VXNlcjExMTA0MDg=","name":null}},{"__typename":"IssueComment","body":"It only wouldn't be called if it doesn't exist. It's designed to be a place to have all errors, no matter what the origin, pass through before being handed back to the caller. This allows for things like error logging that are hard to do without a centralized error handler. \r\n\r\nI'll work on clarifying this in the docs.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@odanu @RolandasRazma Added some docs on the additional error interceptor to #1484 ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"OK, that's merged - is there anything else here I can help clarify, or do you mind if we close this out?","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I think you can close this ticket. Though you have to maybe give it a try for different  use cases around `additionalErrorInterceptor`. As written above, it looks like it  doesn't catch all the errors.","author":{"__typename":"User","login":"odanu","id":"MDQ6VXNlcjExMTA0MDg=","name":null}},{"__typename":"IssueComment","body":"> nor having `TokenErrorInterceptor` after `ResponseCodeInterceptor` worked\r\n\r\nHere the issue would be that the `401` response code would be caught by the `ResponseCodeInterceptor` [and returned as an error through `handleErrorAsync`](https://github.com/apollographql/apollo-ios/blob/a00031c2a357c03a2f58a5dda0afb35462dfef42/Sources/Apollo/ResponseCodeInterceptor.swift#L44) (which in turn [calls the `additionalErrorInterceptor` if it exists](https://github.com/apollographql/apollo-ios/blob/a00031c2a357c03a2f58a5dda0afb35462dfef42/Sources/Apollo/RequestChain.swift#L149)) and the chain would not proceed. \r\n\r\nThat would mean `TokenErrorInterceptor` wouldn't get called because an error has already been caught. That's why you have to put it before the `ResponseCodeInterceptor`. \r\n\r\nDoes that help explain why that wouldn't work? Or is there another place where things aren't showing up where you expect them to? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"No Ellen. I was not referring this part. Let's sum up again the thoughts.\r\nThe documentation and you, assures that `additionalErrorInterceptor` gets called, having the error which was collected in any of the interceptors. Which basically means that no matter at which level of the request/response/parsing/etc an error occurs, it will arrive to the `additionalErrorInterceptor`.\r\nNow as mentioned in the initial question, it seems that not all of the errors reach the `additionalErrorInterceptor`. That was my initial test. I just thought it would be the right place to handle all the errors, but got blocked because some of the errors didn't get to it. Check the question again please :).","author":{"__typename":"User","login":"odanu","id":"MDQ6VXNlcjExMTA0MDg=","name":null}},{"__typename":"IssueComment","body":"Right, and my question is, what are the errors that are not passed through in your testing? \r\n\r\nNote that if there is an _expected_ error, which is handled by the interceptor (for example, the auto-persisted-query-specific error which is handled by the `AutomaticPersistedQueryInterceptor`), then that is not passed on since that is an error that was expected and handled. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"I will try to collect the information tomorrow;)","author":{"__typename":"User","login":"odanu","id":"MDQ6VXNlcjExMTA0MDg=","name":null}},{"__typename":"IssueComment","body":"So I can find 2 cases when `additionalErrorInterceptor` is not used:\r\n1. when an interceptor caught the error triggered retry... the example with expired token\r\n2. `GraphQLError` objects which arrive through `GraphQLResults.errors` array.\r\n\r\nBut I guess both of these cases is expected behaviour.","author":{"__typename":"User","login":"odanu","id":"MDQ6VXNlcjExMTA0MDg=","name":null}},{"__typename":"IssueComment","body":"You're correct - because a `GraphQLResult` can contain partial results with an error explaining what's missing, simply having `errors` be non-empty doesn't indicate that a request failed. \r\n\r\nYou can see an example of where we're looking for _specific_ errors to handle in that array in the `AutomaticPersistedQueryInterceptor`, and if you know your backend will be returning _specific_ errors you need to handle in that array (for example, token expiration errors there instead of as a 401), you can add your own interceptors to handle those. \r\n\r\nOtherwise, `GraphQLError`s should be returned as part of the `GraphQLResult`.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"@odanu Anything else here or can I close this out? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Oh sorry. All good. I had to close it earlier.","author":{"__typename":"User","login":"odanu","id":"MDQ6VXNlcjExMTA0MDg=","name":null}},{"__typename":"IssueComment","body":"👍 Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"How to fix that error?","author":{"__typename":"User","login":"zinminphyo","id":"MDQ6VXNlcjMzMzY4MzQ3","name":"Zin Min Phyo"},"body":"## Bug report\r\n\r\nPlease replace this line with a short description of the problem. Make sure you've read `CHANGELOG.md` in the root of the repo to make sure a new version hasn't already addressed your problem!\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.34.1\r\n- Xcode version: 12.0\r\n- Swift version: 5\r\n<img width=\"1440\" alt=\"Screen Shot 2020-11-04 at 11 15 54\" src=\"https://user-images.githubusercontent.com/33368347/98070409-7f4f6b80-1e8f-11eb-8a83-0e96e4de9321.png\">\r\n\r\n- Package manager:\r\n\r\n## Steps to reproduce\r\n\r\nPlease replace this line with steps to reproduce the problem.\r\n\r\n## Further details\r\n\r\nPlease replace this line with any further details or context necessary to understand the problem. Delete this section if you don't have anything further to add.","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"@zinminphyo Can you please share more details about when and how this happened? It's not something I can necessarily tell you why it's happening without more detail. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Since I haven't gotten any further details here, I'm going to close this out. @zinminphyo Please reopen with further details if you have them. Anyone else with a similar problem, please open a new issue. Thank you!","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Generate Apollo GraphQL Api Bitrise issue","author":{"__typename":"User","login":"Kevin94singh","id":"MDQ6VXNlcjIxMzQ3NDg5","name":"Kevin Singh"},"body":"Hi,\r\n\r\nWhen building on a local machine with Fastlane, everything works ok. However, when I try to upload my build with Bitrise, I'm getting an error: \r\n\r\n```\r\n- ▸ Running script 'Generate Apollo GraphQL API'\r\n** ARCHIVE FAILED **\r\nThe following build commands failed:\r\n\tPhaseScriptExecution Generate\\ Apollo\\ GraphQL\\ API /Users/vagrant/Library/Developer/Xcode/DerivedData/project_name-asogvanbfzdyhybkhoculdmlwwfk/Build/Intermediates.noindex/ArchiveIntermediates/project_name_beta/IntermediateBuildFilesPath/project_name.build/Release-iphoneos/project_name_beta/Script-7A325491234C77FE003B1AE2.sh\r\n(1 failure)\r\n[11:36:34]: Exit status: 65\r\n```\r\n**Our Generate Apollo GraphQL API script**\r\n\r\n```\r\nSCRIPT_PATH=\"${PODS_ROOT}/Apollo/scripts\"\r\ncd \"${SRCROOT}/ProjectName\"\r\n\"${SCRIPT_PATH}\"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./**/*.graphql --localSchemaFile=\"schema.json\" API.swift\r\n```\r\n\r\n| - project_folder\r\n    | project.xcodeproj\r\n    | - target_folder \r\n        | schema.json\r\n        | AppDelegate.swift\r\n        | ViewController.swift\r\n        | etc...\r\n    | - another_folders\r\n        | etc...\r\n\r\n**Apollo version: 0.30, iOS, Bitrise Fastlane version 2.7.x ** We have two targets (prod and beta), currently trying to build for Beta.\r\n\r\nI think that there might be an issue with NPM. In our workflow on Bitrise, I've set `run npm command`- `install -g apollo@2.25` - the version I have on my machine. But this step doesn't help. \r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"If you're using `run-bundled-codegen` it shouldn't be an issue with NPM - the bundled codegen downloads Node and all dependencies as a workaround because we were having *so* many problems with NPM.  It certainly seems like another issue is happening that's causing the code generation to fail but isn't spitting out a reason correctly. \r\n\r\nI take it things build correctly when you try to run this locally? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"> If you're using `run-bundled-codegen` it shouldn't be an issue with NPM - the bundled codegen downloads Node and all dependencies as a workaround because we were having _so_ many problems with NPM. It certainly seems like another issue is happening that's causing the code generation to fail but isn't spitting out a reason correctly.\r\n> \r\n> I take it things build correctly when you try to run this locally?\r\n\r\nYes, when I run this locally with Fastlane, it builds correctly.","author":{"__typename":"User","login":"Kevin94singh","id":"MDQ6VXNlcjIxMzQ3NDg5","name":"Kevin Singh"}},{"__typename":"IssueComment","body":"Weird - and are you using Fastlane on bitrise as well, or something else? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Yes, we are using Fastlane. Our steps for a workflow are Activate SSH Key, Git Clone repository, and Fastlane (set to a version 2.x.x, that is currently 2.7.1).","author":{"__typename":"User","login":"Kevin94singh","id":"MDQ6VXNlcjIxMzQ3NDg5","name":"Kevin Singh"}},{"__typename":"IssueComment","body":"Cool, thanks for clarifying - how are you setting things to \"beta\" - using a Scheme or a build configuration or some combination thereof? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"We have two schemes - \"beta\" and \"prod\". Each has its own target. The script is implemented in both targets .","author":{"__typename":"User","login":"Kevin94singh","id":"MDQ6VXNlcjIxMzQ3NDg5","name":"Kevin Singh"}},{"__typename":"IssueComment","body":"And am I correct in assuming the `.graphql` files and `API.swift` output are in the same folder (under `\"${SRCROOT}/ProjectName\"`), just shared between both targets? \r\n\r\nHonestly, if it's working locally and the only error info you're getting from Bitrise is a generic exit code 65, I'm not sure how much help I can be - you may want to reach out to them to see if you can get more detailed logs about what's not building on your beta version. \r\n\r\nOne thing I have tried in the past when something's building locally but not on CI for me is to check it back out in a separate folder and try from there - I've definitely found issues where there's some kind of local config not checked into version control that means it works in your main working directory, but not for anyone else (including CI) that checks it out. Probably worth a shot just to rule that out as a cause.","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Yes, it is shared between both targets. Prod build shows the same failure as a beta. \r\n\r\nI'll try to get more detailed logs and let you know. Thank you for your time! 😊","author":{"__typename":"User","login":"Kevin94singh","id":"MDQ6VXNlcjIxMzQ3NDg5","name":"Kevin Singh"}}]}},{"__typename":"Issue","title":"callbackQueue is not used in WebSocketTransport","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"},"body":"## Bug report\r\n\r\nhttps://github.com/apollographql/apollo-ios/blob/185d6b784538691b5a4287c25df9cae140abec02/Sources/ApolloWebSocket/WebSocketTransport.swift#L361 callbackQueue is unused\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.36.0\r\n\r\n## Steps to reproduce\r\n\r\nsubscribe using any callbackQueue, callback is done on some internal one","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Welp, that's embarrassing. Fix is up in #1507. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"thanks","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"Thank YOU for catching it","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"WebSocketTransport.send completionHandler is called in non escaping manner in case of error","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"},"body":"## Bug report\r\n\r\nhttps://github.com/apollographql/apollo-ios/blob/185d6b784538691b5a4287c25df9cae140abec02/Sources/ApolloWebSocket/WebSocketTransport.swift#L364\r\n\r\ncompletionHandler is called in non escaping manner in case of error\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.36.0","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Do you mean it's not called on the callback queue? ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"Was thinking about @escaping but yes, calling it on callback cue would fix that","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}},{"__typename":"IssueComment","body":"It's declared as [`@escaping` here](https://github.com/apollographql/apollo-ios/blob/185d6b784538691b5a4287c25df9cae140abec02/Sources/ApolloWebSocket/WebSocketTransport.swift#L362) - declaring escaping does not require it to escape, though. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}},{"__typename":"IssueComment","body":"sure, but it might break flow depending on what's happening internally\r\n\r\n```swift\r\nWebSocketTransport.send {\r\n   print(\"a\")\r\n}\r\n\r\nprint(\"b\")\r\n```\r\n\r\nwhat order will be output depends on internal state and that's not great.\r\n\r\nIn any case, closing as https://github.com/apollographql/apollo-ios/pull/1507 fixes it","author":{"__typename":"User","login":"RolandasRazma","id":"MDQ6VXNlcjEwMjcxODc=","name":"Rolandas Razma"}}]}},{"__typename":"Issue","title":"Compatibility issues on Linux with CommonCrypto","author":{"__typename":"User","login":"abdimaye","id":"MDQ6VXNlcjI5MDIzNzI2","name":null},"body":"## Feature request\r\n\r\nThe CommonCrypto module is only available in Xcode 10+. It would be nice to have this replaced with an open source module such that the apollo client can run on other platforms.\r\n\r\n## Motivation\r\n\r\nWe are currently trying to run parts of our codebase on Linux.\r\n\r\n## Proposed solution\r\n\r\nReplace CommonCrypto with an open source library. There are only two files in ApolloCore that use it and the diff wouldn't be that big. \r\n\r\nI was looking at `swift-crypto` https://swift.org/blog/crypto/ but there are compatibility issues where it requires mocos 10.15 and apollo requires 10.10. \r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"We don't *officially* support Linux, but I would very much like to. My thought is that we could make some kind of protocol that uses `swift-crypto` for Linux band still uses `CommonCrypto` on iOS etc. Would be more than open to a PR if you have some time, I'm buried at the moment. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}},{"__typename":"Issue","title":"Apollo CLI step fails to locate SourcePackages directory ","author":{"__typename":"User","login":"alcamla","id":"MDQ6VXNlcjI5MDQ1Mjk=","name":"Alejandro Camacho"},"body":"## Bug report\r\n\r\nI am following the steps on the tutorial for iOS. I added Apollo to the project using SPM. After adding the corresponding CLI script, and building the project, I get the following error: \r\n`error: Unable to locate SourcePackages directory from BUILD_ROOT: '/Users/myUser/Library/Developer/Xcode/DerivedData/Build/Products'`\r\nI have noticed that BUILD_ROOT is set to that folder directly, so there is no chance that the while loop finds the SourcePackages folder. I am running on Xcode 12.1\r\n\r\n## Versions\r\n\r\nPlease fill in the versions you're currently using: \r\n\r\n- `apollo-ios` SDK version: 0.36\r\n- Xcode version: 12.1\r\n- Swift version: 5.3\r\n- Package manager: Swift package manager\r\n\r\n## Steps to reproduce\r\n\r\n1. Create project\r\n2. Add Apollo dependency using SPM\r\n3. Add new run script phase with the code generation build step for SPM\r\n4. Modify the last line to download the schema on first run\r\n5. Build the project \r\n","comments":{"__typename":"IssueCommentConnection","nodes":[{"__typename":"IssueComment","body":"Ugh, I bet they changed the damned location of the source packages in 12.1 - it's definitely undocumented. \r\n\r\nI'll get a look at this tomorrow, but I think I'm going to recommend trying the [Swift Scripting Setup](https://www.apollographql.com/docs/ios/swift-scripting/) - that doesn't have any dependency on going diving through the derived data folder. ","author":{"__typename":"User","login":"designatednerd","id":"MDQ6VXNlcjE5NzY0OTg=","name":"Ellen Shapiro"}}]}}]}}}}
