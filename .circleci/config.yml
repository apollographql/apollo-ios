version: 2.1

parameters:
  xcode_version:
    type: string
    default: "12.4.0"
  ios_current_version:
    type: string
    default: "14.4"
  ios_previous_version:
    type: string
    default: "13.7"
  ios_sdk:
    type: string
    default: "iphonesimulator14.4"
  macos_version: # The user-facing version string for macOS builds
    type: string
    default: "10.15"
  macos_sdk: # The full SDK string to use for macOS builds
    type: string
    default: "macosx11.1"
  tvos_version: # The user-facing version string of tvOS builds
    type: string
    default: "14.3"
  tvos_sdk:
    type: string
    default: "appletvsimulator14.3"

commands:
  integration_test_setup:
    steps:
      - restore_cache:
          key: starwars-server
      - common_test_setup
      - run:
          command: ./scripts/install-node.sh
          name: Install Node
      - run:
          command: ./scripts/install-or-update-starwars-server.sh
          name: Install/Update StarWars Server
      - run:
          command: cd ../starwars-server && npm start
          name: Start StarWars Server
          background: true
      - run:
          command: cd SimpleUploadServer && npm install && npm start
          name: Start Upload Server
          background: true
      - run:
          command: sudo chmod -R +rwx SimpleUploadServer
          name: Adjust permissions for simple upload server folder
  integration_test_cleanup:
    steps:
      - save_cache:
          key: starwars-server
          paths:
            - ../starwars-server
  common_test_setup:
    description: Commands to run for setup of every set of tests
    steps:
      - checkout
      - run:
          command: rm ~/.ssh/id_rsa
          name: Remove old SSH key
      - run:
          command: for ip in $(dig @8.8.8.8 bitbucket.org +short); do ssh-keyscan bitbucket.org,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts || true
          name: Bitbucket Key Workaround
      - run:
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts || true
          name: Github Key Workaround
  build_and_run_tests:
    steps:
      - run:
          command: xcodebuild clean build build-for-testing -project "Apollo.xcodeproj" -scheme "${CIRCLE_XCODE_SCHEME}" -sdk "${CIRCLE_XCODE_SDK}" -destination "${DESTINATION}" -testPlan "${CIRCLE_XCODE_TEST_PLAN}" | xcpretty
          name: Clean and build for testing
      - run:
          command: xcodebuild test-without-building -resultBundlePath ~/TestResults/ResultBundle.xcresult -project "Apollo.xcodeproj" -scheme "${CIRCLE_XCODE_SCHEME}" -sdk "${CIRCLE_XCODE_SDK}" -destination "${DESTINATION}" -testPlan "${CIRCLE_XCODE_TEST_PLAN}" | xcpretty
          name: Run tests
      - save-xcodebuild-artifacts
  save-xcodebuild-artifacts:
    description: Save artifacts logs, crash reports and test results generated by xcodebuild
    steps:
      - store_artifacts:
          name: Save xcodebuild logs
          path: logs
          destination: logs
      - store_artifacts:
          name: Save crash logs
          path: ~/Library/Logs/DiagnosticReports/
          destination: crashes
      - run:
          name: Zip result bundle
          working_directory: ~/TestResults
          command: zip -r ResultBundle.zip ResultBundle.xcresult
          when: always
      - store_artifacts:
          name: Save test results
          path: ~/TestResults/ResultBundle.zip
          destination: results

# Important! When adding a new job to `jobs`, make sure to define when it
# executes by also adding it to the `workflows` section below!
jobs:
  IntegrationTests_macOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=macOS,arch=x86_64
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-IntegrationTestPlan
      CIRCLE_XCODE_SDK: << pipeline.parameters.macos_sdk >>
    steps:
      - integration_test_setup
      - build_and_run_tests
      - integration_test_cleanup

  macOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=macOS,arch=x86_64
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-CITestPlan
      CIRCLE_XCODE_SDK: << pipeline.parameters.macos_sdk >>
    steps:
      - common_test_setup
      - build_and_run_tests

  iOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=iOS Simulator,OS=<< pipeline.parameters.ios_current_version >>,name=iPhone 11
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-CITestPlan
      CIRCLE_XCODE_SDK: << pipeline.parameters.ios_sdk >>
    steps:
      - common_test_setup
      - build_and_run_tests

  iOS_previous:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=iOS Simulator,OS=<< pipeline.parameters.ios_previous_version >>,name=iPhone 11
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-CITestPlan
      CIRCLE_XCODE_SDK: << pipeline.parameters.ios_sdk >>
    steps:
      - common_test_setup
      - build_and_run_tests

  tvOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=tvOS Simulator,OS=<< pipeline.parameters.tvos_version >>,name=Apple TV
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-CITestPlan
      CIRCLE_XCODE_SDK: << pipeline.parameters.tvos_sdk >>
    steps:
      - common_test_setup
      - build_and_run_tests

  CodegenLib_macOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=macOS,arch=x86_64
      CIRCLE_XCODE_SCHEME: ApolloCodegenLib
      CIRCLE_XCODE_TEST_PLAN: Apollo-CodegenTestPlan
      CIRCLE_XCODE_SDK: << pipeline.parameters.macos_sdk >>
    steps:
      - common_test_setup
      - build_and_run_tests

  CocoaPodsTrunk:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    steps:
      - checkout
      # TODO: Remove when Circle updates the version of CP installed on their
      # image to one that doesn't have https://github.com/CocoaPods/CocoaPods/issues/9176
      - run: pod repo add-cdn trunk 'https://cdn.cocoapods.org/'
      - run: pod trunk push Apollo.podspec
      - run: pod trunk me clean-sessions --all

workflows:
  version: 2
  # This workflow builds and tests the library across various operating systems and versions
  build-and-test:
    jobs:
      - IntegrationTests_macOS_current:
          name: Apollo Integration Tests macOS << pipeline.parameters.macos_version >>
      - macOS_current:
          name: Apollo macOS << pipeline.parameters.macos_version >>
      - iOS_current:
          name: Apollo iOS << pipeline.parameters.ios_current_version >>
      - iOS_previous:
          name: Apollo iOS << pipeline.parameters.ios_previous_version >>
      - tvOS_current:
          name: Apollo tvOS << pipeline.parameters.tvos_version >>
      - CodegenLib_macOS_current:
          name: Swift Code Generation
      - CocoaPodsTrunk:
          name: Push Podspec to CocoaPods Trunk
          requires:
            - Apollo macOS << pipeline.parameters.macos_version >>
            - Apollo iOS << pipeline.parameters.ios_current_version >>
            - Apollo iOS << pipeline.parameters.ios_previous_version >>
            - Apollo tvOS << pipeline.parameters.tvos_version >>
            - Swift Code Generation
          filters:
            # Only build semver tags
            tags:
              only: /((\d*)\.(\d*)\.(\d*)).*/
            # Don't run this on any branches
            branches:
              ignore: /.*/
