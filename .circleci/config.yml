version: 2.1

parameters:
  xcode_version:
    type: string
    default: "14.0"
  ios_current_version:
    type: string
    default: "16.0"
  ios_previous_version:
    type: string
    default: "15.5"
  macos_version: # The user-facing version string for macOS builds
    type: string
    default: "12.5.1"
  tvos_version: # The user-facing version string of tvOS builds
    type: string
    default: "16.0"

commands:
  integration_test_setup:
    steps:
      - restore_cache:
          key: starwars-server
      - restore_cache:
          key: apollo-server-graphql-transport-ws
      - common_test_setup
      - run:
          command: ./scripts/install-node-v12.sh
          name: Install Node
      - run:
          command: ./scripts/install-or-update-starwars-server.sh
          name: Install/Update StarWars Server
      - run:
          command: cd ../starwars-server && npm start
          name: Start StarWars Server
          background: true
      - run:
          command: cd SimpleUploadServer && nvm use && npm install && npm start
          name: Start Upload Server
          background: true
      - run:
          command: sudo chmod -R +rwx SimpleUploadServer
          name: Adjust permissions for simple upload server folder
      - run:
          command: ./scripts/install-apollo-server-docs-example-server.sh
          name: Install Apollo Server (graphql-transport-ws configuration)
      - run:
          command: cd ../docs-examples/apollo-server/v3/subscriptions-graphql-ws && npm start
          name: Start Apollo Server (graphql-transport-ws configuration)
          background: true
  integration_test_cleanup:
    steps:
      - save_cache:
          key: starwars-server
          paths:
            - ../starwars-server
      - save_cache:
          key: apollo-server-graphql-transport-ws
          paths:
            - ../docs-examples/apollo-server/v3/subscriptions-graphql-ws
  common_test_setup:
    description: Commands to run for setup of every set of tests
    steps:
      - checkout
      - run:
          command: rm ~/.ssh/id_rsa
          name: Remove old SSH key
      - run:
          command: for ip in $(dig @8.8.8.8 bitbucket.org +short); do ssh-keyscan bitbucket.org,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts || true
          name: Bitbucket Key Workaround
      - run:
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts || true
          name: Github Key Workaround
      - run:
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install xcbeautify
          name: Install xcbeautify
  build_and_run_xcode_tests:
    steps:
      - run:
          command: xcodebuild clean build-for-testing -project "Apollo.xcodeproj" -scheme "${CIRCLE_XCODE_SCHEME}" -destination "${DESTINATION}" -testPlan "${CIRCLE_XCODE_TEST_PLAN}" | xcbeautify
          name: Clean and build for testing
      - run:
          command: xcodebuild test-without-building -resultBundlePath ~/TestResults/ResultBundle.xcresult -project "Apollo.xcodeproj" -scheme "${CIRCLE_XCODE_SCHEME}" -destination "${DESTINATION}" -testPlan "${CIRCLE_XCODE_TEST_PLAN}" | xcbeautify
          name: Run Xcode tests
      - save-xcodebuild-artifacts
  run_js_tests:
    steps:
      - run:
          command: npm install && npm test
          name: Run JS frontend tests
          working_directory: Sources/ApolloCodegenLib/Frontend/JavaScript/
  cocoapods_install_test:
    steps:
      - run:
          working_directory: Tests/CodegenCLITests/pod-install-test/
          command: pod install --verbose
          name: CocoaPods - Install
      - run:
          working_directory: Tests/CodegenCLITests/pod-install-test/Pods/Apollo/
          command: ./apollo-ios-cli init --schema-name NewTestSchema
          name: CocoaPods - CLI Test (init)
      - run:
          working_directory: Tests/CodegenCLITests/pod-install-test/Pods/Apollo/
          command: ./apollo-ios-cli generate
          name: CocoaPods - CLI Test (generate)
  swiftpm_plugin_test:
    steps:
      - run:
          working_directory: Tests/CodegenCLITests/swiftpm-test/
          command: swift build
          name: SwiftPM - Build package
      - run:
          working_directory: Tests/CodegenCLITests/swiftpm-test/
          command: swift package plugin --allow-writing-to-package-directory apollo-generate --verbose
          name: SwiftPM - Plugin Test (generate)
  save-xcodebuild-artifacts:
    description: Save artifacts logs, crash reports and test results generated by xcodebuild
    steps:
      - store_artifacts:
          name: Save xcodebuild logs
          path: logs
          destination: logs
      - store_artifacts:
          name: Save crash logs
          path: ~/Library/Logs/DiagnosticReports/
          destination: crashes
      - run:
          name: Zip result bundle
          working_directory: ~/TestResults
          command: zip -r ResultBundle.zip ResultBundle.xcresult
          when: always
      - store_artifacts:
          name: Save test results
          path: ~/TestResults/ResultBundle.zip
          destination: results

# Important! When adding a new job to `jobs`, make sure to define when it
# executes by also adding it to the `workflows` section below!
jobs:
  Swift_Build:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    steps:
      - common_test_setup
      - run:
          command: swift build

  IntegrationTests_macOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=macOS,arch=x86_64
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-IntegrationTestPlan
    steps:
      - integration_test_setup
      - build_and_run_xcode_tests
      - integration_test_cleanup

  macOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=macOS,arch=x86_64
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-CITestPlan
    steps:
      - common_test_setup
      - build_and_run_xcode_tests

  iOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=iOS Simulator,OS=<< pipeline.parameters.ios_current_version >>,name=iPhone 14
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-CITestPlan
    steps:
      - common_test_setup
      - build_and_run_xcode_tests

  iOS_previous:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=iOS Simulator,OS=<< pipeline.parameters.ios_previous_version >>,name=iPhone 13
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-CITestPlan
    steps:
      - common_test_setup
      - build_and_run_xcode_tests

  tvOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=tvOS Simulator,OS=<< pipeline.parameters.tvos_version >>,name=Apple TV
      CIRCLE_XCODE_SCHEME: Apollo
      CIRCLE_XCODE_TEST_PLAN: Apollo-CITestPlan
    steps:
      - common_test_setup
      - build_and_run_xcode_tests

  CodegenLib_macOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=macOS,arch=x86_64
      CIRCLE_XCODE_SCHEME: ApolloCodegenLib
      CIRCLE_XCODE_TEST_PLAN: Apollo-CodegenTestPlan
    steps:
      - common_test_setup
      - build_and_run_xcode_tests
      - run_js_tests
  
  CodegenCLI_macOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=macOS,arch=x86_64
      CIRCLE_XCODE_SCHEME: CodegenCLI
      CIRCLE_XCODE_TEST_PLAN: CodegenCLITestPlan
    steps:
      - common_test_setup
      - build_and_run_xcode_tests
  
  CodegenIntegration_macOS_current:
    macos:
      xcode: << pipeline.parameters.xcode_version >>
    environment:
      DESTINATION: platform=macOS,arch=x86_64
    steps:
      - common_test_setup
      - cocoapods_install_test
      - swiftpm_plugin_test

workflows:
  version: 2
  # This workflow builds and tests the library across various operating systems and versions
  build-and-test:
    jobs:
      - Swift_Build:
          name: Build as Swift package
      - IntegrationTests_macOS_current:
          name: Apollo Integration Tests - macOS << pipeline.parameters.macos_version >>
      - macOS_current:
          name: Apollo Unit Tests - macOS << pipeline.parameters.macos_version >>
      - iOS_current:
          name: Apollo Unit Tests - iOS << pipeline.parameters.ios_current_version >>
      - iOS_previous:
          name: Apollo Unit Tests - iOS << pipeline.parameters.ios_previous_version >>
      - tvOS_current:
          name: Apollo Unit Tests - tvOS << pipeline.parameters.tvos_version >>
      - CodegenLib_macOS_current:
          name: Codegen Lib Unit Tests - macOS << pipeline.parameters.macos_version >>
      - CodegenCLI_macOS_current:
          name: Codegen CLI Unit Tests - macOS << pipeline.parameters.macos_version >>
      - CodegenIntegration_macOS_current:
          name: Codegen CLI Integration Tests - macOS << pipeline.parameters.macos_version >>
